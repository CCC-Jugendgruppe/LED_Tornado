
apa102ledstreifen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fe4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080031b4  080031b4  000131b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003264  08003264  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003264  08003264  00013264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800326c  0800326c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800326c  0800326c  0001326c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003270  08003270  00013270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  080032e4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  080032e4  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f5e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d31  00000000  00000000  00035ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  0003ad30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000977  00000000  00000000  0003b978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021abf  00000000  00000000  0003c2ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd92  00000000  00000000  0005ddae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cadbe  00000000  00000000  00069b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000003c  00000000  00000000  001348fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002510  00000000  00000000  0013493c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000157  00000000  00000000  00136e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00002019  00000000  00000000  00136fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b80c 	b.w	80002a0 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f002 fe34 	bl	8002efc <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__aeabi_idiv0>:
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop

080002a4 <__do_global_dtors_aux>:
 80002a4:	b510      	push	{r4, lr}
 80002a6:	4c05      	ldr	r4, [pc, #20]	; (80002bc <__do_global_dtors_aux+0x18>)
 80002a8:	7823      	ldrb	r3, [r4, #0]
 80002aa:	b933      	cbnz	r3, 80002ba <__do_global_dtors_aux+0x16>
 80002ac:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x1c>)
 80002ae:	b113      	cbz	r3, 80002b6 <__do_global_dtors_aux+0x12>
 80002b0:	4804      	ldr	r0, [pc, #16]	; (80002c4 <__do_global_dtors_aux+0x20>)
 80002b2:	f3af 8000 	nop.w
 80002b6:	2301      	movs	r3, #1
 80002b8:	7023      	strb	r3, [r4, #0]
 80002ba:	bd10      	pop	{r4, pc}
 80002bc:	20000070 	.word	0x20000070
 80002c0:	00000000 	.word	0x00000000
 80002c4:	0800319c 	.word	0x0800319c

080002c8 <frame_dummy>:
 80002c8:	b508      	push	{r3, lr}
 80002ca:	4b03      	ldr	r3, [pc, #12]	; (80002d8 <frame_dummy+0x10>)
 80002cc:	b11b      	cbz	r3, 80002d6 <frame_dummy+0xe>
 80002ce:	4903      	ldr	r1, [pc, #12]	; (80002dc <frame_dummy+0x14>)
 80002d0:	4803      	ldr	r0, [pc, #12]	; (80002e0 <frame_dummy+0x18>)
 80002d2:	f3af 8000 	nop.w
 80002d6:	bd08      	pop	{r3, pc}
 80002d8:	00000000 	.word	0x00000000
 80002dc:	20000074 	.word	0x20000074
 80002e0:	0800319c 	.word	0x0800319c

080002e4 <DigiLed_init>:

/**
 *  @brief Initialize digital led class
 */
void DigiLed_init(SPI_HandleTypeDef *hspi)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	_frameModified = TRUE; 		// Initial set to true to force update after initialization of frame buffer
 80002ec:	4b1b      	ldr	r3, [pc, #108]	; (800035c <DigiLed_init+0x78>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	701a      	strb	r2, [r3, #0]

	_spiHandler = hspi;			// SPI handler is given to library
 80002f2:	4a1b      	ldr	r2, [pc, #108]	; (8000360 <DigiLed_init+0x7c>)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	6013      	str	r3, [r2, #0]

	// TODO Auto-generated constructor stub

	for (int led = 0; led < LED_FRAME_SIZE; led++)
 80002f8:	2300      	movs	r3, #0
 80002fa:	60fb      	str	r3, [r7, #12]
 80002fc:	e023      	b.n	8000346 <DigiLed_init+0x62>
	{
		_digitalLedframe[led].FieldsIn.INIT = 0x07; // Set MSB first 3 bits to identify start of LED packet
 80002fe:	4a19      	ldr	r2, [pc, #100]	; (8000364 <DigiLed_init+0x80>)
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	4413      	add	r3, r2
 8000306:	78da      	ldrb	r2, [r3, #3]
 8000308:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800030c:	70da      	strb	r2, [r3, #3]
		_digitalLedframe[led].FieldsIn.GLOBAL = 0x00; // Switch off LED global
 800030e:	4a15      	ldr	r2, [pc, #84]	; (8000364 <DigiLed_init+0x80>)
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	4413      	add	r3, r2
 8000316:	78da      	ldrb	r2, [r3, #3]
 8000318:	f36f 0204 	bfc	r2, #0, #5
 800031c:	70da      	strb	r2, [r3, #3]
		_digitalLedframe[led].FieldsIn.BLUE = 0x00;
 800031e:	4a11      	ldr	r2, [pc, #68]	; (8000364 <DigiLed_init+0x80>)
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	4413      	add	r3, r2
 8000326:	2200      	movs	r2, #0
 8000328:	709a      	strb	r2, [r3, #2]
		_digitalLedframe[led].FieldsIn.GREEN = 0x00;
 800032a:	4a0e      	ldr	r2, [pc, #56]	; (8000364 <DigiLed_init+0x80>)
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	009b      	lsls	r3, r3, #2
 8000330:	4413      	add	r3, r2
 8000332:	2200      	movs	r2, #0
 8000334:	705a      	strb	r2, [r3, #1]
		_digitalLedframe[led].FieldsIn.RED = 0x00;
 8000336:	4a0b      	ldr	r2, [pc, #44]	; (8000364 <DigiLed_init+0x80>)
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	2100      	movs	r1, #0
 800033c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	for (int led = 0; led < LED_FRAME_SIZE; led++)
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	3301      	adds	r3, #1
 8000344:	60fb      	str	r3, [r7, #12]
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	2b0f      	cmp	r3, #15
 800034a:	ddd8      	ble.n	80002fe <DigiLed_init+0x1a>
	}
	DigiLed_update(FALSE); // Update frame buffer using the value of _frameModified as set in initialiser.
 800034c:	2000      	movs	r0, #0
 800034e:	f000 f863 	bl	8000418 <DigiLed_update>
}
 8000352:	bf00      	nop
 8000354:	3710      	adds	r7, #16
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000114 	.word	0x20000114
 8000360:	20000118 	.word	0x20000118
 8000364:	2000008c 	.word	0x2000008c

08000368 <DigiLed_setRGB>:
 * Colors can be set using defines from "APA102_colors.h"
 * @param led position of the led in the string
 * @param rgb color of led in RGB color scheme
 */
void DigiLed_setRGB(uint8_t led, uint32_t rgb)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	6039      	str	r1, [r7, #0]
 8000372:	71fb      	strb	r3, [r7, #7]
	_digitalLedframe[led].FieldsIn.INIT = 0x7;
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	4a18      	ldr	r2, [pc, #96]	; (80003d8 <DigiLed_setRGB+0x70>)
 8000378:	009b      	lsls	r3, r3, #2
 800037a:	4413      	add	r3, r2
 800037c:	78da      	ldrb	r2, [r3, #3]
 800037e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8000382:	70da      	strb	r2, [r3, #3]
	_digitalLedframe[led].FieldsIn.GLOBAL = 0x1F;
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <DigiLed_setRGB+0x70>)
 8000388:	009b      	lsls	r3, r3, #2
 800038a:	4413      	add	r3, r2
 800038c:	78da      	ldrb	r2, [r3, #3]
 800038e:	f042 021f 	orr.w	r2, r2, #31
 8000392:	70da      	strb	r2, [r3, #3]
	_digitalLedframe[led].FieldsIn.BLUE = (uint8_t)(rgb);
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	683a      	ldr	r2, [r7, #0]
 8000398:	b2d1      	uxtb	r1, r2
 800039a:	4a0f      	ldr	r2, [pc, #60]	; (80003d8 <DigiLed_setRGB+0x70>)
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	4413      	add	r3, r2
 80003a0:	460a      	mov	r2, r1
 80003a2:	709a      	strb	r2, [r3, #2]
	_digitalLedframe[led].FieldsIn.GREEN = (uint8_t)(rgb >> 8);
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	0a1a      	lsrs	r2, r3, #8
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	b2d1      	uxtb	r1, r2
 80003ac:	4a0a      	ldr	r2, [pc, #40]	; (80003d8 <DigiLed_setRGB+0x70>)
 80003ae:	009b      	lsls	r3, r3, #2
 80003b0:	4413      	add	r3, r2
 80003b2:	460a      	mov	r2, r1
 80003b4:	705a      	strb	r2, [r3, #1]
	_digitalLedframe[led].FieldsIn.RED = (uint8_t)(rgb >> 16);
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	0c1a      	lsrs	r2, r3, #16
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	b2d1      	uxtb	r1, r2
 80003be:	4a06      	ldr	r2, [pc, #24]	; (80003d8 <DigiLed_setRGB+0x70>)
 80003c0:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	_frameModified = TRUE;
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <DigiLed_setRGB+0x74>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	701a      	strb	r2, [r3, #0]
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	2000008c 	.word	0x2000008c
 80003dc:	20000114 	.word	0x20000114

080003e0 <DigiLed_setAllRGB>:
 * expressed as hex values from 0 to 255 (0 - FF).
 * Colors can be set using defines from "APA102_colors.h"
 * @param rgb color of led in RGB color scheme
 */
void DigiLed_setAllRGB(uint32_t rgb)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
	for (int led = 0; led < LED_FRAME_SIZE; led++)
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	e008      	b.n	8000400 <DigiLed_setAllRGB+0x20>
	{
		DigiLed_setRGB(led, rgb);
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	6879      	ldr	r1, [r7, #4]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ffb7 	bl	8000368 <DigiLed_setRGB>
	for (int led = 0; led < LED_FRAME_SIZE; led++)
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	3301      	adds	r3, #1
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	2b0f      	cmp	r3, #15
 8000404:	ddf3      	ble.n	80003ee <DigiLed_setAllRGB+0xe>
	}
	_frameModified = TRUE;
 8000406:	4b03      	ldr	r3, [pc, #12]	; (8000414 <DigiLed_setAllRGB+0x34>)
 8000408:	2201      	movs	r2, #1
 800040a:	701a      	strb	r2, [r3, #0]
}
 800040c:	bf00      	nop
 800040e:	3710      	adds	r7, #16
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000114 	.word	0x20000114

08000418 <DigiLed_update>:
/**
 * @brief update led string
 * @param set true to force update leds and false to update only when frame is modified
 */
void DigiLed_update(uint8_t forceUpdate)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
	if(_frameModified | forceUpdate)
 8000422:	4b31      	ldr	r3, [pc, #196]	; (80004e8 <DigiLed_update+0xd0>)
 8000424:	781a      	ldrb	r2, [r3, #0]
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	4313      	orrs	r3, r2
 800042a:	b2db      	uxtb	r3, r3
 800042c:	2b00      	cmp	r3, #0
 800042e:	d053      	beq.n	80004d8 <DigiLed_update+0xc0>
	{
		// add start of frame (0x00000000)
		for(int i = 0; i < LED_START_FRAME_SIZE; i++)
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]
 8000434:	e007      	b.n	8000446 <DigiLed_update+0x2e>
		{
			SpiSendFrame[i] = 0x00;
 8000436:	4a2d      	ldr	r2, [pc, #180]	; (80004ec <DigiLed_update+0xd4>)
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	4413      	add	r3, r2
 800043c:	2200      	movs	r2, #0
 800043e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < LED_START_FRAME_SIZE; i++)
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	3301      	adds	r3, #1
 8000444:	617b      	str	r3, [r7, #20]
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	2b03      	cmp	r3, #3
 800044a:	ddf4      	ble.n	8000436 <DigiLed_update+0x1e>
		}

		// add all LED packets of the frame
		uint32_t SpiDataPacket = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	613b      	str	r3, [r7, #16]
		for (uint32_t led = 0; led < LED_FRAME_SIZE; led++)
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	e028      	b.n	80004a8 <DigiLed_update+0x90>
		{
			SpiSendFrame[LED_START_FRAME_SIZE + SpiDataPacket + 0] = _digitalLedframe[led].FieldsOut.CMD;		// Add INIT and GLOBAL to SPI send frame
 8000456:	693b      	ldr	r3, [r7, #16]
 8000458:	1d1a      	adds	r2, r3, #4
 800045a:	4925      	ldr	r1, [pc, #148]	; (80004f0 <DigiLed_update+0xd8>)
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	440b      	add	r3, r1
 8000462:	78d9      	ldrb	r1, [r3, #3]
 8000464:	4b21      	ldr	r3, [pc, #132]	; (80004ec <DigiLed_update+0xd4>)
 8000466:	5499      	strb	r1, [r3, r2]
			SpiSendFrame[LED_START_FRAME_SIZE + SpiDataPacket + 1] = _digitalLedframe[led].FieldsOut.BLUE; 	// Add BLUE to SPI send frame
 8000468:	693b      	ldr	r3, [r7, #16]
 800046a:	1d5a      	adds	r2, r3, #5
 800046c:	4920      	ldr	r1, [pc, #128]	; (80004f0 <DigiLed_update+0xd8>)
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	009b      	lsls	r3, r3, #2
 8000472:	440b      	add	r3, r1
 8000474:	7899      	ldrb	r1, [r3, #2]
 8000476:	4b1d      	ldr	r3, [pc, #116]	; (80004ec <DigiLed_update+0xd4>)
 8000478:	5499      	strb	r1, [r3, r2]
			SpiSendFrame[LED_START_FRAME_SIZE + SpiDataPacket + 2] = _digitalLedframe[led].FieldsOut.GREEN;	// Add GREEN to SPI send frame
 800047a:	693b      	ldr	r3, [r7, #16]
 800047c:	1d9a      	adds	r2, r3, #6
 800047e:	491c      	ldr	r1, [pc, #112]	; (80004f0 <DigiLed_update+0xd8>)
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	440b      	add	r3, r1
 8000486:	7859      	ldrb	r1, [r3, #1]
 8000488:	4b18      	ldr	r3, [pc, #96]	; (80004ec <DigiLed_update+0xd4>)
 800048a:	5499      	strb	r1, [r3, r2]
			SpiSendFrame[LED_START_FRAME_SIZE + SpiDataPacket + 3] = _digitalLedframe[led].FieldsOut.RED;		// Add RED to SPI send frame
 800048c:	693b      	ldr	r3, [r7, #16]
 800048e:	3307      	adds	r3, #7
 8000490:	4917      	ldr	r1, [pc, #92]	; (80004f0 <DigiLed_update+0xd8>)
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	f811 1022 	ldrb.w	r1, [r1, r2, lsl #2]
 8000498:	4a14      	ldr	r2, [pc, #80]	; (80004ec <DigiLed_update+0xd4>)
 800049a:	54d1      	strb	r1, [r2, r3]

			SpiDataPacket = SpiDataPacket + 4;
 800049c:	693b      	ldr	r3, [r7, #16]
 800049e:	3304      	adds	r3, #4
 80004a0:	613b      	str	r3, [r7, #16]
		for (uint32_t led = 0; led < LED_FRAME_SIZE; led++)
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	3301      	adds	r3, #1
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	2b0f      	cmp	r3, #15
 80004ac:	d9d3      	bls.n	8000456 <DigiLed_update+0x3e>
		}

		// add end of frame (0xffffffff)
		for(int i = 0; i < 4; i++)
 80004ae:	2300      	movs	r3, #0
 80004b0:	60bb      	str	r3, [r7, #8]
 80004b2:	e007      	b.n	80004c4 <DigiLed_update+0xac>
		{
			SpiSendFrame[LED_START_FRAME_SIZE + 4*LED_FRAME_SIZE + i] = 0xFF;
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	3344      	adds	r3, #68	; 0x44
 80004b8:	4a0c      	ldr	r2, [pc, #48]	; (80004ec <DigiLed_update+0xd4>)
 80004ba:	21ff      	movs	r1, #255	; 0xff
 80004bc:	54d1      	strb	r1, [r2, r3]
		for(int i = 0; i < 4; i++)
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	3301      	adds	r3, #1
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	2b03      	cmp	r3, #3
 80004c8:	ddf4      	ble.n	80004b4 <DigiLed_update+0x9c>
		}

		// send spi frame with all led values
		HAL_SPI_Transmit(_spiHandler, SpiSendFrame, sizeof(SpiSendFrame), 10);
 80004ca:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <DigiLed_update+0xdc>)
 80004cc:	6818      	ldr	r0, [r3, #0]
 80004ce:	230a      	movs	r3, #10
 80004d0:	2248      	movs	r2, #72	; 0x48
 80004d2:	4906      	ldr	r1, [pc, #24]	; (80004ec <DigiLed_update+0xd4>)
 80004d4:	f001 fb51 	bl	8001b7a <HAL_SPI_Transmit>
	}

	_frameModified = FALSE; // reset frame modified identifier.
 80004d8:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <DigiLed_update+0xd0>)
 80004da:	2200      	movs	r2, #0
 80004dc:	701a      	strb	r2, [r3, #0]

}
 80004de:	bf00      	nop
 80004e0:	3718      	adds	r7, #24
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000114 	.word	0x20000114
 80004ec:	200000cc 	.word	0x200000cc
 80004f0:	2000008c 	.word	0x2000008c
 80004f4:	20000118 	.word	0x20000118

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fa5c 	bl	80009b8 <HAL_Init>

  /* USER CODE BEGIN Init */
  DigiLed_init(&hspi1);
 8000500:	4810      	ldr	r0, [pc, #64]	; (8000544 <main+0x4c>)
 8000502:	f7ff feef 	bl	80002e4 <DigiLed_init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f823 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 f8b7 	bl	800067c <MX_GPIO_Init>
  MX_SPI1_Init();
 800050e:	f000 f87f 	bl	8000610 <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DigiLed_setAllRGB(0xFF0000);
 8000512:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 8000516:	f7ff ff63 	bl	80003e0 <DigiLed_setAllRGB>
	  printf("test");
 800051a:	480b      	ldr	r0, [pc, #44]	; (8000548 <main+0x50>)
 800051c:	f001 fd66 	bl	8001fec <iprintf>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000520:	2120      	movs	r1, #32
 8000522:	480a      	ldr	r0, [pc, #40]	; (800054c <main+0x54>)
 8000524:	f000 fd58 	bl	8000fd8 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000528:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800052c:	f000 fab6 	bl	8000a9c <HAL_Delay>
	  DigiLed_setAllRGB(0x00FF00);
 8000530:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8000534:	f7ff ff54 	bl	80003e0 <DigiLed_setAllRGB>
	  HAL_Delay(500);
 8000538:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800053c:	f000 faae 	bl	8000a9c <HAL_Delay>
  {
 8000540:	bf00      	nop
 8000542:	e7e6      	b.n	8000512 <main+0x1a>
 8000544:	2000011c 	.word	0x2000011c
 8000548:	080031b4 	.word	0x080031b4
 800054c:	40020000 	.word	0x40020000

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 031c 	add.w	r3, r7, #28
 800055a:	2234      	movs	r2, #52	; 0x34
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f001 fd3c 	bl	8001fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 0308 	add.w	r3, r7, #8
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b23      	ldr	r3, [pc, #140]	; (8000608 <SystemClock_Config+0xb8>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a22      	ldr	r2, [pc, #136]	; (8000608 <SystemClock_Config+0xb8>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b20      	ldr	r3, [pc, #128]	; (8000608 <SystemClock_Config+0xb8>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000590:	2300      	movs	r3, #0
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	4b1d      	ldr	r3, [pc, #116]	; (800060c <SystemClock_Config+0xbc>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800059c:	4a1b      	ldr	r2, [pc, #108]	; (800060c <SystemClock_Config+0xbc>)
 800059e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b19      	ldr	r3, [pc, #100]	; (800060c <SystemClock_Config+0xbc>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b0:	2302      	movs	r3, #2
 80005b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	2301      	movs	r3, #1
 80005b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b8:	2310      	movs	r3, #16
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005bc:	2300      	movs	r3, #0
 80005be:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 031c 	add.w	r3, r7, #28
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 ffb1 	bl	800152c <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005d0:	f000 f86e 	bl	80006b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 fd0c 	bl	800100c <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005fa:	f000 f859 	bl	80006b0 <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3750      	adds	r7, #80	; 0x50
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000614:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_SPI1_Init+0x64>)
 8000616:	4a18      	ldr	r2, [pc, #96]	; (8000678 <MX_SPI1_Init+0x68>)
 8000618:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800061a:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MX_SPI1_Init+0x64>)
 800061c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000620:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_SPI1_Init+0x64>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_SPI1_Init+0x64>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_SPI1_Init+0x64>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_SPI1_Init+0x64>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_SPI1_Init+0x64>)
 800063c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000640:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_SPI1_Init+0x64>)
 8000644:	2200      	movs	r2, #0
 8000646:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <MX_SPI1_Init+0x64>)
 800064a:	2200      	movs	r2, #0
 800064c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_SPI1_Init+0x64>)
 8000650:	2200      	movs	r2, #0
 8000652:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <MX_SPI1_Init+0x64>)
 8000656:	2200      	movs	r2, #0
 8000658:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_SPI1_Init+0x64>)
 800065c:	220a      	movs	r2, #10
 800065e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <MX_SPI1_Init+0x64>)
 8000662:	f001 fa01 	bl	8001a68 <HAL_SPI_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800066c:	f000 f820 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	2000011c 	.word	0x2000011c
 8000678:	40013000 	.word	0x40013000

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_GPIO_Init+0x30>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a08      	ldr	r2, [pc, #32]	; (80006ac <MX_GPIO_Init+0x30>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_GPIO_Init+0x30>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <Error_Handler+0x8>

080006bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <HAL_MspInit+0x4c>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ca:	4a0f      	ldr	r2, [pc, #60]	; (8000708 <HAL_MspInit+0x4c>)
 80006cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d0:	6453      	str	r3, [r2, #68]	; 0x44
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <HAL_MspInit+0x4c>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <HAL_MspInit+0x4c>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	4a08      	ldr	r2, [pc, #32]	; (8000708 <HAL_MspInit+0x4c>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ec:	6413      	str	r3, [r2, #64]	; 0x40
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_MspInit+0x4c>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800

0800070c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a19      	ldr	r2, [pc, #100]	; (8000790 <HAL_SPI_MspInit+0x84>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d12b      	bne.n	8000786 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	4b18      	ldr	r3, [pc, #96]	; (8000794 <HAL_SPI_MspInit+0x88>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	4a17      	ldr	r2, [pc, #92]	; (8000794 <HAL_SPI_MspInit+0x88>)
 8000738:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800073c:	6453      	str	r3, [r2, #68]	; 0x44
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <HAL_SPI_MspInit+0x88>)
 8000740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000742:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <HAL_SPI_MspInit+0x88>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a10      	ldr	r2, [pc, #64]	; (8000794 <HAL_SPI_MspInit+0x88>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <HAL_SPI_MspInit+0x88>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000766:	23a0      	movs	r3, #160	; 0xa0
 8000768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000772:	2303      	movs	r3, #3
 8000774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000776:	2305      	movs	r3, #5
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <HAL_SPI_MspInit+0x8c>)
 8000782:	f000 fa95 	bl	8000cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40013000 	.word	0x40013000
 8000794:	40023800 	.word	0x40023800
 8000798:	40020000 	.word	0x40020000

0800079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <NMI_Handler+0x4>

080007a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <HardFault_Handler+0x4>

080007ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <MemManage_Handler+0x4>

080007b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <BusFault_Handler+0x4>

080007bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <UsageFault_Handler+0x4>

080007c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f2:	f000 f933 	bl	8000a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}

080007fa <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b086      	sub	sp, #24
 80007fe:	af00      	add	r7, sp, #0
 8000800:	60f8      	str	r0, [r7, #12]
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	e00a      	b.n	8000822 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800080c:	f3af 8000 	nop.w
 8000810:	4601      	mov	r1, r0
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	1c5a      	adds	r2, r3, #1
 8000816:	60ba      	str	r2, [r7, #8]
 8000818:	b2ca      	uxtb	r2, r1
 800081a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	3301      	adds	r3, #1
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	697a      	ldr	r2, [r7, #20]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	429a      	cmp	r2, r3
 8000828:	dbf0      	blt.n	800080c <_read+0x12>
	}

return len;
 800082a:	687b      	ldr	r3, [r7, #4]
}
 800082c:	4618      	mov	r0, r3
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	e009      	b.n	800085a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	1c5a      	adds	r2, r3, #1
 800084a:	60ba      	str	r2, [r7, #8]
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	4618      	mov	r0, r3
 8000850:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	3301      	adds	r3, #1
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	429a      	cmp	r2, r3
 8000860:	dbf1      	blt.n	8000846 <_write+0x12>
	}
	return len;
 8000862:	687b      	ldr	r3, [r7, #4]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <_close>:

int _close(int file)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	return -1;
 8000874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000878:	4618      	mov	r0, r3
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000894:	605a      	str	r2, [r3, #4]
	return 0;
 8000896:	2300      	movs	r3, #0
}
 8000898:	4618      	mov	r0, r3
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <_isatty>:

int _isatty(int file)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	return 1;
 80008ac:	2301      	movs	r3, #1
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008ba:	b480      	push	{r7}
 80008bc:	b085      	sub	sp, #20
 80008be:	af00      	add	r7, sp, #0
 80008c0:	60f8      	str	r0, [r7, #12]
 80008c2:	60b9      	str	r1, [r7, #8]
 80008c4:	607a      	str	r2, [r7, #4]
	return 0;
 80008c6:	2300      	movs	r3, #0
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008dc:	4a14      	ldr	r2, [pc, #80]	; (8000930 <_sbrk+0x5c>)
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <_sbrk+0x60>)
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <_sbrk+0x64>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d102      	bne.n	80008f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <_sbrk+0x64>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <_sbrk+0x68>)
 80008f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <_sbrk+0x64>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4413      	add	r3, r2
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	429a      	cmp	r2, r3
 8000902:	d207      	bcs.n	8000914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000904:	f001 fb40 	bl	8001f88 <__errno>
 8000908:	4603      	mov	r3, r0
 800090a:	220c      	movs	r2, #12
 800090c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800090e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000912:	e009      	b.n	8000928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <_sbrk+0x64>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800091a:	4b07      	ldr	r3, [pc, #28]	; (8000938 <_sbrk+0x64>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	4a05      	ldr	r2, [pc, #20]	; (8000938 <_sbrk+0x64>)
 8000924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000926:	68fb      	ldr	r3, [r7, #12]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20020000 	.word	0x20020000
 8000934:	00000400 	.word	0x00000400
 8000938:	20000174 	.word	0x20000174
 800093c:	20000190 	.word	0x20000190

08000940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <SystemInit+0x20>)
 8000946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800094a:	4a05      	ldr	r2, [pc, #20]	; (8000960 <SystemInit+0x20>)
 800094c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800099c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800096a:	490e      	ldr	r1, [pc, #56]	; (80009a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800096c:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000970:	e002      	b.n	8000978 <LoopCopyDataInit>

08000972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000976:	3304      	adds	r3, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800097c:	d3f9      	bcc.n	8000972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000980:	4c0b      	ldr	r4, [pc, #44]	; (80009b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000984:	e001      	b.n	800098a <LoopFillZerobss>

08000986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000988:	3204      	adds	r2, #4

0800098a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800098c:	d3fb      	bcc.n	8000986 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800098e:	f7ff ffd7 	bl	8000940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000992:	f001 faff 	bl	8001f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000996:	f7ff fdaf 	bl	80004f8 <main>
  bx  lr    
 800099a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800099c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009a8:	08003274 	.word	0x08003274
  ldr r2, =_sbss
 80009ac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009b0:	2000018c 	.word	0x2000018c

080009b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC_IRQHandler>
	...

080009b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_Init+0x40>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <HAL_Init+0x40>)
 80009c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009c8:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <HAL_Init+0x40>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <HAL_Init+0x40>)
 80009ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_Init+0x40>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_Init+0x40>)
 80009da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f000 f931 	bl	8000c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e6:	200f      	movs	r0, #15
 80009e8:	f000 f808 	bl	80009fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ec:	f7ff fe66 	bl	80006bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023c00 	.word	0x40023c00

080009fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_InitTick+0x54>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_InitTick+0x58>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f93b 	bl	8000c96 <HAL_SYSTICK_Config>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e00e      	b.n	8000a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d80a      	bhi.n	8000a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a30:	2200      	movs	r2, #0
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a38:	f000 f911 	bl	8000c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a3c:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <HAL_InitTick+0x5c>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a42:	2300      	movs	r3, #0
 8000a44:	e000      	b.n	8000a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000008 	.word	0x20000008
 8000a58:	20000004 	.word	0x20000004

08000a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x20>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_IncTick+0x24>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_IncTick+0x24>)
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	20000178 	.word	0x20000178

08000a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <HAL_GetTick+0x14>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000178 	.word	0x20000178

08000a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa4:	f7ff ffee 	bl	8000a84 <HAL_GetTick>
 8000aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ab4:	d005      	beq.n	8000ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <HAL_Delay+0x44>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4413      	add	r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ac2:	bf00      	nop
 8000ac4:	f7ff ffde 	bl	8000a84 <HAL_GetTick>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d8f7      	bhi.n	8000ac4 <HAL_Delay+0x28>
  {
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000008 	.word	0x20000008

08000ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <__NVIC_SetPriorityGrouping+0x44>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b00:	4013      	ands	r3, r2
 8000b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b16:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <__NVIC_SetPriorityGrouping+0x44>)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	60d3      	str	r3, [r2, #12]
}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <__NVIC_GetPriorityGrouping+0x18>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	0a1b      	lsrs	r3, r3, #8
 8000b36:	f003 0307 	and.w	r3, r3, #7
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	db0a      	blt.n	8000b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	490c      	ldr	r1, [pc, #48]	; (8000b94 <__NVIC_SetPriority+0x4c>)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	0112      	lsls	r2, r2, #4
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b70:	e00a      	b.n	8000b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4908      	ldr	r1, [pc, #32]	; (8000b98 <__NVIC_SetPriority+0x50>)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	f003 030f 	and.w	r3, r3, #15
 8000b7e:	3b04      	subs	r3, #4
 8000b80:	0112      	lsls	r2, r2, #4
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	440b      	add	r3, r1
 8000b86:	761a      	strb	r2, [r3, #24]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000e100 	.word	0xe000e100
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b089      	sub	sp, #36	; 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	f1c3 0307 	rsb	r3, r3, #7
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	bf28      	it	cs
 8000bba:	2304      	movcs	r3, #4
 8000bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d902      	bls.n	8000bcc <NVIC_EncodePriority+0x30>
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3b03      	subs	r3, #3
 8000bca:	e000      	b.n	8000bce <NVIC_EncodePriority+0x32>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	401a      	ands	r2, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa01 f303 	lsl.w	r3, r1, r3
 8000bee:	43d9      	mvns	r1, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	4313      	orrs	r3, r2
         );
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3724      	adds	r7, #36	; 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c14:	d301      	bcc.n	8000c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00f      	b.n	8000c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <SysTick_Config+0x40>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c22:	210f      	movs	r1, #15
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c28:	f7ff ff8e 	bl	8000b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <SysTick_Config+0x40>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c32:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <SysTick_Config+0x40>)
 8000c34:	2207      	movs	r2, #7
 8000c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	e000e010 	.word	0xe000e010

08000c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff47 	bl	8000ae4 <__NVIC_SetPriorityGrouping>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c70:	f7ff ff5c 	bl	8000b2c <__NVIC_GetPriorityGrouping>
 8000c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	68b9      	ldr	r1, [r7, #8]
 8000c7a:	6978      	ldr	r0, [r7, #20]
 8000c7c:	f7ff ff8e 	bl	8000b9c <NVIC_EncodePriority>
 8000c80:	4602      	mov	r2, r0
 8000c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff5d 	bl	8000b48 <__NVIC_SetPriority>
}
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ffb0 	bl	8000c04 <SysTick_Config>
 8000ca4:	4603      	mov	r3, r0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	; 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
 8000cca:	e165      	b.n	8000f98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ccc:	2201      	movs	r2, #1
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	f040 8154 	bne.w	8000f92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d005      	beq.n	8000d02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d130      	bne.n	8000d64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4013      	ands	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	68da      	ldr	r2, [r3, #12]
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d38:	2201      	movs	r2, #1
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	091b      	lsrs	r3, r3, #4
 8000d4e:	f003 0201 	and.w	r2, r3, #1
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	d017      	beq.n	8000da0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d123      	bne.n	8000df4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	08da      	lsrs	r2, r3, #3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3208      	adds	r2, #8
 8000db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	f003 0307 	and.w	r3, r3, #7
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	220f      	movs	r2, #15
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	691a      	ldr	r2, [r3, #16]
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	08da      	lsrs	r2, r3, #3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3208      	adds	r2, #8
 8000dee:	69b9      	ldr	r1, [r7, #24]
 8000df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0203 	and.w	r2, r3, #3
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 80ae 	beq.w	8000f92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b5d      	ldr	r3, [pc, #372]	; (8000fb0 <HAL_GPIO_Init+0x300>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	4a5c      	ldr	r2, [pc, #368]	; (8000fb0 <HAL_GPIO_Init+0x300>)
 8000e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e44:	6453      	str	r3, [r2, #68]	; 0x44
 8000e46:	4b5a      	ldr	r3, [pc, #360]	; (8000fb0 <HAL_GPIO_Init+0x300>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e52:	4a58      	ldr	r2, [pc, #352]	; (8000fb4 <HAL_GPIO_Init+0x304>)
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	3302      	adds	r3, #2
 8000e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	220f      	movs	r2, #15
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4013      	ands	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4f      	ldr	r2, [pc, #316]	; (8000fb8 <HAL_GPIO_Init+0x308>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d025      	beq.n	8000eca <HAL_GPIO_Init+0x21a>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4e      	ldr	r2, [pc, #312]	; (8000fbc <HAL_GPIO_Init+0x30c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d01f      	beq.n	8000ec6 <HAL_GPIO_Init+0x216>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4d      	ldr	r2, [pc, #308]	; (8000fc0 <HAL_GPIO_Init+0x310>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d019      	beq.n	8000ec2 <HAL_GPIO_Init+0x212>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4c      	ldr	r2, [pc, #304]	; (8000fc4 <HAL_GPIO_Init+0x314>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d013      	beq.n	8000ebe <HAL_GPIO_Init+0x20e>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4b      	ldr	r2, [pc, #300]	; (8000fc8 <HAL_GPIO_Init+0x318>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d00d      	beq.n	8000eba <HAL_GPIO_Init+0x20a>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4a      	ldr	r2, [pc, #296]	; (8000fcc <HAL_GPIO_Init+0x31c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d007      	beq.n	8000eb6 <HAL_GPIO_Init+0x206>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a49      	ldr	r2, [pc, #292]	; (8000fd0 <HAL_GPIO_Init+0x320>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d101      	bne.n	8000eb2 <HAL_GPIO_Init+0x202>
 8000eae:	2306      	movs	r3, #6
 8000eb0:	e00c      	b.n	8000ecc <HAL_GPIO_Init+0x21c>
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	e00a      	b.n	8000ecc <HAL_GPIO_Init+0x21c>
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	e008      	b.n	8000ecc <HAL_GPIO_Init+0x21c>
 8000eba:	2304      	movs	r3, #4
 8000ebc:	e006      	b.n	8000ecc <HAL_GPIO_Init+0x21c>
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e004      	b.n	8000ecc <HAL_GPIO_Init+0x21c>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e002      	b.n	8000ecc <HAL_GPIO_Init+0x21c>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <HAL_GPIO_Init+0x21c>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	69fa      	ldr	r2, [r7, #28]
 8000ece:	f002 0203 	and.w	r2, r2, #3
 8000ed2:	0092      	lsls	r2, r2, #2
 8000ed4:	4093      	lsls	r3, r2
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000edc:	4935      	ldr	r1, [pc, #212]	; (8000fb4 <HAL_GPIO_Init+0x304>)
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eea:	4b3a      	ldr	r3, [pc, #232]	; (8000fd4 <HAL_GPIO_Init+0x324>)
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f0e:	4a31      	ldr	r2, [pc, #196]	; (8000fd4 <HAL_GPIO_Init+0x324>)
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f14:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <HAL_GPIO_Init+0x324>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f38:	4a26      	ldr	r2, [pc, #152]	; (8000fd4 <HAL_GPIO_Init+0x324>)
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f3e:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <HAL_GPIO_Init+0x324>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f62:	4a1c      	ldr	r2, [pc, #112]	; (8000fd4 <HAL_GPIO_Init+0x324>)
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <HAL_GPIO_Init+0x324>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f8c:	4a11      	ldr	r2, [pc, #68]	; (8000fd4 <HAL_GPIO_Init+0x324>)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3301      	adds	r3, #1
 8000f96:	61fb      	str	r3, [r7, #28]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	2b0f      	cmp	r3, #15
 8000f9c:	f67f ae96 	bls.w	8000ccc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3724      	adds	r7, #36	; 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40013800 	.word	0x40013800
 8000fb8:	40020000 	.word	0x40020000
 8000fbc:	40020400 	.word	0x40020400
 8000fc0:	40020800 	.word	0x40020800
 8000fc4:	40020c00 	.word	0x40020c00
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40021400 	.word	0x40021400
 8000fd0:	40021800 	.word	0x40021800
 8000fd4:	40013c00 	.word	0x40013c00

08000fd8 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fea:	887a      	ldrh	r2, [r7, #2]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	041a      	lsls	r2, r3, #16
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	43d9      	mvns	r1, r3
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	400b      	ands	r3, r1
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	619a      	str	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e0cc      	b.n	80011ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001020:	4b68      	ldr	r3, [pc, #416]	; (80011c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 030f 	and.w	r3, r3, #15
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	d90c      	bls.n	8001048 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800102e:	4b65      	ldr	r3, [pc, #404]	; (80011c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001036:	4b63      	ldr	r3, [pc, #396]	; (80011c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	683a      	ldr	r2, [r7, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d001      	beq.n	8001048 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e0b8      	b.n	80011ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d020      	beq.n	8001096 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001060:	4b59      	ldr	r3, [pc, #356]	; (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	4a58      	ldr	r2, [pc, #352]	; (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001066:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800106a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0308 	and.w	r3, r3, #8
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001078:	4b53      	ldr	r3, [pc, #332]	; (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	4a52      	ldr	r2, [pc, #328]	; (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 800107e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001082:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001084:	4b50      	ldr	r3, [pc, #320]	; (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	494d      	ldr	r1, [pc, #308]	; (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001092:	4313      	orrs	r3, r2
 8001094:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d044      	beq.n	800112c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d107      	bne.n	80010ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010aa:	4b47      	ldr	r3, [pc, #284]	; (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d119      	bne.n	80010ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e07f      	b.n	80011ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d003      	beq.n	80010ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d107      	bne.n	80010da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ca:	4b3f      	ldr	r3, [pc, #252]	; (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d109      	bne.n	80010ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e06f      	b.n	80011ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010da:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e067      	b.n	80011ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010ea:	4b37      	ldr	r3, [pc, #220]	; (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f023 0203 	bic.w	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	4934      	ldr	r1, [pc, #208]	; (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 80010f8:	4313      	orrs	r3, r2
 80010fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010fc:	f7ff fcc2 	bl	8000a84 <HAL_GetTick>
 8001100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001102:	e00a      	b.n	800111a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001104:	f7ff fcbe 	bl	8000a84 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001112:	4293      	cmp	r3, r2
 8001114:	d901      	bls.n	800111a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e04f      	b.n	80011ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800111a:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 020c 	and.w	r2, r3, #12
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	429a      	cmp	r2, r3
 800112a:	d1eb      	bne.n	8001104 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800112c:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <HAL_RCC_ClockConfig+0x1b8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 030f 	and.w	r3, r3, #15
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	d20c      	bcs.n	8001154 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800113a:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <HAL_RCC_ClockConfig+0x1b8>)
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	429a      	cmp	r2, r3
 800114e:	d001      	beq.n	8001154 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e032      	b.n	80011ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	2b00      	cmp	r3, #0
 800115e:	d008      	beq.n	8001172 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	4916      	ldr	r1, [pc, #88]	; (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 800116e:	4313      	orrs	r3, r2
 8001170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	2b00      	cmp	r3, #0
 800117c:	d009      	beq.n	8001192 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	490e      	ldr	r1, [pc, #56]	; (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 800118e:	4313      	orrs	r3, r2
 8001190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001192:	f000 f821 	bl	80011d8 <HAL_RCC_GetSysClockFreq>
 8001196:	4602      	mov	r2, r0
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	091b      	lsrs	r3, r3, #4
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	490a      	ldr	r1, [pc, #40]	; (80011cc <HAL_RCC_ClockConfig+0x1c0>)
 80011a4:	5ccb      	ldrb	r3, [r1, r3]
 80011a6:	fa22 f303 	lsr.w	r3, r2, r3
 80011aa:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <HAL_RCC_ClockConfig+0x1c4>)
 80011ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <HAL_RCC_ClockConfig+0x1c8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fc22 	bl	80009fc <HAL_InitTick>

  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023c00 	.word	0x40023c00
 80011c8:	40023800 	.word	0x40023800
 80011cc:	080031bc 	.word	0x080031bc
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000004 	.word	0x20000004

080011d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011dc:	b0a6      	sub	sp, #152	; 0x98
 80011de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011fe:	4bc8      	ldr	r3, [pc, #800]	; (8001520 <HAL_RCC_GetSysClockFreq+0x348>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	2b0c      	cmp	r3, #12
 8001208:	f200 817e 	bhi.w	8001508 <HAL_RCC_GetSysClockFreq+0x330>
 800120c:	a201      	add	r2, pc, #4	; (adr r2, 8001214 <HAL_RCC_GetSysClockFreq+0x3c>)
 800120e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001212:	bf00      	nop
 8001214:	08001249 	.word	0x08001249
 8001218:	08001509 	.word	0x08001509
 800121c:	08001509 	.word	0x08001509
 8001220:	08001509 	.word	0x08001509
 8001224:	08001251 	.word	0x08001251
 8001228:	08001509 	.word	0x08001509
 800122c:	08001509 	.word	0x08001509
 8001230:	08001509 	.word	0x08001509
 8001234:	08001259 	.word	0x08001259
 8001238:	08001509 	.word	0x08001509
 800123c:	08001509 	.word	0x08001509
 8001240:	08001509 	.word	0x08001509
 8001244:	080013c3 	.word	0x080013c3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001248:	4bb6      	ldr	r3, [pc, #728]	; (8001524 <HAL_RCC_GetSysClockFreq+0x34c>)
 800124a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800124e:	e15f      	b.n	8001510 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001250:	4bb5      	ldr	r3, [pc, #724]	; (8001528 <HAL_RCC_GetSysClockFreq+0x350>)
 8001252:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001256:	e15b      	b.n	8001510 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001258:	4bb1      	ldr	r3, [pc, #708]	; (8001520 <HAL_RCC_GetSysClockFreq+0x348>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001260:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001264:	4bae      	ldr	r3, [pc, #696]	; (8001520 <HAL_RCC_GetSysClockFreq+0x348>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d031      	beq.n	80012d4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001270:	4bab      	ldr	r3, [pc, #684]	; (8001520 <HAL_RCC_GetSysClockFreq+0x348>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	099b      	lsrs	r3, r3, #6
 8001276:	2200      	movs	r2, #0
 8001278:	66bb      	str	r3, [r7, #104]	; 0x68
 800127a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800127c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800127e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001282:	663b      	str	r3, [r7, #96]	; 0x60
 8001284:	2300      	movs	r3, #0
 8001286:	667b      	str	r3, [r7, #100]	; 0x64
 8001288:	4ba7      	ldr	r3, [pc, #668]	; (8001528 <HAL_RCC_GetSysClockFreq+0x350>)
 800128a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800128e:	462a      	mov	r2, r5
 8001290:	fb03 f202 	mul.w	r2, r3, r2
 8001294:	2300      	movs	r3, #0
 8001296:	4621      	mov	r1, r4
 8001298:	fb01 f303 	mul.w	r3, r1, r3
 800129c:	4413      	add	r3, r2
 800129e:	4aa2      	ldr	r2, [pc, #648]	; (8001528 <HAL_RCC_GetSysClockFreq+0x350>)
 80012a0:	4621      	mov	r1, r4
 80012a2:	fba1 1202 	umull	r1, r2, r1, r2
 80012a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80012a8:	460a      	mov	r2, r1
 80012aa:	67ba      	str	r2, [r7, #120]	; 0x78
 80012ac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80012ae:	4413      	add	r3, r2
 80012b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80012b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012b6:	2200      	movs	r2, #0
 80012b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80012ba:	65fa      	str	r2, [r7, #92]	; 0x5c
 80012bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80012c0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80012c4:	f7fe ffd4 	bl	8000270 <__aeabi_uldivmod>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4613      	mov	r3, r2
 80012ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80012d2:	e064      	b.n	800139e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012d4:	4b92      	ldr	r3, [pc, #584]	; (8001520 <HAL_RCC_GetSysClockFreq+0x348>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	099b      	lsrs	r3, r3, #6
 80012da:	2200      	movs	r2, #0
 80012dc:	653b      	str	r3, [r7, #80]	; 0x50
 80012de:	657a      	str	r2, [r7, #84]	; 0x54
 80012e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80012e8:	2300      	movs	r3, #0
 80012ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012ec:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80012f0:	4622      	mov	r2, r4
 80012f2:	462b      	mov	r3, r5
 80012f4:	f04f 0000 	mov.w	r0, #0
 80012f8:	f04f 0100 	mov.w	r1, #0
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001302:	0150      	lsls	r0, r2, #5
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4621      	mov	r1, r4
 800130a:	1a51      	subs	r1, r2, r1
 800130c:	6139      	str	r1, [r7, #16]
 800130e:	4629      	mov	r1, r5
 8001310:	eb63 0301 	sbc.w	r3, r3, r1
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001322:	4659      	mov	r1, fp
 8001324:	018b      	lsls	r3, r1, #6
 8001326:	4651      	mov	r1, sl
 8001328:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800132c:	4651      	mov	r1, sl
 800132e:	018a      	lsls	r2, r1, #6
 8001330:	4651      	mov	r1, sl
 8001332:	ebb2 0801 	subs.w	r8, r2, r1
 8001336:	4659      	mov	r1, fp
 8001338:	eb63 0901 	sbc.w	r9, r3, r1
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001348:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800134c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001350:	4690      	mov	r8, r2
 8001352:	4699      	mov	r9, r3
 8001354:	4623      	mov	r3, r4
 8001356:	eb18 0303 	adds.w	r3, r8, r3
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	462b      	mov	r3, r5
 800135e:	eb49 0303 	adc.w	r3, r9, r3
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	f04f 0300 	mov.w	r3, #0
 800136c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001370:	4629      	mov	r1, r5
 8001372:	028b      	lsls	r3, r1, #10
 8001374:	4621      	mov	r1, r4
 8001376:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800137a:	4621      	mov	r1, r4
 800137c:	028a      	lsls	r2, r1, #10
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001386:	2200      	movs	r2, #0
 8001388:	643b      	str	r3, [r7, #64]	; 0x40
 800138a:	647a      	str	r2, [r7, #68]	; 0x44
 800138c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001390:	f7fe ff6e 	bl	8000270 <__aeabi_uldivmod>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4613      	mov	r3, r2
 800139a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800139e:	4b60      	ldr	r3, [pc, #384]	; (8001520 <HAL_RCC_GetSysClockFreq+0x348>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	0c1b      	lsrs	r3, r3, #16
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	3301      	adds	r3, #1
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80013b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80013b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80013c0:	e0a6      	b.n	8001510 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013c2:	4b57      	ldr	r3, [pc, #348]	; (8001520 <HAL_RCC_GetSysClockFreq+0x348>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013ce:	4b54      	ldr	r3, [pc, #336]	; (8001520 <HAL_RCC_GetSysClockFreq+0x348>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d02a      	beq.n	8001430 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013da:	4b51      	ldr	r3, [pc, #324]	; (8001520 <HAL_RCC_GetSysClockFreq+0x348>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	099b      	lsrs	r3, r3, #6
 80013e0:	2200      	movs	r2, #0
 80013e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80013e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80013e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80013ec:	2100      	movs	r1, #0
 80013ee:	4b4e      	ldr	r3, [pc, #312]	; (8001528 <HAL_RCC_GetSysClockFreq+0x350>)
 80013f0:	fb03 f201 	mul.w	r2, r3, r1
 80013f4:	2300      	movs	r3, #0
 80013f6:	fb00 f303 	mul.w	r3, r0, r3
 80013fa:	4413      	add	r3, r2
 80013fc:	4a4a      	ldr	r2, [pc, #296]	; (8001528 <HAL_RCC_GetSysClockFreq+0x350>)
 80013fe:	fba0 1202 	umull	r1, r2, r0, r2
 8001402:	677a      	str	r2, [r7, #116]	; 0x74
 8001404:	460a      	mov	r2, r1
 8001406:	673a      	str	r2, [r7, #112]	; 0x70
 8001408:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800140a:	4413      	add	r3, r2
 800140c:	677b      	str	r3, [r7, #116]	; 0x74
 800140e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001412:	2200      	movs	r2, #0
 8001414:	633b      	str	r3, [r7, #48]	; 0x30
 8001416:	637a      	str	r2, [r7, #52]	; 0x34
 8001418:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800141c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001420:	f7fe ff26 	bl	8000270 <__aeabi_uldivmod>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4613      	mov	r3, r2
 800142a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800142e:	e05b      	b.n	80014e8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001430:	4b3b      	ldr	r3, [pc, #236]	; (8001520 <HAL_RCC_GetSysClockFreq+0x348>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	099b      	lsrs	r3, r3, #6
 8001436:	2200      	movs	r2, #0
 8001438:	62bb      	str	r3, [r7, #40]	; 0x28
 800143a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800143c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001442:	623b      	str	r3, [r7, #32]
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
 8001448:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800144c:	4642      	mov	r2, r8
 800144e:	464b      	mov	r3, r9
 8001450:	f04f 0000 	mov.w	r0, #0
 8001454:	f04f 0100 	mov.w	r1, #0
 8001458:	0159      	lsls	r1, r3, #5
 800145a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800145e:	0150      	lsls	r0, r2, #5
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4641      	mov	r1, r8
 8001466:	ebb2 0a01 	subs.w	sl, r2, r1
 800146a:	4649      	mov	r1, r9
 800146c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800147c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001480:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001484:	ebb2 040a 	subs.w	r4, r2, sl
 8001488:	eb63 050b 	sbc.w	r5, r3, fp
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	00eb      	lsls	r3, r5, #3
 8001496:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800149a:	00e2      	lsls	r2, r4, #3
 800149c:	4614      	mov	r4, r2
 800149e:	461d      	mov	r5, r3
 80014a0:	4643      	mov	r3, r8
 80014a2:	18e3      	adds	r3, r4, r3
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	464b      	mov	r3, r9
 80014a8:	eb45 0303 	adc.w	r3, r5, r3
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	f04f 0300 	mov.w	r3, #0
 80014b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014ba:	4629      	mov	r1, r5
 80014bc:	028b      	lsls	r3, r1, #10
 80014be:	4621      	mov	r1, r4
 80014c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014c4:	4621      	mov	r1, r4
 80014c6:	028a      	lsls	r2, r1, #10
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80014d0:	2200      	movs	r2, #0
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	61fa      	str	r2, [r7, #28]
 80014d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014da:	f7fe fec9 	bl	8000270 <__aeabi_uldivmod>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4613      	mov	r3, r2
 80014e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80014e8:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <HAL_RCC_GetSysClockFreq+0x348>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	0f1b      	lsrs	r3, r3, #28
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80014f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80014fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001506:	e003      	b.n	8001510 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_RCC_GetSysClockFreq+0x34c>)
 800150a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800150e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001510:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001514:	4618      	mov	r0, r3
 8001516:	3798      	adds	r7, #152	; 0x98
 8001518:	46bd      	mov	sp, r7
 800151a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800
 8001524:	00f42400 	.word	0x00f42400
 8001528:	017d7840 	.word	0x017d7840

0800152c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e28d      	b.n	8001a5a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 8083 	beq.w	8001652 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800154c:	4b94      	ldr	r3, [pc, #592]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 030c 	and.w	r3, r3, #12
 8001554:	2b04      	cmp	r3, #4
 8001556:	d019      	beq.n	800158c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001558:	4b91      	ldr	r3, [pc, #580]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001560:	2b08      	cmp	r3, #8
 8001562:	d106      	bne.n	8001572 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001564:	4b8e      	ldr	r3, [pc, #568]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001570:	d00c      	beq.n	800158c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001572:	4b8b      	ldr	r3, [pc, #556]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800157a:	2b0c      	cmp	r3, #12
 800157c:	d112      	bne.n	80015a4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800157e:	4b88      	ldr	r3, [pc, #544]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800158a:	d10b      	bne.n	80015a4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158c:	4b84      	ldr	r3, [pc, #528]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d05b      	beq.n	8001650 <HAL_RCC_OscConfig+0x124>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d157      	bne.n	8001650 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e25a      	b.n	8001a5a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ac:	d106      	bne.n	80015bc <HAL_RCC_OscConfig+0x90>
 80015ae:	4b7c      	ldr	r3, [pc, #496]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a7b      	ldr	r2, [pc, #492]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 80015b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	e01d      	b.n	80015f8 <HAL_RCC_OscConfig+0xcc>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015c4:	d10c      	bne.n	80015e0 <HAL_RCC_OscConfig+0xb4>
 80015c6:	4b76      	ldr	r3, [pc, #472]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a75      	ldr	r2, [pc, #468]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 80015cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	4b73      	ldr	r3, [pc, #460]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a72      	ldr	r2, [pc, #456]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 80015d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	e00b      	b.n	80015f8 <HAL_RCC_OscConfig+0xcc>
 80015e0:	4b6f      	ldr	r3, [pc, #444]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a6e      	ldr	r2, [pc, #440]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 80015e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b6c      	ldr	r3, [pc, #432]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a6b      	ldr	r2, [pc, #428]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 80015f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d013      	beq.n	8001628 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001600:	f7ff fa40 	bl	8000a84 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001608:	f7ff fa3c 	bl	8000a84 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	; 0x64
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e21f      	b.n	8001a5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161a:	4b61      	ldr	r3, [pc, #388]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0xdc>
 8001626:	e014      	b.n	8001652 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7ff fa2c 	bl	8000a84 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001630:	f7ff fa28 	bl	8000a84 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b64      	cmp	r3, #100	; 0x64
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e20b      	b.n	8001a5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001642:	4b57      	ldr	r3, [pc, #348]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x104>
 800164e:	e000      	b.n	8001652 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d06f      	beq.n	800173e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800165e:	4b50      	ldr	r3, [pc, #320]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b00      	cmp	r3, #0
 8001668:	d017      	beq.n	800169a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800166a:	4b4d      	ldr	r3, [pc, #308]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001672:	2b08      	cmp	r3, #8
 8001674:	d105      	bne.n	8001682 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001676:	4b4a      	ldr	r3, [pc, #296]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00b      	beq.n	800169a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001682:	4b47      	ldr	r3, [pc, #284]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800168a:	2b0c      	cmp	r3, #12
 800168c:	d11c      	bne.n	80016c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800168e:	4b44      	ldr	r3, [pc, #272]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d116      	bne.n	80016c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169a:	4b41      	ldr	r3, [pc, #260]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d005      	beq.n	80016b2 <HAL_RCC_OscConfig+0x186>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d001      	beq.n	80016b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e1d3      	b.n	8001a5a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b2:	4b3b      	ldr	r3, [pc, #236]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	4937      	ldr	r1, [pc, #220]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c6:	e03a      	b.n	800173e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d020      	beq.n	8001712 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d0:	4b34      	ldr	r3, [pc, #208]	; (80017a4 <HAL_RCC_OscConfig+0x278>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d6:	f7ff f9d5 	bl	8000a84 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016de:	f7ff f9d1 	bl	8000a84 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e1b4      	b.n	8001a5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f0:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fc:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4925      	ldr	r1, [pc, #148]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 800170c:	4313      	orrs	r3, r2
 800170e:	600b      	str	r3, [r1, #0]
 8001710:	e015      	b.n	800173e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <HAL_RCC_OscConfig+0x278>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001718:	f7ff f9b4 	bl	8000a84 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001720:	f7ff f9b0 	bl	8000a84 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e193      	b.n	8001a5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001732:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d036      	beq.n	80017b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d016      	beq.n	8001780 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <HAL_RCC_OscConfig+0x27c>)
 8001754:	2201      	movs	r2, #1
 8001756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001758:	f7ff f994 	bl	8000a84 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001760:	f7ff f990 	bl	8000a84 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e173      	b.n	8001a5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 8001774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f0      	beq.n	8001760 <HAL_RCC_OscConfig+0x234>
 800177e:	e01b      	b.n	80017b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_RCC_OscConfig+0x27c>)
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001786:	f7ff f97d 	bl	8000a84 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800178c:	e00e      	b.n	80017ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800178e:	f7ff f979 	bl	8000a84 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d907      	bls.n	80017ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e15c      	b.n	8001a5a <HAL_RCC_OscConfig+0x52e>
 80017a0:	40023800 	.word	0x40023800
 80017a4:	42470000 	.word	0x42470000
 80017a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ac:	4b8a      	ldr	r3, [pc, #552]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 80017ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1ea      	bne.n	800178e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 8097 	beq.w	80018f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017c6:	2300      	movs	r3, #0
 80017c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ca:	4b83      	ldr	r3, [pc, #524]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10f      	bne.n	80017f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	4b7f      	ldr	r3, [pc, #508]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	4a7e      	ldr	r2, [pc, #504]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 80017e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e4:	6413      	str	r3, [r2, #64]	; 0x40
 80017e6:	4b7c      	ldr	r3, [pc, #496]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017f2:	2301      	movs	r3, #1
 80017f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f6:	4b79      	ldr	r3, [pc, #484]	; (80019dc <HAL_RCC_OscConfig+0x4b0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d118      	bne.n	8001834 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001802:	4b76      	ldr	r3, [pc, #472]	; (80019dc <HAL_RCC_OscConfig+0x4b0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a75      	ldr	r2, [pc, #468]	; (80019dc <HAL_RCC_OscConfig+0x4b0>)
 8001808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800180e:	f7ff f939 	bl	8000a84 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001816:	f7ff f935 	bl	8000a84 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e118      	b.n	8001a5a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001828:	4b6c      	ldr	r3, [pc, #432]	; (80019dc <HAL_RCC_OscConfig+0x4b0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d106      	bne.n	800184a <HAL_RCC_OscConfig+0x31e>
 800183c:	4b66      	ldr	r3, [pc, #408]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 800183e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001840:	4a65      	ldr	r2, [pc, #404]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6713      	str	r3, [r2, #112]	; 0x70
 8001848:	e01c      	b.n	8001884 <HAL_RCC_OscConfig+0x358>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b05      	cmp	r3, #5
 8001850:	d10c      	bne.n	800186c <HAL_RCC_OscConfig+0x340>
 8001852:	4b61      	ldr	r3, [pc, #388]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 8001854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001856:	4a60      	ldr	r2, [pc, #384]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 8001858:	f043 0304 	orr.w	r3, r3, #4
 800185c:	6713      	str	r3, [r2, #112]	; 0x70
 800185e:	4b5e      	ldr	r3, [pc, #376]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 8001860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001862:	4a5d      	ldr	r2, [pc, #372]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6713      	str	r3, [r2, #112]	; 0x70
 800186a:	e00b      	b.n	8001884 <HAL_RCC_OscConfig+0x358>
 800186c:	4b5a      	ldr	r3, [pc, #360]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 800186e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001870:	4a59      	ldr	r2, [pc, #356]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 8001872:	f023 0301 	bic.w	r3, r3, #1
 8001876:	6713      	str	r3, [r2, #112]	; 0x70
 8001878:	4b57      	ldr	r3, [pc, #348]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 800187a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187c:	4a56      	ldr	r2, [pc, #344]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 800187e:	f023 0304 	bic.w	r3, r3, #4
 8001882:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d015      	beq.n	80018b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188c:	f7ff f8fa 	bl	8000a84 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001892:	e00a      	b.n	80018aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001894:	f7ff f8f6 	bl	8000a84 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e0d7      	b.n	8001a5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018aa:	4b4b      	ldr	r3, [pc, #300]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 80018ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0ee      	beq.n	8001894 <HAL_RCC_OscConfig+0x368>
 80018b6:	e014      	b.n	80018e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b8:	f7ff f8e4 	bl	8000a84 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018be:	e00a      	b.n	80018d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c0:	f7ff f8e0 	bl	8000a84 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e0c1      	b.n	8001a5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d6:	4b40      	ldr	r3, [pc, #256]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 80018d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1ee      	bne.n	80018c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018e2:	7dfb      	ldrb	r3, [r7, #23]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d105      	bne.n	80018f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e8:	4b3b      	ldr	r3, [pc, #236]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	4a3a      	ldr	r2, [pc, #232]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 80018ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 80ad 	beq.w	8001a58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018fe:	4b36      	ldr	r3, [pc, #216]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 030c 	and.w	r3, r3, #12
 8001906:	2b08      	cmp	r3, #8
 8001908:	d060      	beq.n	80019cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d145      	bne.n	800199e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001912:	4b33      	ldr	r3, [pc, #204]	; (80019e0 <HAL_RCC_OscConfig+0x4b4>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7ff f8b4 	bl	8000a84 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001920:	f7ff f8b0 	bl	8000a84 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e093      	b.n	8001a5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001932:	4b29      	ldr	r3, [pc, #164]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69da      	ldr	r2, [r3, #28]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	019b      	lsls	r3, r3, #6
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001954:	085b      	lsrs	r3, r3, #1
 8001956:	3b01      	subs	r3, #1
 8001958:	041b      	lsls	r3, r3, #16
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001960:	061b      	lsls	r3, r3, #24
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	071b      	lsls	r3, r3, #28
 800196a:	491b      	ldr	r1, [pc, #108]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 800196c:	4313      	orrs	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001970:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <HAL_RCC_OscConfig+0x4b4>)
 8001972:	2201      	movs	r2, #1
 8001974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001976:	f7ff f885 	bl	8000a84 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197e:	f7ff f881 	bl	8000a84 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e064      	b.n	8001a5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0f0      	beq.n	800197e <HAL_RCC_OscConfig+0x452>
 800199c:	e05c      	b.n	8001a58 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <HAL_RCC_OscConfig+0x4b4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a4:	f7ff f86e 	bl	8000a84 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ac:	f7ff f86a 	bl	8000a84 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e04d      	b.n	8001a5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_RCC_OscConfig+0x4ac>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x480>
 80019ca:	e045      	b.n	8001a58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d107      	bne.n	80019e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e040      	b.n	8001a5a <HAL_RCC_OscConfig+0x52e>
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40007000 	.word	0x40007000
 80019e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019e4:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <HAL_RCC_OscConfig+0x538>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d030      	beq.n	8001a54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d129      	bne.n	8001a54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d122      	bne.n	8001a54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a14:	4013      	ands	r3, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d119      	bne.n	8001a54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	085b      	lsrs	r3, r3, #1
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d10f      	bne.n	8001a54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d107      	bne.n	8001a54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800

08001a68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e07b      	b.n	8001b72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d108      	bne.n	8001a94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a8a:	d009      	beq.n	8001aa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
 8001a92:	e005      	b.n	8001aa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d106      	bne.n	8001ac0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7fe fe26 	bl	800070c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ad6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	431a      	orrs	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b10:	431a      	orrs	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b24:	ea42 0103 	orr.w	r1, r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	0c1b      	lsrs	r3, r3, #16
 8001b3e:	f003 0104 	and.w	r1, r3, #4
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	f003 0210 	and.w	r2, r3, #16
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	69da      	ldr	r2, [r3, #28]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b088      	sub	sp, #32
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	603b      	str	r3, [r7, #0]
 8001b86:	4613      	mov	r3, r2
 8001b88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_SPI_Transmit+0x22>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e126      	b.n	8001dea <HAL_SPI_Transmit+0x270>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ba4:	f7fe ff6e 	bl	8000a84 <HAL_GetTick>
 8001ba8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d002      	beq.n	8001bc0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001bbe:	e10b      	b.n	8001dd8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <HAL_SPI_Transmit+0x52>
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001bd0:	e102      	b.n	8001dd8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	88fa      	ldrh	r2, [r7, #6]
 8001bea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	88fa      	ldrh	r2, [r7, #6]
 8001bf0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c18:	d10f      	bne.n	8001c3a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c44:	2b40      	cmp	r3, #64	; 0x40
 8001c46:	d007      	beq.n	8001c58 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c60:	d14b      	bne.n	8001cfa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <HAL_SPI_Transmit+0xf6>
 8001c6a:	8afb      	ldrh	r3, [r7, #22]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d13e      	bne.n	8001cee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c74:	881a      	ldrh	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	1c9a      	adds	r2, r3, #2
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c94:	e02b      	b.n	8001cee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d112      	bne.n	8001cca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	881a      	ldrh	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	1c9a      	adds	r2, r3, #2
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	86da      	strh	r2, [r3, #54]	; 0x36
 8001cc8:	e011      	b.n	8001cee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cca:	f7fe fedb 	bl	8000a84 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d803      	bhi.n	8001ce2 <HAL_SPI_Transmit+0x168>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ce0:	d102      	bne.n	8001ce8 <HAL_SPI_Transmit+0x16e>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001cec:	e074      	b.n	8001dd8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1ce      	bne.n	8001c96 <HAL_SPI_Transmit+0x11c>
 8001cf8:	e04c      	b.n	8001d94 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <HAL_SPI_Transmit+0x18e>
 8001d02:	8afb      	ldrh	r3, [r7, #22]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d140      	bne.n	8001d8a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	330c      	adds	r3, #12
 8001d12:	7812      	ldrb	r2, [r2, #0]
 8001d14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	3b01      	subs	r3, #1
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001d2e:	e02c      	b.n	8001d8a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d113      	bne.n	8001d66 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	330c      	adds	r3, #12
 8001d48:	7812      	ldrb	r2, [r2, #0]
 8001d4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	86da      	strh	r2, [r3, #54]	; 0x36
 8001d64:	e011      	b.n	8001d8a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d66:	f7fe fe8d 	bl	8000a84 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d803      	bhi.n	8001d7e <HAL_SPI_Transmit+0x204>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d7c:	d102      	bne.n	8001d84 <HAL_SPI_Transmit+0x20a>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d102      	bne.n	8001d8a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d88:	e026      	b.n	8001dd8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1cd      	bne.n	8001d30 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	6839      	ldr	r1, [r7, #0]
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f000 f8b3 	bl	8001f04 <SPI_EndRxTxTransaction>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2220      	movs	r2, #32
 8001da8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10a      	bne.n	8001dc8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	77fb      	strb	r3, [r7, #31]
 8001dd4:	e000      	b.n	8001dd8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001dd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001de8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3720      	adds	r7, #32
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	4613      	mov	r3, r2
 8001e02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e04:	f7fe fe3e 	bl	8000a84 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	4413      	add	r3, r2
 8001e12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e14:	f7fe fe36 	bl	8000a84 <HAL_GetTick>
 8001e18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e1a:	4b39      	ldr	r3, [pc, #228]	; (8001f00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	015b      	lsls	r3, r3, #5
 8001e20:	0d1b      	lsrs	r3, r3, #20
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	fb02 f303 	mul.w	r3, r2, r3
 8001e28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e2a:	e054      	b.n	8001ed6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e32:	d050      	beq.n	8001ed6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e34:	f7fe fe26 	bl	8000a84 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d902      	bls.n	8001e4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d13d      	bne.n	8001ec6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e62:	d111      	bne.n	8001e88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e6c:	d004      	beq.n	8001e78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e76:	d107      	bne.n	8001e88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e90:	d10f      	bne.n	8001eb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001eb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e017      	b.n	8001ef6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	bf0c      	ite	eq
 8001ee6:	2301      	moveq	r3, #1
 8001ee8:	2300      	movne	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d19b      	bne.n	8001e2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3720      	adds	r7, #32
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000000 	.word	0x20000000

08001f04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001f10:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <SPI_EndRxTxTransaction+0x7c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a1b      	ldr	r2, [pc, #108]	; (8001f84 <SPI_EndRxTxTransaction+0x80>)
 8001f16:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1a:	0d5b      	lsrs	r3, r3, #21
 8001f1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f20:	fb02 f303 	mul.w	r3, r2, r3
 8001f24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f2e:	d112      	bne.n	8001f56 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2200      	movs	r2, #0
 8001f38:	2180      	movs	r1, #128	; 0x80
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f7ff ff5a 	bl	8001df4 <SPI_WaitFlagStateUntilTimeout>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d016      	beq.n	8001f74 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4a:	f043 0220 	orr.w	r2, r3, #32
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e00f      	b.n	8001f76 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00a      	beq.n	8001f72 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6c:	2b80      	cmp	r3, #128	; 0x80
 8001f6e:	d0f2      	beq.n	8001f56 <SPI_EndRxTxTransaction+0x52>
 8001f70:	e000      	b.n	8001f74 <SPI_EndRxTxTransaction+0x70>
        break;
 8001f72:	bf00      	nop
  }

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000000 	.word	0x20000000
 8001f84:	165e9f81 	.word	0x165e9f81

08001f88 <__errno>:
 8001f88:	4b01      	ldr	r3, [pc, #4]	; (8001f90 <__errno+0x8>)
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	2000000c 	.word	0x2000000c

08001f94 <__libc_init_array>:
 8001f94:	b570      	push	{r4, r5, r6, lr}
 8001f96:	4d0d      	ldr	r5, [pc, #52]	; (8001fcc <__libc_init_array+0x38>)
 8001f98:	4c0d      	ldr	r4, [pc, #52]	; (8001fd0 <__libc_init_array+0x3c>)
 8001f9a:	1b64      	subs	r4, r4, r5
 8001f9c:	10a4      	asrs	r4, r4, #2
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	42a6      	cmp	r6, r4
 8001fa2:	d109      	bne.n	8001fb8 <__libc_init_array+0x24>
 8001fa4:	4d0b      	ldr	r5, [pc, #44]	; (8001fd4 <__libc_init_array+0x40>)
 8001fa6:	4c0c      	ldr	r4, [pc, #48]	; (8001fd8 <__libc_init_array+0x44>)
 8001fa8:	f001 f8f8 	bl	800319c <_init>
 8001fac:	1b64      	subs	r4, r4, r5
 8001fae:	10a4      	asrs	r4, r4, #2
 8001fb0:	2600      	movs	r6, #0
 8001fb2:	42a6      	cmp	r6, r4
 8001fb4:	d105      	bne.n	8001fc2 <__libc_init_array+0x2e>
 8001fb6:	bd70      	pop	{r4, r5, r6, pc}
 8001fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fbc:	4798      	blx	r3
 8001fbe:	3601      	adds	r6, #1
 8001fc0:	e7ee      	b.n	8001fa0 <__libc_init_array+0xc>
 8001fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fc6:	4798      	blx	r3
 8001fc8:	3601      	adds	r6, #1
 8001fca:	e7f2      	b.n	8001fb2 <__libc_init_array+0x1e>
 8001fcc:	0800326c 	.word	0x0800326c
 8001fd0:	0800326c 	.word	0x0800326c
 8001fd4:	0800326c 	.word	0x0800326c
 8001fd8:	08003270 	.word	0x08003270

08001fdc <memset>:
 8001fdc:	4402      	add	r2, r0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d100      	bne.n	8001fe6 <memset+0xa>
 8001fe4:	4770      	bx	lr
 8001fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8001fea:	e7f9      	b.n	8001fe0 <memset+0x4>

08001fec <iprintf>:
 8001fec:	b40f      	push	{r0, r1, r2, r3}
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <iprintf+0x2c>)
 8001ff0:	b513      	push	{r0, r1, r4, lr}
 8001ff2:	681c      	ldr	r4, [r3, #0]
 8001ff4:	b124      	cbz	r4, 8002000 <iprintf+0x14>
 8001ff6:	69a3      	ldr	r3, [r4, #24]
 8001ff8:	b913      	cbnz	r3, 8002000 <iprintf+0x14>
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	f000 f866 	bl	80020cc <__sinit>
 8002000:	ab05      	add	r3, sp, #20
 8002002:	9a04      	ldr	r2, [sp, #16]
 8002004:	68a1      	ldr	r1, [r4, #8]
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	4620      	mov	r0, r4
 800200a:	f000 f9bd 	bl	8002388 <_vfiprintf_r>
 800200e:	b002      	add	sp, #8
 8002010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002014:	b004      	add	sp, #16
 8002016:	4770      	bx	lr
 8002018:	2000000c 	.word	0x2000000c

0800201c <std>:
 800201c:	2300      	movs	r3, #0
 800201e:	b510      	push	{r4, lr}
 8002020:	4604      	mov	r4, r0
 8002022:	e9c0 3300 	strd	r3, r3, [r0]
 8002026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800202a:	6083      	str	r3, [r0, #8]
 800202c:	8181      	strh	r1, [r0, #12]
 800202e:	6643      	str	r3, [r0, #100]	; 0x64
 8002030:	81c2      	strh	r2, [r0, #14]
 8002032:	6183      	str	r3, [r0, #24]
 8002034:	4619      	mov	r1, r3
 8002036:	2208      	movs	r2, #8
 8002038:	305c      	adds	r0, #92	; 0x5c
 800203a:	f7ff ffcf 	bl	8001fdc <memset>
 800203e:	4b05      	ldr	r3, [pc, #20]	; (8002054 <std+0x38>)
 8002040:	6263      	str	r3, [r4, #36]	; 0x24
 8002042:	4b05      	ldr	r3, [pc, #20]	; (8002058 <std+0x3c>)
 8002044:	62a3      	str	r3, [r4, #40]	; 0x28
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <std+0x40>)
 8002048:	62e3      	str	r3, [r4, #44]	; 0x2c
 800204a:	4b05      	ldr	r3, [pc, #20]	; (8002060 <std+0x44>)
 800204c:	6224      	str	r4, [r4, #32]
 800204e:	6323      	str	r3, [r4, #48]	; 0x30
 8002050:	bd10      	pop	{r4, pc}
 8002052:	bf00      	nop
 8002054:	08002605 	.word	0x08002605
 8002058:	08002627 	.word	0x08002627
 800205c:	0800265f 	.word	0x0800265f
 8002060:	08002683 	.word	0x08002683

08002064 <_cleanup_r>:
 8002064:	4901      	ldr	r1, [pc, #4]	; (800206c <_cleanup_r+0x8>)
 8002066:	f000 b8af 	b.w	80021c8 <_fwalk_reent>
 800206a:	bf00      	nop
 800206c:	0800295d 	.word	0x0800295d

08002070 <__sfmoreglue>:
 8002070:	b570      	push	{r4, r5, r6, lr}
 8002072:	2368      	movs	r3, #104	; 0x68
 8002074:	1e4d      	subs	r5, r1, #1
 8002076:	435d      	muls	r5, r3
 8002078:	460e      	mov	r6, r1
 800207a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800207e:	f000 f8e5 	bl	800224c <_malloc_r>
 8002082:	4604      	mov	r4, r0
 8002084:	b140      	cbz	r0, 8002098 <__sfmoreglue+0x28>
 8002086:	2100      	movs	r1, #0
 8002088:	e9c0 1600 	strd	r1, r6, [r0]
 800208c:	300c      	adds	r0, #12
 800208e:	60a0      	str	r0, [r4, #8]
 8002090:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002094:	f7ff ffa2 	bl	8001fdc <memset>
 8002098:	4620      	mov	r0, r4
 800209a:	bd70      	pop	{r4, r5, r6, pc}

0800209c <__sfp_lock_acquire>:
 800209c:	4801      	ldr	r0, [pc, #4]	; (80020a4 <__sfp_lock_acquire+0x8>)
 800209e:	f000 b8b3 	b.w	8002208 <__retarget_lock_acquire_recursive>
 80020a2:	bf00      	nop
 80020a4:	2000017d 	.word	0x2000017d

080020a8 <__sfp_lock_release>:
 80020a8:	4801      	ldr	r0, [pc, #4]	; (80020b0 <__sfp_lock_release+0x8>)
 80020aa:	f000 b8ae 	b.w	800220a <__retarget_lock_release_recursive>
 80020ae:	bf00      	nop
 80020b0:	2000017d 	.word	0x2000017d

080020b4 <__sinit_lock_acquire>:
 80020b4:	4801      	ldr	r0, [pc, #4]	; (80020bc <__sinit_lock_acquire+0x8>)
 80020b6:	f000 b8a7 	b.w	8002208 <__retarget_lock_acquire_recursive>
 80020ba:	bf00      	nop
 80020bc:	2000017e 	.word	0x2000017e

080020c0 <__sinit_lock_release>:
 80020c0:	4801      	ldr	r0, [pc, #4]	; (80020c8 <__sinit_lock_release+0x8>)
 80020c2:	f000 b8a2 	b.w	800220a <__retarget_lock_release_recursive>
 80020c6:	bf00      	nop
 80020c8:	2000017e 	.word	0x2000017e

080020cc <__sinit>:
 80020cc:	b510      	push	{r4, lr}
 80020ce:	4604      	mov	r4, r0
 80020d0:	f7ff fff0 	bl	80020b4 <__sinit_lock_acquire>
 80020d4:	69a3      	ldr	r3, [r4, #24]
 80020d6:	b11b      	cbz	r3, 80020e0 <__sinit+0x14>
 80020d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020dc:	f7ff bff0 	b.w	80020c0 <__sinit_lock_release>
 80020e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80020e4:	6523      	str	r3, [r4, #80]	; 0x50
 80020e6:	4b13      	ldr	r3, [pc, #76]	; (8002134 <__sinit+0x68>)
 80020e8:	4a13      	ldr	r2, [pc, #76]	; (8002138 <__sinit+0x6c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80020ee:	42a3      	cmp	r3, r4
 80020f0:	bf04      	itt	eq
 80020f2:	2301      	moveq	r3, #1
 80020f4:	61a3      	streq	r3, [r4, #24]
 80020f6:	4620      	mov	r0, r4
 80020f8:	f000 f820 	bl	800213c <__sfp>
 80020fc:	6060      	str	r0, [r4, #4]
 80020fe:	4620      	mov	r0, r4
 8002100:	f000 f81c 	bl	800213c <__sfp>
 8002104:	60a0      	str	r0, [r4, #8]
 8002106:	4620      	mov	r0, r4
 8002108:	f000 f818 	bl	800213c <__sfp>
 800210c:	2200      	movs	r2, #0
 800210e:	60e0      	str	r0, [r4, #12]
 8002110:	2104      	movs	r1, #4
 8002112:	6860      	ldr	r0, [r4, #4]
 8002114:	f7ff ff82 	bl	800201c <std>
 8002118:	68a0      	ldr	r0, [r4, #8]
 800211a:	2201      	movs	r2, #1
 800211c:	2109      	movs	r1, #9
 800211e:	f7ff ff7d 	bl	800201c <std>
 8002122:	68e0      	ldr	r0, [r4, #12]
 8002124:	2202      	movs	r2, #2
 8002126:	2112      	movs	r1, #18
 8002128:	f7ff ff78 	bl	800201c <std>
 800212c:	2301      	movs	r3, #1
 800212e:	61a3      	str	r3, [r4, #24]
 8002130:	e7d2      	b.n	80020d8 <__sinit+0xc>
 8002132:	bf00      	nop
 8002134:	080031cc 	.word	0x080031cc
 8002138:	08002065 	.word	0x08002065

0800213c <__sfp>:
 800213c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800213e:	4607      	mov	r7, r0
 8002140:	f7ff ffac 	bl	800209c <__sfp_lock_acquire>
 8002144:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <__sfp+0x84>)
 8002146:	681e      	ldr	r6, [r3, #0]
 8002148:	69b3      	ldr	r3, [r6, #24]
 800214a:	b913      	cbnz	r3, 8002152 <__sfp+0x16>
 800214c:	4630      	mov	r0, r6
 800214e:	f7ff ffbd 	bl	80020cc <__sinit>
 8002152:	3648      	adds	r6, #72	; 0x48
 8002154:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002158:	3b01      	subs	r3, #1
 800215a:	d503      	bpl.n	8002164 <__sfp+0x28>
 800215c:	6833      	ldr	r3, [r6, #0]
 800215e:	b30b      	cbz	r3, 80021a4 <__sfp+0x68>
 8002160:	6836      	ldr	r6, [r6, #0]
 8002162:	e7f7      	b.n	8002154 <__sfp+0x18>
 8002164:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002168:	b9d5      	cbnz	r5, 80021a0 <__sfp+0x64>
 800216a:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <__sfp+0x88>)
 800216c:	60e3      	str	r3, [r4, #12]
 800216e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002172:	6665      	str	r5, [r4, #100]	; 0x64
 8002174:	f000 f847 	bl	8002206 <__retarget_lock_init_recursive>
 8002178:	f7ff ff96 	bl	80020a8 <__sfp_lock_release>
 800217c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002180:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002184:	6025      	str	r5, [r4, #0]
 8002186:	61a5      	str	r5, [r4, #24]
 8002188:	2208      	movs	r2, #8
 800218a:	4629      	mov	r1, r5
 800218c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002190:	f7ff ff24 	bl	8001fdc <memset>
 8002194:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002198:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800219c:	4620      	mov	r0, r4
 800219e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021a0:	3468      	adds	r4, #104	; 0x68
 80021a2:	e7d9      	b.n	8002158 <__sfp+0x1c>
 80021a4:	2104      	movs	r1, #4
 80021a6:	4638      	mov	r0, r7
 80021a8:	f7ff ff62 	bl	8002070 <__sfmoreglue>
 80021ac:	4604      	mov	r4, r0
 80021ae:	6030      	str	r0, [r6, #0]
 80021b0:	2800      	cmp	r0, #0
 80021b2:	d1d5      	bne.n	8002160 <__sfp+0x24>
 80021b4:	f7ff ff78 	bl	80020a8 <__sfp_lock_release>
 80021b8:	230c      	movs	r3, #12
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	e7ee      	b.n	800219c <__sfp+0x60>
 80021be:	bf00      	nop
 80021c0:	080031cc 	.word	0x080031cc
 80021c4:	ffff0001 	.word	0xffff0001

080021c8 <_fwalk_reent>:
 80021c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021cc:	4606      	mov	r6, r0
 80021ce:	4688      	mov	r8, r1
 80021d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80021d4:	2700      	movs	r7, #0
 80021d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80021da:	f1b9 0901 	subs.w	r9, r9, #1
 80021de:	d505      	bpl.n	80021ec <_fwalk_reent+0x24>
 80021e0:	6824      	ldr	r4, [r4, #0]
 80021e2:	2c00      	cmp	r4, #0
 80021e4:	d1f7      	bne.n	80021d6 <_fwalk_reent+0xe>
 80021e6:	4638      	mov	r0, r7
 80021e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021ec:	89ab      	ldrh	r3, [r5, #12]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d907      	bls.n	8002202 <_fwalk_reent+0x3a>
 80021f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80021f6:	3301      	adds	r3, #1
 80021f8:	d003      	beq.n	8002202 <_fwalk_reent+0x3a>
 80021fa:	4629      	mov	r1, r5
 80021fc:	4630      	mov	r0, r6
 80021fe:	47c0      	blx	r8
 8002200:	4307      	orrs	r7, r0
 8002202:	3568      	adds	r5, #104	; 0x68
 8002204:	e7e9      	b.n	80021da <_fwalk_reent+0x12>

08002206 <__retarget_lock_init_recursive>:
 8002206:	4770      	bx	lr

08002208 <__retarget_lock_acquire_recursive>:
 8002208:	4770      	bx	lr

0800220a <__retarget_lock_release_recursive>:
 800220a:	4770      	bx	lr

0800220c <sbrk_aligned>:
 800220c:	b570      	push	{r4, r5, r6, lr}
 800220e:	4e0e      	ldr	r6, [pc, #56]	; (8002248 <sbrk_aligned+0x3c>)
 8002210:	460c      	mov	r4, r1
 8002212:	6831      	ldr	r1, [r6, #0]
 8002214:	4605      	mov	r5, r0
 8002216:	b911      	cbnz	r1, 800221e <sbrk_aligned+0x12>
 8002218:	f000 f9e4 	bl	80025e4 <_sbrk_r>
 800221c:	6030      	str	r0, [r6, #0]
 800221e:	4621      	mov	r1, r4
 8002220:	4628      	mov	r0, r5
 8002222:	f000 f9df 	bl	80025e4 <_sbrk_r>
 8002226:	1c43      	adds	r3, r0, #1
 8002228:	d00a      	beq.n	8002240 <sbrk_aligned+0x34>
 800222a:	1cc4      	adds	r4, r0, #3
 800222c:	f024 0403 	bic.w	r4, r4, #3
 8002230:	42a0      	cmp	r0, r4
 8002232:	d007      	beq.n	8002244 <sbrk_aligned+0x38>
 8002234:	1a21      	subs	r1, r4, r0
 8002236:	4628      	mov	r0, r5
 8002238:	f000 f9d4 	bl	80025e4 <_sbrk_r>
 800223c:	3001      	adds	r0, #1
 800223e:	d101      	bne.n	8002244 <sbrk_aligned+0x38>
 8002240:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002244:	4620      	mov	r0, r4
 8002246:	bd70      	pop	{r4, r5, r6, pc}
 8002248:	20000184 	.word	0x20000184

0800224c <_malloc_r>:
 800224c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002250:	1ccd      	adds	r5, r1, #3
 8002252:	f025 0503 	bic.w	r5, r5, #3
 8002256:	3508      	adds	r5, #8
 8002258:	2d0c      	cmp	r5, #12
 800225a:	bf38      	it	cc
 800225c:	250c      	movcc	r5, #12
 800225e:	2d00      	cmp	r5, #0
 8002260:	4607      	mov	r7, r0
 8002262:	db01      	blt.n	8002268 <_malloc_r+0x1c>
 8002264:	42a9      	cmp	r1, r5
 8002266:	d905      	bls.n	8002274 <_malloc_r+0x28>
 8002268:	230c      	movs	r3, #12
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	2600      	movs	r6, #0
 800226e:	4630      	mov	r0, r6
 8002270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002274:	4e2e      	ldr	r6, [pc, #184]	; (8002330 <_malloc_r+0xe4>)
 8002276:	f000 fc25 	bl	8002ac4 <__malloc_lock>
 800227a:	6833      	ldr	r3, [r6, #0]
 800227c:	461c      	mov	r4, r3
 800227e:	bb34      	cbnz	r4, 80022ce <_malloc_r+0x82>
 8002280:	4629      	mov	r1, r5
 8002282:	4638      	mov	r0, r7
 8002284:	f7ff ffc2 	bl	800220c <sbrk_aligned>
 8002288:	1c43      	adds	r3, r0, #1
 800228a:	4604      	mov	r4, r0
 800228c:	d14d      	bne.n	800232a <_malloc_r+0xde>
 800228e:	6834      	ldr	r4, [r6, #0]
 8002290:	4626      	mov	r6, r4
 8002292:	2e00      	cmp	r6, #0
 8002294:	d140      	bne.n	8002318 <_malloc_r+0xcc>
 8002296:	6823      	ldr	r3, [r4, #0]
 8002298:	4631      	mov	r1, r6
 800229a:	4638      	mov	r0, r7
 800229c:	eb04 0803 	add.w	r8, r4, r3
 80022a0:	f000 f9a0 	bl	80025e4 <_sbrk_r>
 80022a4:	4580      	cmp	r8, r0
 80022a6:	d13a      	bne.n	800231e <_malloc_r+0xd2>
 80022a8:	6823      	ldr	r3, [r4, #0]
 80022aa:	3503      	adds	r5, #3
 80022ac:	1aed      	subs	r5, r5, r3
 80022ae:	f025 0503 	bic.w	r5, r5, #3
 80022b2:	3508      	adds	r5, #8
 80022b4:	2d0c      	cmp	r5, #12
 80022b6:	bf38      	it	cc
 80022b8:	250c      	movcc	r5, #12
 80022ba:	4629      	mov	r1, r5
 80022bc:	4638      	mov	r0, r7
 80022be:	f7ff ffa5 	bl	800220c <sbrk_aligned>
 80022c2:	3001      	adds	r0, #1
 80022c4:	d02b      	beq.n	800231e <_malloc_r+0xd2>
 80022c6:	6823      	ldr	r3, [r4, #0]
 80022c8:	442b      	add	r3, r5
 80022ca:	6023      	str	r3, [r4, #0]
 80022cc:	e00e      	b.n	80022ec <_malloc_r+0xa0>
 80022ce:	6822      	ldr	r2, [r4, #0]
 80022d0:	1b52      	subs	r2, r2, r5
 80022d2:	d41e      	bmi.n	8002312 <_malloc_r+0xc6>
 80022d4:	2a0b      	cmp	r2, #11
 80022d6:	d916      	bls.n	8002306 <_malloc_r+0xba>
 80022d8:	1961      	adds	r1, r4, r5
 80022da:	42a3      	cmp	r3, r4
 80022dc:	6025      	str	r5, [r4, #0]
 80022de:	bf18      	it	ne
 80022e0:	6059      	strne	r1, [r3, #4]
 80022e2:	6863      	ldr	r3, [r4, #4]
 80022e4:	bf08      	it	eq
 80022e6:	6031      	streq	r1, [r6, #0]
 80022e8:	5162      	str	r2, [r4, r5]
 80022ea:	604b      	str	r3, [r1, #4]
 80022ec:	4638      	mov	r0, r7
 80022ee:	f104 060b 	add.w	r6, r4, #11
 80022f2:	f000 fbed 	bl	8002ad0 <__malloc_unlock>
 80022f6:	f026 0607 	bic.w	r6, r6, #7
 80022fa:	1d23      	adds	r3, r4, #4
 80022fc:	1af2      	subs	r2, r6, r3
 80022fe:	d0b6      	beq.n	800226e <_malloc_r+0x22>
 8002300:	1b9b      	subs	r3, r3, r6
 8002302:	50a3      	str	r3, [r4, r2]
 8002304:	e7b3      	b.n	800226e <_malloc_r+0x22>
 8002306:	6862      	ldr	r2, [r4, #4]
 8002308:	42a3      	cmp	r3, r4
 800230a:	bf0c      	ite	eq
 800230c:	6032      	streq	r2, [r6, #0]
 800230e:	605a      	strne	r2, [r3, #4]
 8002310:	e7ec      	b.n	80022ec <_malloc_r+0xa0>
 8002312:	4623      	mov	r3, r4
 8002314:	6864      	ldr	r4, [r4, #4]
 8002316:	e7b2      	b.n	800227e <_malloc_r+0x32>
 8002318:	4634      	mov	r4, r6
 800231a:	6876      	ldr	r6, [r6, #4]
 800231c:	e7b9      	b.n	8002292 <_malloc_r+0x46>
 800231e:	230c      	movs	r3, #12
 8002320:	603b      	str	r3, [r7, #0]
 8002322:	4638      	mov	r0, r7
 8002324:	f000 fbd4 	bl	8002ad0 <__malloc_unlock>
 8002328:	e7a1      	b.n	800226e <_malloc_r+0x22>
 800232a:	6025      	str	r5, [r4, #0]
 800232c:	e7de      	b.n	80022ec <_malloc_r+0xa0>
 800232e:	bf00      	nop
 8002330:	20000180 	.word	0x20000180

08002334 <__sfputc_r>:
 8002334:	6893      	ldr	r3, [r2, #8]
 8002336:	3b01      	subs	r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	b410      	push	{r4}
 800233c:	6093      	str	r3, [r2, #8]
 800233e:	da08      	bge.n	8002352 <__sfputc_r+0x1e>
 8002340:	6994      	ldr	r4, [r2, #24]
 8002342:	42a3      	cmp	r3, r4
 8002344:	db01      	blt.n	800234a <__sfputc_r+0x16>
 8002346:	290a      	cmp	r1, #10
 8002348:	d103      	bne.n	8002352 <__sfputc_r+0x1e>
 800234a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800234e:	f000 b99d 	b.w	800268c <__swbuf_r>
 8002352:	6813      	ldr	r3, [r2, #0]
 8002354:	1c58      	adds	r0, r3, #1
 8002356:	6010      	str	r0, [r2, #0]
 8002358:	7019      	strb	r1, [r3, #0]
 800235a:	4608      	mov	r0, r1
 800235c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002360:	4770      	bx	lr

08002362 <__sfputs_r>:
 8002362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002364:	4606      	mov	r6, r0
 8002366:	460f      	mov	r7, r1
 8002368:	4614      	mov	r4, r2
 800236a:	18d5      	adds	r5, r2, r3
 800236c:	42ac      	cmp	r4, r5
 800236e:	d101      	bne.n	8002374 <__sfputs_r+0x12>
 8002370:	2000      	movs	r0, #0
 8002372:	e007      	b.n	8002384 <__sfputs_r+0x22>
 8002374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002378:	463a      	mov	r2, r7
 800237a:	4630      	mov	r0, r6
 800237c:	f7ff ffda 	bl	8002334 <__sfputc_r>
 8002380:	1c43      	adds	r3, r0, #1
 8002382:	d1f3      	bne.n	800236c <__sfputs_r+0xa>
 8002384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002388 <_vfiprintf_r>:
 8002388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800238c:	460d      	mov	r5, r1
 800238e:	b09d      	sub	sp, #116	; 0x74
 8002390:	4614      	mov	r4, r2
 8002392:	4698      	mov	r8, r3
 8002394:	4606      	mov	r6, r0
 8002396:	b118      	cbz	r0, 80023a0 <_vfiprintf_r+0x18>
 8002398:	6983      	ldr	r3, [r0, #24]
 800239a:	b90b      	cbnz	r3, 80023a0 <_vfiprintf_r+0x18>
 800239c:	f7ff fe96 	bl	80020cc <__sinit>
 80023a0:	4b88      	ldr	r3, [pc, #544]	; (80025c4 <_vfiprintf_r+0x23c>)
 80023a2:	429d      	cmp	r5, r3
 80023a4:	d11b      	bne.n	80023de <_vfiprintf_r+0x56>
 80023a6:	6875      	ldr	r5, [r6, #4]
 80023a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80023aa:	07d9      	lsls	r1, r3, #31
 80023ac:	d405      	bmi.n	80023ba <_vfiprintf_r+0x32>
 80023ae:	89ab      	ldrh	r3, [r5, #12]
 80023b0:	059a      	lsls	r2, r3, #22
 80023b2:	d402      	bmi.n	80023ba <_vfiprintf_r+0x32>
 80023b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80023b6:	f7ff ff27 	bl	8002208 <__retarget_lock_acquire_recursive>
 80023ba:	89ab      	ldrh	r3, [r5, #12]
 80023bc:	071b      	lsls	r3, r3, #28
 80023be:	d501      	bpl.n	80023c4 <_vfiprintf_r+0x3c>
 80023c0:	692b      	ldr	r3, [r5, #16]
 80023c2:	b9eb      	cbnz	r3, 8002400 <_vfiprintf_r+0x78>
 80023c4:	4629      	mov	r1, r5
 80023c6:	4630      	mov	r0, r6
 80023c8:	f000 f9c4 	bl	8002754 <__swsetup_r>
 80023cc:	b1c0      	cbz	r0, 8002400 <_vfiprintf_r+0x78>
 80023ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80023d0:	07dc      	lsls	r4, r3, #31
 80023d2:	d50e      	bpl.n	80023f2 <_vfiprintf_r+0x6a>
 80023d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023d8:	b01d      	add	sp, #116	; 0x74
 80023da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023de:	4b7a      	ldr	r3, [pc, #488]	; (80025c8 <_vfiprintf_r+0x240>)
 80023e0:	429d      	cmp	r5, r3
 80023e2:	d101      	bne.n	80023e8 <_vfiprintf_r+0x60>
 80023e4:	68b5      	ldr	r5, [r6, #8]
 80023e6:	e7df      	b.n	80023a8 <_vfiprintf_r+0x20>
 80023e8:	4b78      	ldr	r3, [pc, #480]	; (80025cc <_vfiprintf_r+0x244>)
 80023ea:	429d      	cmp	r5, r3
 80023ec:	bf08      	it	eq
 80023ee:	68f5      	ldreq	r5, [r6, #12]
 80023f0:	e7da      	b.n	80023a8 <_vfiprintf_r+0x20>
 80023f2:	89ab      	ldrh	r3, [r5, #12]
 80023f4:	0598      	lsls	r0, r3, #22
 80023f6:	d4ed      	bmi.n	80023d4 <_vfiprintf_r+0x4c>
 80023f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80023fa:	f7ff ff06 	bl	800220a <__retarget_lock_release_recursive>
 80023fe:	e7e9      	b.n	80023d4 <_vfiprintf_r+0x4c>
 8002400:	2300      	movs	r3, #0
 8002402:	9309      	str	r3, [sp, #36]	; 0x24
 8002404:	2320      	movs	r3, #32
 8002406:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800240a:	f8cd 800c 	str.w	r8, [sp, #12]
 800240e:	2330      	movs	r3, #48	; 0x30
 8002410:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80025d0 <_vfiprintf_r+0x248>
 8002414:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002418:	f04f 0901 	mov.w	r9, #1
 800241c:	4623      	mov	r3, r4
 800241e:	469a      	mov	sl, r3
 8002420:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002424:	b10a      	cbz	r2, 800242a <_vfiprintf_r+0xa2>
 8002426:	2a25      	cmp	r2, #37	; 0x25
 8002428:	d1f9      	bne.n	800241e <_vfiprintf_r+0x96>
 800242a:	ebba 0b04 	subs.w	fp, sl, r4
 800242e:	d00b      	beq.n	8002448 <_vfiprintf_r+0xc0>
 8002430:	465b      	mov	r3, fp
 8002432:	4622      	mov	r2, r4
 8002434:	4629      	mov	r1, r5
 8002436:	4630      	mov	r0, r6
 8002438:	f7ff ff93 	bl	8002362 <__sfputs_r>
 800243c:	3001      	adds	r0, #1
 800243e:	f000 80a9 	beq.w	8002594 <_vfiprintf_r+0x20c>
 8002442:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002444:	445a      	add	r2, fp
 8002446:	9209      	str	r2, [sp, #36]	; 0x24
 8002448:	f89a 3000 	ldrb.w	r3, [sl]
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 80a1 	beq.w	8002594 <_vfiprintf_r+0x20c>
 8002452:	2300      	movs	r3, #0
 8002454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002458:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800245c:	f10a 0a01 	add.w	sl, sl, #1
 8002460:	9304      	str	r3, [sp, #16]
 8002462:	9307      	str	r3, [sp, #28]
 8002464:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002468:	931a      	str	r3, [sp, #104]	; 0x68
 800246a:	4654      	mov	r4, sl
 800246c:	2205      	movs	r2, #5
 800246e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002472:	4857      	ldr	r0, [pc, #348]	; (80025d0 <_vfiprintf_r+0x248>)
 8002474:	f7fd feac 	bl	80001d0 <memchr>
 8002478:	9a04      	ldr	r2, [sp, #16]
 800247a:	b9d8      	cbnz	r0, 80024b4 <_vfiprintf_r+0x12c>
 800247c:	06d1      	lsls	r1, r2, #27
 800247e:	bf44      	itt	mi
 8002480:	2320      	movmi	r3, #32
 8002482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002486:	0713      	lsls	r3, r2, #28
 8002488:	bf44      	itt	mi
 800248a:	232b      	movmi	r3, #43	; 0x2b
 800248c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002490:	f89a 3000 	ldrb.w	r3, [sl]
 8002494:	2b2a      	cmp	r3, #42	; 0x2a
 8002496:	d015      	beq.n	80024c4 <_vfiprintf_r+0x13c>
 8002498:	9a07      	ldr	r2, [sp, #28]
 800249a:	4654      	mov	r4, sl
 800249c:	2000      	movs	r0, #0
 800249e:	f04f 0c0a 	mov.w	ip, #10
 80024a2:	4621      	mov	r1, r4
 80024a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80024a8:	3b30      	subs	r3, #48	; 0x30
 80024aa:	2b09      	cmp	r3, #9
 80024ac:	d94d      	bls.n	800254a <_vfiprintf_r+0x1c2>
 80024ae:	b1b0      	cbz	r0, 80024de <_vfiprintf_r+0x156>
 80024b0:	9207      	str	r2, [sp, #28]
 80024b2:	e014      	b.n	80024de <_vfiprintf_r+0x156>
 80024b4:	eba0 0308 	sub.w	r3, r0, r8
 80024b8:	fa09 f303 	lsl.w	r3, r9, r3
 80024bc:	4313      	orrs	r3, r2
 80024be:	9304      	str	r3, [sp, #16]
 80024c0:	46a2      	mov	sl, r4
 80024c2:	e7d2      	b.n	800246a <_vfiprintf_r+0xe2>
 80024c4:	9b03      	ldr	r3, [sp, #12]
 80024c6:	1d19      	adds	r1, r3, #4
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	9103      	str	r1, [sp, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bfbb      	ittet	lt
 80024d0:	425b      	neglt	r3, r3
 80024d2:	f042 0202 	orrlt.w	r2, r2, #2
 80024d6:	9307      	strge	r3, [sp, #28]
 80024d8:	9307      	strlt	r3, [sp, #28]
 80024da:	bfb8      	it	lt
 80024dc:	9204      	strlt	r2, [sp, #16]
 80024de:	7823      	ldrb	r3, [r4, #0]
 80024e0:	2b2e      	cmp	r3, #46	; 0x2e
 80024e2:	d10c      	bne.n	80024fe <_vfiprintf_r+0x176>
 80024e4:	7863      	ldrb	r3, [r4, #1]
 80024e6:	2b2a      	cmp	r3, #42	; 0x2a
 80024e8:	d134      	bne.n	8002554 <_vfiprintf_r+0x1cc>
 80024ea:	9b03      	ldr	r3, [sp, #12]
 80024ec:	1d1a      	adds	r2, r3, #4
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	9203      	str	r2, [sp, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	bfb8      	it	lt
 80024f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80024fa:	3402      	adds	r4, #2
 80024fc:	9305      	str	r3, [sp, #20]
 80024fe:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 80025e0 <_vfiprintf_r+0x258>
 8002502:	7821      	ldrb	r1, [r4, #0]
 8002504:	2203      	movs	r2, #3
 8002506:	4650      	mov	r0, sl
 8002508:	f7fd fe62 	bl	80001d0 <memchr>
 800250c:	b138      	cbz	r0, 800251e <_vfiprintf_r+0x196>
 800250e:	9b04      	ldr	r3, [sp, #16]
 8002510:	eba0 000a 	sub.w	r0, r0, sl
 8002514:	2240      	movs	r2, #64	; 0x40
 8002516:	4082      	lsls	r2, r0
 8002518:	4313      	orrs	r3, r2
 800251a:	3401      	adds	r4, #1
 800251c:	9304      	str	r3, [sp, #16]
 800251e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002522:	482c      	ldr	r0, [pc, #176]	; (80025d4 <_vfiprintf_r+0x24c>)
 8002524:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002528:	2206      	movs	r2, #6
 800252a:	f7fd fe51 	bl	80001d0 <memchr>
 800252e:	2800      	cmp	r0, #0
 8002530:	d03f      	beq.n	80025b2 <_vfiprintf_r+0x22a>
 8002532:	4b29      	ldr	r3, [pc, #164]	; (80025d8 <_vfiprintf_r+0x250>)
 8002534:	bb1b      	cbnz	r3, 800257e <_vfiprintf_r+0x1f6>
 8002536:	9b03      	ldr	r3, [sp, #12]
 8002538:	3307      	adds	r3, #7
 800253a:	f023 0307 	bic.w	r3, r3, #7
 800253e:	3308      	adds	r3, #8
 8002540:	9303      	str	r3, [sp, #12]
 8002542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002544:	443b      	add	r3, r7
 8002546:	9309      	str	r3, [sp, #36]	; 0x24
 8002548:	e768      	b.n	800241c <_vfiprintf_r+0x94>
 800254a:	fb0c 3202 	mla	r2, ip, r2, r3
 800254e:	460c      	mov	r4, r1
 8002550:	2001      	movs	r0, #1
 8002552:	e7a6      	b.n	80024a2 <_vfiprintf_r+0x11a>
 8002554:	2300      	movs	r3, #0
 8002556:	3401      	adds	r4, #1
 8002558:	9305      	str	r3, [sp, #20]
 800255a:	4619      	mov	r1, r3
 800255c:	f04f 0c0a 	mov.w	ip, #10
 8002560:	4620      	mov	r0, r4
 8002562:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002566:	3a30      	subs	r2, #48	; 0x30
 8002568:	2a09      	cmp	r2, #9
 800256a:	d903      	bls.n	8002574 <_vfiprintf_r+0x1ec>
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0c6      	beq.n	80024fe <_vfiprintf_r+0x176>
 8002570:	9105      	str	r1, [sp, #20]
 8002572:	e7c4      	b.n	80024fe <_vfiprintf_r+0x176>
 8002574:	fb0c 2101 	mla	r1, ip, r1, r2
 8002578:	4604      	mov	r4, r0
 800257a:	2301      	movs	r3, #1
 800257c:	e7f0      	b.n	8002560 <_vfiprintf_r+0x1d8>
 800257e:	ab03      	add	r3, sp, #12
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	462a      	mov	r2, r5
 8002584:	4b15      	ldr	r3, [pc, #84]	; (80025dc <_vfiprintf_r+0x254>)
 8002586:	a904      	add	r1, sp, #16
 8002588:	4630      	mov	r0, r6
 800258a:	f3af 8000 	nop.w
 800258e:	4607      	mov	r7, r0
 8002590:	1c78      	adds	r0, r7, #1
 8002592:	d1d6      	bne.n	8002542 <_vfiprintf_r+0x1ba>
 8002594:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002596:	07d9      	lsls	r1, r3, #31
 8002598:	d405      	bmi.n	80025a6 <_vfiprintf_r+0x21e>
 800259a:	89ab      	ldrh	r3, [r5, #12]
 800259c:	059a      	lsls	r2, r3, #22
 800259e:	d402      	bmi.n	80025a6 <_vfiprintf_r+0x21e>
 80025a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80025a2:	f7ff fe32 	bl	800220a <__retarget_lock_release_recursive>
 80025a6:	89ab      	ldrh	r3, [r5, #12]
 80025a8:	065b      	lsls	r3, r3, #25
 80025aa:	f53f af13 	bmi.w	80023d4 <_vfiprintf_r+0x4c>
 80025ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025b0:	e712      	b.n	80023d8 <_vfiprintf_r+0x50>
 80025b2:	ab03      	add	r3, sp, #12
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	462a      	mov	r2, r5
 80025b8:	4b08      	ldr	r3, [pc, #32]	; (80025dc <_vfiprintf_r+0x254>)
 80025ba:	a904      	add	r1, sp, #16
 80025bc:	4630      	mov	r0, r6
 80025be:	f000 fb47 	bl	8002c50 <_printf_i>
 80025c2:	e7e4      	b.n	800258e <_vfiprintf_r+0x206>
 80025c4:	080031f0 	.word	0x080031f0
 80025c8:	08003210 	.word	0x08003210
 80025cc:	080031d0 	.word	0x080031d0
 80025d0:	08003230 	.word	0x08003230
 80025d4:	0800323a 	.word	0x0800323a
 80025d8:	00000000 	.word	0x00000000
 80025dc:	08002363 	.word	0x08002363
 80025e0:	08003236 	.word	0x08003236

080025e4 <_sbrk_r>:
 80025e4:	b538      	push	{r3, r4, r5, lr}
 80025e6:	4d06      	ldr	r5, [pc, #24]	; (8002600 <_sbrk_r+0x1c>)
 80025e8:	2300      	movs	r3, #0
 80025ea:	4604      	mov	r4, r0
 80025ec:	4608      	mov	r0, r1
 80025ee:	602b      	str	r3, [r5, #0]
 80025f0:	f7fe f970 	bl	80008d4 <_sbrk>
 80025f4:	1c43      	adds	r3, r0, #1
 80025f6:	d102      	bne.n	80025fe <_sbrk_r+0x1a>
 80025f8:	682b      	ldr	r3, [r5, #0]
 80025fa:	b103      	cbz	r3, 80025fe <_sbrk_r+0x1a>
 80025fc:	6023      	str	r3, [r4, #0]
 80025fe:	bd38      	pop	{r3, r4, r5, pc}
 8002600:	20000188 	.word	0x20000188

08002604 <__sread>:
 8002604:	b510      	push	{r4, lr}
 8002606:	460c      	mov	r4, r1
 8002608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800260c:	f000 fc42 	bl	8002e94 <_read_r>
 8002610:	2800      	cmp	r0, #0
 8002612:	bfab      	itete	ge
 8002614:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002616:	89a3      	ldrhlt	r3, [r4, #12]
 8002618:	181b      	addge	r3, r3, r0
 800261a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800261e:	bfac      	ite	ge
 8002620:	6563      	strge	r3, [r4, #84]	; 0x54
 8002622:	81a3      	strhlt	r3, [r4, #12]
 8002624:	bd10      	pop	{r4, pc}

08002626 <__swrite>:
 8002626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800262a:	461f      	mov	r7, r3
 800262c:	898b      	ldrh	r3, [r1, #12]
 800262e:	05db      	lsls	r3, r3, #23
 8002630:	4605      	mov	r5, r0
 8002632:	460c      	mov	r4, r1
 8002634:	4616      	mov	r6, r2
 8002636:	d505      	bpl.n	8002644 <__swrite+0x1e>
 8002638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800263c:	2302      	movs	r3, #2
 800263e:	2200      	movs	r2, #0
 8002640:	f000 f9c8 	bl	80029d4 <_lseek_r>
 8002644:	89a3      	ldrh	r3, [r4, #12]
 8002646:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800264a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800264e:	81a3      	strh	r3, [r4, #12]
 8002650:	4632      	mov	r2, r6
 8002652:	463b      	mov	r3, r7
 8002654:	4628      	mov	r0, r5
 8002656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800265a:	f000 b869 	b.w	8002730 <_write_r>

0800265e <__sseek>:
 800265e:	b510      	push	{r4, lr}
 8002660:	460c      	mov	r4, r1
 8002662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002666:	f000 f9b5 	bl	80029d4 <_lseek_r>
 800266a:	1c43      	adds	r3, r0, #1
 800266c:	89a3      	ldrh	r3, [r4, #12]
 800266e:	bf15      	itete	ne
 8002670:	6560      	strne	r0, [r4, #84]	; 0x54
 8002672:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002676:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800267a:	81a3      	strheq	r3, [r4, #12]
 800267c:	bf18      	it	ne
 800267e:	81a3      	strhne	r3, [r4, #12]
 8002680:	bd10      	pop	{r4, pc}

08002682 <__sclose>:
 8002682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002686:	f000 b8d3 	b.w	8002830 <_close_r>
	...

0800268c <__swbuf_r>:
 800268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268e:	460e      	mov	r6, r1
 8002690:	4614      	mov	r4, r2
 8002692:	4605      	mov	r5, r0
 8002694:	b118      	cbz	r0, 800269e <__swbuf_r+0x12>
 8002696:	6983      	ldr	r3, [r0, #24]
 8002698:	b90b      	cbnz	r3, 800269e <__swbuf_r+0x12>
 800269a:	f7ff fd17 	bl	80020cc <__sinit>
 800269e:	4b21      	ldr	r3, [pc, #132]	; (8002724 <__swbuf_r+0x98>)
 80026a0:	429c      	cmp	r4, r3
 80026a2:	d12b      	bne.n	80026fc <__swbuf_r+0x70>
 80026a4:	686c      	ldr	r4, [r5, #4]
 80026a6:	69a3      	ldr	r3, [r4, #24]
 80026a8:	60a3      	str	r3, [r4, #8]
 80026aa:	89a3      	ldrh	r3, [r4, #12]
 80026ac:	071a      	lsls	r2, r3, #28
 80026ae:	d52f      	bpl.n	8002710 <__swbuf_r+0x84>
 80026b0:	6923      	ldr	r3, [r4, #16]
 80026b2:	b36b      	cbz	r3, 8002710 <__swbuf_r+0x84>
 80026b4:	6923      	ldr	r3, [r4, #16]
 80026b6:	6820      	ldr	r0, [r4, #0]
 80026b8:	1ac0      	subs	r0, r0, r3
 80026ba:	6963      	ldr	r3, [r4, #20]
 80026bc:	b2f6      	uxtb	r6, r6
 80026be:	4283      	cmp	r3, r0
 80026c0:	4637      	mov	r7, r6
 80026c2:	dc04      	bgt.n	80026ce <__swbuf_r+0x42>
 80026c4:	4621      	mov	r1, r4
 80026c6:	4628      	mov	r0, r5
 80026c8:	f000 f948 	bl	800295c <_fflush_r>
 80026cc:	bb30      	cbnz	r0, 800271c <__swbuf_r+0x90>
 80026ce:	68a3      	ldr	r3, [r4, #8]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	60a3      	str	r3, [r4, #8]
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	6022      	str	r2, [r4, #0]
 80026da:	701e      	strb	r6, [r3, #0]
 80026dc:	6963      	ldr	r3, [r4, #20]
 80026de:	3001      	adds	r0, #1
 80026e0:	4283      	cmp	r3, r0
 80026e2:	d004      	beq.n	80026ee <__swbuf_r+0x62>
 80026e4:	89a3      	ldrh	r3, [r4, #12]
 80026e6:	07db      	lsls	r3, r3, #31
 80026e8:	d506      	bpl.n	80026f8 <__swbuf_r+0x6c>
 80026ea:	2e0a      	cmp	r6, #10
 80026ec:	d104      	bne.n	80026f8 <__swbuf_r+0x6c>
 80026ee:	4621      	mov	r1, r4
 80026f0:	4628      	mov	r0, r5
 80026f2:	f000 f933 	bl	800295c <_fflush_r>
 80026f6:	b988      	cbnz	r0, 800271c <__swbuf_r+0x90>
 80026f8:	4638      	mov	r0, r7
 80026fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026fc:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <__swbuf_r+0x9c>)
 80026fe:	429c      	cmp	r4, r3
 8002700:	d101      	bne.n	8002706 <__swbuf_r+0x7a>
 8002702:	68ac      	ldr	r4, [r5, #8]
 8002704:	e7cf      	b.n	80026a6 <__swbuf_r+0x1a>
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <__swbuf_r+0xa0>)
 8002708:	429c      	cmp	r4, r3
 800270a:	bf08      	it	eq
 800270c:	68ec      	ldreq	r4, [r5, #12]
 800270e:	e7ca      	b.n	80026a6 <__swbuf_r+0x1a>
 8002710:	4621      	mov	r1, r4
 8002712:	4628      	mov	r0, r5
 8002714:	f000 f81e 	bl	8002754 <__swsetup_r>
 8002718:	2800      	cmp	r0, #0
 800271a:	d0cb      	beq.n	80026b4 <__swbuf_r+0x28>
 800271c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002720:	e7ea      	b.n	80026f8 <__swbuf_r+0x6c>
 8002722:	bf00      	nop
 8002724:	080031f0 	.word	0x080031f0
 8002728:	08003210 	.word	0x08003210
 800272c:	080031d0 	.word	0x080031d0

08002730 <_write_r>:
 8002730:	b538      	push	{r3, r4, r5, lr}
 8002732:	4d07      	ldr	r5, [pc, #28]	; (8002750 <_write_r+0x20>)
 8002734:	4604      	mov	r4, r0
 8002736:	4608      	mov	r0, r1
 8002738:	4611      	mov	r1, r2
 800273a:	2200      	movs	r2, #0
 800273c:	602a      	str	r2, [r5, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	f7fe f878 	bl	8000834 <_write>
 8002744:	1c43      	adds	r3, r0, #1
 8002746:	d102      	bne.n	800274e <_write_r+0x1e>
 8002748:	682b      	ldr	r3, [r5, #0]
 800274a:	b103      	cbz	r3, 800274e <_write_r+0x1e>
 800274c:	6023      	str	r3, [r4, #0]
 800274e:	bd38      	pop	{r3, r4, r5, pc}
 8002750:	20000188 	.word	0x20000188

08002754 <__swsetup_r>:
 8002754:	4b32      	ldr	r3, [pc, #200]	; (8002820 <__swsetup_r+0xcc>)
 8002756:	b570      	push	{r4, r5, r6, lr}
 8002758:	681d      	ldr	r5, [r3, #0]
 800275a:	4606      	mov	r6, r0
 800275c:	460c      	mov	r4, r1
 800275e:	b125      	cbz	r5, 800276a <__swsetup_r+0x16>
 8002760:	69ab      	ldr	r3, [r5, #24]
 8002762:	b913      	cbnz	r3, 800276a <__swsetup_r+0x16>
 8002764:	4628      	mov	r0, r5
 8002766:	f7ff fcb1 	bl	80020cc <__sinit>
 800276a:	4b2e      	ldr	r3, [pc, #184]	; (8002824 <__swsetup_r+0xd0>)
 800276c:	429c      	cmp	r4, r3
 800276e:	d10f      	bne.n	8002790 <__swsetup_r+0x3c>
 8002770:	686c      	ldr	r4, [r5, #4]
 8002772:	89a3      	ldrh	r3, [r4, #12]
 8002774:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002778:	0719      	lsls	r1, r3, #28
 800277a:	d42c      	bmi.n	80027d6 <__swsetup_r+0x82>
 800277c:	06dd      	lsls	r5, r3, #27
 800277e:	d411      	bmi.n	80027a4 <__swsetup_r+0x50>
 8002780:	2309      	movs	r3, #9
 8002782:	6033      	str	r3, [r6, #0]
 8002784:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002788:	81a3      	strh	r3, [r4, #12]
 800278a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800278e:	e03e      	b.n	800280e <__swsetup_r+0xba>
 8002790:	4b25      	ldr	r3, [pc, #148]	; (8002828 <__swsetup_r+0xd4>)
 8002792:	429c      	cmp	r4, r3
 8002794:	d101      	bne.n	800279a <__swsetup_r+0x46>
 8002796:	68ac      	ldr	r4, [r5, #8]
 8002798:	e7eb      	b.n	8002772 <__swsetup_r+0x1e>
 800279a:	4b24      	ldr	r3, [pc, #144]	; (800282c <__swsetup_r+0xd8>)
 800279c:	429c      	cmp	r4, r3
 800279e:	bf08      	it	eq
 80027a0:	68ec      	ldreq	r4, [r5, #12]
 80027a2:	e7e6      	b.n	8002772 <__swsetup_r+0x1e>
 80027a4:	0758      	lsls	r0, r3, #29
 80027a6:	d512      	bpl.n	80027ce <__swsetup_r+0x7a>
 80027a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80027aa:	b141      	cbz	r1, 80027be <__swsetup_r+0x6a>
 80027ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80027b0:	4299      	cmp	r1, r3
 80027b2:	d002      	beq.n	80027ba <__swsetup_r+0x66>
 80027b4:	4630      	mov	r0, r6
 80027b6:	f000 f991 	bl	8002adc <_free_r>
 80027ba:	2300      	movs	r3, #0
 80027bc:	6363      	str	r3, [r4, #52]	; 0x34
 80027be:	89a3      	ldrh	r3, [r4, #12]
 80027c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80027c4:	81a3      	strh	r3, [r4, #12]
 80027c6:	2300      	movs	r3, #0
 80027c8:	6063      	str	r3, [r4, #4]
 80027ca:	6923      	ldr	r3, [r4, #16]
 80027cc:	6023      	str	r3, [r4, #0]
 80027ce:	89a3      	ldrh	r3, [r4, #12]
 80027d0:	f043 0308 	orr.w	r3, r3, #8
 80027d4:	81a3      	strh	r3, [r4, #12]
 80027d6:	6923      	ldr	r3, [r4, #16]
 80027d8:	b94b      	cbnz	r3, 80027ee <__swsetup_r+0x9a>
 80027da:	89a3      	ldrh	r3, [r4, #12]
 80027dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80027e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e4:	d003      	beq.n	80027ee <__swsetup_r+0x9a>
 80027e6:	4621      	mov	r1, r4
 80027e8:	4630      	mov	r0, r6
 80027ea:	f000 f92b 	bl	8002a44 <__smakebuf_r>
 80027ee:	89a0      	ldrh	r0, [r4, #12]
 80027f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80027f4:	f010 0301 	ands.w	r3, r0, #1
 80027f8:	d00a      	beq.n	8002810 <__swsetup_r+0xbc>
 80027fa:	2300      	movs	r3, #0
 80027fc:	60a3      	str	r3, [r4, #8]
 80027fe:	6963      	ldr	r3, [r4, #20]
 8002800:	425b      	negs	r3, r3
 8002802:	61a3      	str	r3, [r4, #24]
 8002804:	6923      	ldr	r3, [r4, #16]
 8002806:	b943      	cbnz	r3, 800281a <__swsetup_r+0xc6>
 8002808:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800280c:	d1ba      	bne.n	8002784 <__swsetup_r+0x30>
 800280e:	bd70      	pop	{r4, r5, r6, pc}
 8002810:	0781      	lsls	r1, r0, #30
 8002812:	bf58      	it	pl
 8002814:	6963      	ldrpl	r3, [r4, #20]
 8002816:	60a3      	str	r3, [r4, #8]
 8002818:	e7f4      	b.n	8002804 <__swsetup_r+0xb0>
 800281a:	2000      	movs	r0, #0
 800281c:	e7f7      	b.n	800280e <__swsetup_r+0xba>
 800281e:	bf00      	nop
 8002820:	2000000c 	.word	0x2000000c
 8002824:	080031f0 	.word	0x080031f0
 8002828:	08003210 	.word	0x08003210
 800282c:	080031d0 	.word	0x080031d0

08002830 <_close_r>:
 8002830:	b538      	push	{r3, r4, r5, lr}
 8002832:	4d06      	ldr	r5, [pc, #24]	; (800284c <_close_r+0x1c>)
 8002834:	2300      	movs	r3, #0
 8002836:	4604      	mov	r4, r0
 8002838:	4608      	mov	r0, r1
 800283a:	602b      	str	r3, [r5, #0]
 800283c:	f7fe f816 	bl	800086c <_close>
 8002840:	1c43      	adds	r3, r0, #1
 8002842:	d102      	bne.n	800284a <_close_r+0x1a>
 8002844:	682b      	ldr	r3, [r5, #0]
 8002846:	b103      	cbz	r3, 800284a <_close_r+0x1a>
 8002848:	6023      	str	r3, [r4, #0]
 800284a:	bd38      	pop	{r3, r4, r5, pc}
 800284c:	20000188 	.word	0x20000188

08002850 <__sflush_r>:
 8002850:	898a      	ldrh	r2, [r1, #12]
 8002852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002856:	4605      	mov	r5, r0
 8002858:	0710      	lsls	r0, r2, #28
 800285a:	460c      	mov	r4, r1
 800285c:	d458      	bmi.n	8002910 <__sflush_r+0xc0>
 800285e:	684b      	ldr	r3, [r1, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	dc05      	bgt.n	8002870 <__sflush_r+0x20>
 8002864:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002866:	2b00      	cmp	r3, #0
 8002868:	dc02      	bgt.n	8002870 <__sflush_r+0x20>
 800286a:	2000      	movs	r0, #0
 800286c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002870:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002872:	2e00      	cmp	r6, #0
 8002874:	d0f9      	beq.n	800286a <__sflush_r+0x1a>
 8002876:	2300      	movs	r3, #0
 8002878:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800287c:	682f      	ldr	r7, [r5, #0]
 800287e:	6a21      	ldr	r1, [r4, #32]
 8002880:	602b      	str	r3, [r5, #0]
 8002882:	d032      	beq.n	80028ea <__sflush_r+0x9a>
 8002884:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002886:	89a3      	ldrh	r3, [r4, #12]
 8002888:	075a      	lsls	r2, r3, #29
 800288a:	d505      	bpl.n	8002898 <__sflush_r+0x48>
 800288c:	6863      	ldr	r3, [r4, #4]
 800288e:	1ac0      	subs	r0, r0, r3
 8002890:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002892:	b10b      	cbz	r3, 8002898 <__sflush_r+0x48>
 8002894:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002896:	1ac0      	subs	r0, r0, r3
 8002898:	2300      	movs	r3, #0
 800289a:	4602      	mov	r2, r0
 800289c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800289e:	6a21      	ldr	r1, [r4, #32]
 80028a0:	4628      	mov	r0, r5
 80028a2:	47b0      	blx	r6
 80028a4:	1c43      	adds	r3, r0, #1
 80028a6:	89a3      	ldrh	r3, [r4, #12]
 80028a8:	d106      	bne.n	80028b8 <__sflush_r+0x68>
 80028aa:	6829      	ldr	r1, [r5, #0]
 80028ac:	291d      	cmp	r1, #29
 80028ae:	d82b      	bhi.n	8002908 <__sflush_r+0xb8>
 80028b0:	4a29      	ldr	r2, [pc, #164]	; (8002958 <__sflush_r+0x108>)
 80028b2:	410a      	asrs	r2, r1
 80028b4:	07d6      	lsls	r6, r2, #31
 80028b6:	d427      	bmi.n	8002908 <__sflush_r+0xb8>
 80028b8:	2200      	movs	r2, #0
 80028ba:	6062      	str	r2, [r4, #4]
 80028bc:	04d9      	lsls	r1, r3, #19
 80028be:	6922      	ldr	r2, [r4, #16]
 80028c0:	6022      	str	r2, [r4, #0]
 80028c2:	d504      	bpl.n	80028ce <__sflush_r+0x7e>
 80028c4:	1c42      	adds	r2, r0, #1
 80028c6:	d101      	bne.n	80028cc <__sflush_r+0x7c>
 80028c8:	682b      	ldr	r3, [r5, #0]
 80028ca:	b903      	cbnz	r3, 80028ce <__sflush_r+0x7e>
 80028cc:	6560      	str	r0, [r4, #84]	; 0x54
 80028ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028d0:	602f      	str	r7, [r5, #0]
 80028d2:	2900      	cmp	r1, #0
 80028d4:	d0c9      	beq.n	800286a <__sflush_r+0x1a>
 80028d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028da:	4299      	cmp	r1, r3
 80028dc:	d002      	beq.n	80028e4 <__sflush_r+0x94>
 80028de:	4628      	mov	r0, r5
 80028e0:	f000 f8fc 	bl	8002adc <_free_r>
 80028e4:	2000      	movs	r0, #0
 80028e6:	6360      	str	r0, [r4, #52]	; 0x34
 80028e8:	e7c0      	b.n	800286c <__sflush_r+0x1c>
 80028ea:	2301      	movs	r3, #1
 80028ec:	4628      	mov	r0, r5
 80028ee:	47b0      	blx	r6
 80028f0:	1c41      	adds	r1, r0, #1
 80028f2:	d1c8      	bne.n	8002886 <__sflush_r+0x36>
 80028f4:	682b      	ldr	r3, [r5, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0c5      	beq.n	8002886 <__sflush_r+0x36>
 80028fa:	2b1d      	cmp	r3, #29
 80028fc:	d001      	beq.n	8002902 <__sflush_r+0xb2>
 80028fe:	2b16      	cmp	r3, #22
 8002900:	d101      	bne.n	8002906 <__sflush_r+0xb6>
 8002902:	602f      	str	r7, [r5, #0]
 8002904:	e7b1      	b.n	800286a <__sflush_r+0x1a>
 8002906:	89a3      	ldrh	r3, [r4, #12]
 8002908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800290c:	81a3      	strh	r3, [r4, #12]
 800290e:	e7ad      	b.n	800286c <__sflush_r+0x1c>
 8002910:	690f      	ldr	r7, [r1, #16]
 8002912:	2f00      	cmp	r7, #0
 8002914:	d0a9      	beq.n	800286a <__sflush_r+0x1a>
 8002916:	0793      	lsls	r3, r2, #30
 8002918:	680e      	ldr	r6, [r1, #0]
 800291a:	bf08      	it	eq
 800291c:	694b      	ldreq	r3, [r1, #20]
 800291e:	600f      	str	r7, [r1, #0]
 8002920:	bf18      	it	ne
 8002922:	2300      	movne	r3, #0
 8002924:	eba6 0807 	sub.w	r8, r6, r7
 8002928:	608b      	str	r3, [r1, #8]
 800292a:	f1b8 0f00 	cmp.w	r8, #0
 800292e:	dd9c      	ble.n	800286a <__sflush_r+0x1a>
 8002930:	6a21      	ldr	r1, [r4, #32]
 8002932:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002934:	4643      	mov	r3, r8
 8002936:	463a      	mov	r2, r7
 8002938:	4628      	mov	r0, r5
 800293a:	47b0      	blx	r6
 800293c:	2800      	cmp	r0, #0
 800293e:	dc06      	bgt.n	800294e <__sflush_r+0xfe>
 8002940:	89a3      	ldrh	r3, [r4, #12]
 8002942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002946:	81a3      	strh	r3, [r4, #12]
 8002948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800294c:	e78e      	b.n	800286c <__sflush_r+0x1c>
 800294e:	4407      	add	r7, r0
 8002950:	eba8 0800 	sub.w	r8, r8, r0
 8002954:	e7e9      	b.n	800292a <__sflush_r+0xda>
 8002956:	bf00      	nop
 8002958:	dfbffffe 	.word	0xdfbffffe

0800295c <_fflush_r>:
 800295c:	b538      	push	{r3, r4, r5, lr}
 800295e:	690b      	ldr	r3, [r1, #16]
 8002960:	4605      	mov	r5, r0
 8002962:	460c      	mov	r4, r1
 8002964:	b913      	cbnz	r3, 800296c <_fflush_r+0x10>
 8002966:	2500      	movs	r5, #0
 8002968:	4628      	mov	r0, r5
 800296a:	bd38      	pop	{r3, r4, r5, pc}
 800296c:	b118      	cbz	r0, 8002976 <_fflush_r+0x1a>
 800296e:	6983      	ldr	r3, [r0, #24]
 8002970:	b90b      	cbnz	r3, 8002976 <_fflush_r+0x1a>
 8002972:	f7ff fbab 	bl	80020cc <__sinit>
 8002976:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <_fflush_r+0x6c>)
 8002978:	429c      	cmp	r4, r3
 800297a:	d11b      	bne.n	80029b4 <_fflush_r+0x58>
 800297c:	686c      	ldr	r4, [r5, #4]
 800297e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0ef      	beq.n	8002966 <_fflush_r+0xa>
 8002986:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002988:	07d0      	lsls	r0, r2, #31
 800298a:	d404      	bmi.n	8002996 <_fflush_r+0x3a>
 800298c:	0599      	lsls	r1, r3, #22
 800298e:	d402      	bmi.n	8002996 <_fflush_r+0x3a>
 8002990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002992:	f7ff fc39 	bl	8002208 <__retarget_lock_acquire_recursive>
 8002996:	4628      	mov	r0, r5
 8002998:	4621      	mov	r1, r4
 800299a:	f7ff ff59 	bl	8002850 <__sflush_r>
 800299e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029a0:	07da      	lsls	r2, r3, #31
 80029a2:	4605      	mov	r5, r0
 80029a4:	d4e0      	bmi.n	8002968 <_fflush_r+0xc>
 80029a6:	89a3      	ldrh	r3, [r4, #12]
 80029a8:	059b      	lsls	r3, r3, #22
 80029aa:	d4dd      	bmi.n	8002968 <_fflush_r+0xc>
 80029ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029ae:	f7ff fc2c 	bl	800220a <__retarget_lock_release_recursive>
 80029b2:	e7d9      	b.n	8002968 <_fflush_r+0xc>
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <_fflush_r+0x70>)
 80029b6:	429c      	cmp	r4, r3
 80029b8:	d101      	bne.n	80029be <_fflush_r+0x62>
 80029ba:	68ac      	ldr	r4, [r5, #8]
 80029bc:	e7df      	b.n	800297e <_fflush_r+0x22>
 80029be:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <_fflush_r+0x74>)
 80029c0:	429c      	cmp	r4, r3
 80029c2:	bf08      	it	eq
 80029c4:	68ec      	ldreq	r4, [r5, #12]
 80029c6:	e7da      	b.n	800297e <_fflush_r+0x22>
 80029c8:	080031f0 	.word	0x080031f0
 80029cc:	08003210 	.word	0x08003210
 80029d0:	080031d0 	.word	0x080031d0

080029d4 <_lseek_r>:
 80029d4:	b538      	push	{r3, r4, r5, lr}
 80029d6:	4d07      	ldr	r5, [pc, #28]	; (80029f4 <_lseek_r+0x20>)
 80029d8:	4604      	mov	r4, r0
 80029da:	4608      	mov	r0, r1
 80029dc:	4611      	mov	r1, r2
 80029de:	2200      	movs	r2, #0
 80029e0:	602a      	str	r2, [r5, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f7fd ff69 	bl	80008ba <_lseek>
 80029e8:	1c43      	adds	r3, r0, #1
 80029ea:	d102      	bne.n	80029f2 <_lseek_r+0x1e>
 80029ec:	682b      	ldr	r3, [r5, #0]
 80029ee:	b103      	cbz	r3, 80029f2 <_lseek_r+0x1e>
 80029f0:	6023      	str	r3, [r4, #0]
 80029f2:	bd38      	pop	{r3, r4, r5, pc}
 80029f4:	20000188 	.word	0x20000188

080029f8 <__swhatbuf_r>:
 80029f8:	b570      	push	{r4, r5, r6, lr}
 80029fa:	460c      	mov	r4, r1
 80029fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a00:	2900      	cmp	r1, #0
 8002a02:	b096      	sub	sp, #88	; 0x58
 8002a04:	4615      	mov	r5, r2
 8002a06:	461e      	mov	r6, r3
 8002a08:	da0d      	bge.n	8002a26 <__swhatbuf_r+0x2e>
 8002a0a:	89a3      	ldrh	r3, [r4, #12]
 8002a0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002a10:	f04f 0100 	mov.w	r1, #0
 8002a14:	bf0c      	ite	eq
 8002a16:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002a1a:	2340      	movne	r3, #64	; 0x40
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	6031      	str	r1, [r6, #0]
 8002a20:	602b      	str	r3, [r5, #0]
 8002a22:	b016      	add	sp, #88	; 0x58
 8002a24:	bd70      	pop	{r4, r5, r6, pc}
 8002a26:	466a      	mov	r2, sp
 8002a28:	f000 fa46 	bl	8002eb8 <_fstat_r>
 8002a2c:	2800      	cmp	r0, #0
 8002a2e:	dbec      	blt.n	8002a0a <__swhatbuf_r+0x12>
 8002a30:	9901      	ldr	r1, [sp, #4]
 8002a32:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002a36:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002a3a:	4259      	negs	r1, r3
 8002a3c:	4159      	adcs	r1, r3
 8002a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a42:	e7eb      	b.n	8002a1c <__swhatbuf_r+0x24>

08002a44 <__smakebuf_r>:
 8002a44:	898b      	ldrh	r3, [r1, #12]
 8002a46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002a48:	079d      	lsls	r5, r3, #30
 8002a4a:	4606      	mov	r6, r0
 8002a4c:	460c      	mov	r4, r1
 8002a4e:	d507      	bpl.n	8002a60 <__smakebuf_r+0x1c>
 8002a50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002a54:	6023      	str	r3, [r4, #0]
 8002a56:	6123      	str	r3, [r4, #16]
 8002a58:	2301      	movs	r3, #1
 8002a5a:	6163      	str	r3, [r4, #20]
 8002a5c:	b002      	add	sp, #8
 8002a5e:	bd70      	pop	{r4, r5, r6, pc}
 8002a60:	ab01      	add	r3, sp, #4
 8002a62:	466a      	mov	r2, sp
 8002a64:	f7ff ffc8 	bl	80029f8 <__swhatbuf_r>
 8002a68:	9900      	ldr	r1, [sp, #0]
 8002a6a:	4605      	mov	r5, r0
 8002a6c:	4630      	mov	r0, r6
 8002a6e:	f7ff fbed 	bl	800224c <_malloc_r>
 8002a72:	b948      	cbnz	r0, 8002a88 <__smakebuf_r+0x44>
 8002a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a78:	059a      	lsls	r2, r3, #22
 8002a7a:	d4ef      	bmi.n	8002a5c <__smakebuf_r+0x18>
 8002a7c:	f023 0303 	bic.w	r3, r3, #3
 8002a80:	f043 0302 	orr.w	r3, r3, #2
 8002a84:	81a3      	strh	r3, [r4, #12]
 8002a86:	e7e3      	b.n	8002a50 <__smakebuf_r+0xc>
 8002a88:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <__smakebuf_r+0x7c>)
 8002a8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8002a8c:	89a3      	ldrh	r3, [r4, #12]
 8002a8e:	6020      	str	r0, [r4, #0]
 8002a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a94:	81a3      	strh	r3, [r4, #12]
 8002a96:	9b00      	ldr	r3, [sp, #0]
 8002a98:	6163      	str	r3, [r4, #20]
 8002a9a:	9b01      	ldr	r3, [sp, #4]
 8002a9c:	6120      	str	r0, [r4, #16]
 8002a9e:	b15b      	cbz	r3, 8002ab8 <__smakebuf_r+0x74>
 8002aa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002aa4:	4630      	mov	r0, r6
 8002aa6:	f000 fa19 	bl	8002edc <_isatty_r>
 8002aaa:	b128      	cbz	r0, 8002ab8 <__smakebuf_r+0x74>
 8002aac:	89a3      	ldrh	r3, [r4, #12]
 8002aae:	f023 0303 	bic.w	r3, r3, #3
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	81a3      	strh	r3, [r4, #12]
 8002ab8:	89a3      	ldrh	r3, [r4, #12]
 8002aba:	431d      	orrs	r5, r3
 8002abc:	81a5      	strh	r5, [r4, #12]
 8002abe:	e7cd      	b.n	8002a5c <__smakebuf_r+0x18>
 8002ac0:	08002065 	.word	0x08002065

08002ac4 <__malloc_lock>:
 8002ac4:	4801      	ldr	r0, [pc, #4]	; (8002acc <__malloc_lock+0x8>)
 8002ac6:	f7ff bb9f 	b.w	8002208 <__retarget_lock_acquire_recursive>
 8002aca:	bf00      	nop
 8002acc:	2000017c 	.word	0x2000017c

08002ad0 <__malloc_unlock>:
 8002ad0:	4801      	ldr	r0, [pc, #4]	; (8002ad8 <__malloc_unlock+0x8>)
 8002ad2:	f7ff bb9a 	b.w	800220a <__retarget_lock_release_recursive>
 8002ad6:	bf00      	nop
 8002ad8:	2000017c 	.word	0x2000017c

08002adc <_free_r>:
 8002adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ade:	2900      	cmp	r1, #0
 8002ae0:	d044      	beq.n	8002b6c <_free_r+0x90>
 8002ae2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ae6:	9001      	str	r0, [sp, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f1a1 0404 	sub.w	r4, r1, #4
 8002aee:	bfb8      	it	lt
 8002af0:	18e4      	addlt	r4, r4, r3
 8002af2:	f7ff ffe7 	bl	8002ac4 <__malloc_lock>
 8002af6:	4a1e      	ldr	r2, [pc, #120]	; (8002b70 <_free_r+0x94>)
 8002af8:	9801      	ldr	r0, [sp, #4]
 8002afa:	6813      	ldr	r3, [r2, #0]
 8002afc:	b933      	cbnz	r3, 8002b0c <_free_r+0x30>
 8002afe:	6063      	str	r3, [r4, #4]
 8002b00:	6014      	str	r4, [r2, #0]
 8002b02:	b003      	add	sp, #12
 8002b04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b08:	f7ff bfe2 	b.w	8002ad0 <__malloc_unlock>
 8002b0c:	42a3      	cmp	r3, r4
 8002b0e:	d908      	bls.n	8002b22 <_free_r+0x46>
 8002b10:	6825      	ldr	r5, [r4, #0]
 8002b12:	1961      	adds	r1, r4, r5
 8002b14:	428b      	cmp	r3, r1
 8002b16:	bf01      	itttt	eq
 8002b18:	6819      	ldreq	r1, [r3, #0]
 8002b1a:	685b      	ldreq	r3, [r3, #4]
 8002b1c:	1949      	addeq	r1, r1, r5
 8002b1e:	6021      	streq	r1, [r4, #0]
 8002b20:	e7ed      	b.n	8002afe <_free_r+0x22>
 8002b22:	461a      	mov	r2, r3
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	b10b      	cbz	r3, 8002b2c <_free_r+0x50>
 8002b28:	42a3      	cmp	r3, r4
 8002b2a:	d9fa      	bls.n	8002b22 <_free_r+0x46>
 8002b2c:	6811      	ldr	r1, [r2, #0]
 8002b2e:	1855      	adds	r5, r2, r1
 8002b30:	42a5      	cmp	r5, r4
 8002b32:	d10b      	bne.n	8002b4c <_free_r+0x70>
 8002b34:	6824      	ldr	r4, [r4, #0]
 8002b36:	4421      	add	r1, r4
 8002b38:	1854      	adds	r4, r2, r1
 8002b3a:	42a3      	cmp	r3, r4
 8002b3c:	6011      	str	r1, [r2, #0]
 8002b3e:	d1e0      	bne.n	8002b02 <_free_r+0x26>
 8002b40:	681c      	ldr	r4, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	6053      	str	r3, [r2, #4]
 8002b46:	440c      	add	r4, r1
 8002b48:	6014      	str	r4, [r2, #0]
 8002b4a:	e7da      	b.n	8002b02 <_free_r+0x26>
 8002b4c:	d902      	bls.n	8002b54 <_free_r+0x78>
 8002b4e:	230c      	movs	r3, #12
 8002b50:	6003      	str	r3, [r0, #0]
 8002b52:	e7d6      	b.n	8002b02 <_free_r+0x26>
 8002b54:	6825      	ldr	r5, [r4, #0]
 8002b56:	1961      	adds	r1, r4, r5
 8002b58:	428b      	cmp	r3, r1
 8002b5a:	bf04      	itt	eq
 8002b5c:	6819      	ldreq	r1, [r3, #0]
 8002b5e:	685b      	ldreq	r3, [r3, #4]
 8002b60:	6063      	str	r3, [r4, #4]
 8002b62:	bf04      	itt	eq
 8002b64:	1949      	addeq	r1, r1, r5
 8002b66:	6021      	streq	r1, [r4, #0]
 8002b68:	6054      	str	r4, [r2, #4]
 8002b6a:	e7ca      	b.n	8002b02 <_free_r+0x26>
 8002b6c:	b003      	add	sp, #12
 8002b6e:	bd30      	pop	{r4, r5, pc}
 8002b70:	20000180 	.word	0x20000180

08002b74 <_printf_common>:
 8002b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b78:	4616      	mov	r6, r2
 8002b7a:	4699      	mov	r9, r3
 8002b7c:	688a      	ldr	r2, [r1, #8]
 8002b7e:	690b      	ldr	r3, [r1, #16]
 8002b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b84:	4293      	cmp	r3, r2
 8002b86:	bfb8      	it	lt
 8002b88:	4613      	movlt	r3, r2
 8002b8a:	6033      	str	r3, [r6, #0]
 8002b8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b90:	4607      	mov	r7, r0
 8002b92:	460c      	mov	r4, r1
 8002b94:	b10a      	cbz	r2, 8002b9a <_printf_common+0x26>
 8002b96:	3301      	adds	r3, #1
 8002b98:	6033      	str	r3, [r6, #0]
 8002b9a:	6823      	ldr	r3, [r4, #0]
 8002b9c:	0699      	lsls	r1, r3, #26
 8002b9e:	bf42      	ittt	mi
 8002ba0:	6833      	ldrmi	r3, [r6, #0]
 8002ba2:	3302      	addmi	r3, #2
 8002ba4:	6033      	strmi	r3, [r6, #0]
 8002ba6:	6825      	ldr	r5, [r4, #0]
 8002ba8:	f015 0506 	ands.w	r5, r5, #6
 8002bac:	d106      	bne.n	8002bbc <_printf_common+0x48>
 8002bae:	f104 0a19 	add.w	sl, r4, #25
 8002bb2:	68e3      	ldr	r3, [r4, #12]
 8002bb4:	6832      	ldr	r2, [r6, #0]
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	42ab      	cmp	r3, r5
 8002bba:	dc26      	bgt.n	8002c0a <_printf_common+0x96>
 8002bbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002bc0:	1e13      	subs	r3, r2, #0
 8002bc2:	6822      	ldr	r2, [r4, #0]
 8002bc4:	bf18      	it	ne
 8002bc6:	2301      	movne	r3, #1
 8002bc8:	0692      	lsls	r2, r2, #26
 8002bca:	d42b      	bmi.n	8002c24 <_printf_common+0xb0>
 8002bcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002bd0:	4649      	mov	r1, r9
 8002bd2:	4638      	mov	r0, r7
 8002bd4:	47c0      	blx	r8
 8002bd6:	3001      	adds	r0, #1
 8002bd8:	d01e      	beq.n	8002c18 <_printf_common+0xa4>
 8002bda:	6823      	ldr	r3, [r4, #0]
 8002bdc:	6922      	ldr	r2, [r4, #16]
 8002bde:	f003 0306 	and.w	r3, r3, #6
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	bf02      	ittt	eq
 8002be6:	68e5      	ldreq	r5, [r4, #12]
 8002be8:	6833      	ldreq	r3, [r6, #0]
 8002bea:	1aed      	subeq	r5, r5, r3
 8002bec:	68a3      	ldr	r3, [r4, #8]
 8002bee:	bf0c      	ite	eq
 8002bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bf4:	2500      	movne	r5, #0
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	bfc4      	itt	gt
 8002bfa:	1a9b      	subgt	r3, r3, r2
 8002bfc:	18ed      	addgt	r5, r5, r3
 8002bfe:	2600      	movs	r6, #0
 8002c00:	341a      	adds	r4, #26
 8002c02:	42b5      	cmp	r5, r6
 8002c04:	d11a      	bne.n	8002c3c <_printf_common+0xc8>
 8002c06:	2000      	movs	r0, #0
 8002c08:	e008      	b.n	8002c1c <_printf_common+0xa8>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	4652      	mov	r2, sl
 8002c0e:	4649      	mov	r1, r9
 8002c10:	4638      	mov	r0, r7
 8002c12:	47c0      	blx	r8
 8002c14:	3001      	adds	r0, #1
 8002c16:	d103      	bne.n	8002c20 <_printf_common+0xac>
 8002c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c20:	3501      	adds	r5, #1
 8002c22:	e7c6      	b.n	8002bb2 <_printf_common+0x3e>
 8002c24:	18e1      	adds	r1, r4, r3
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	2030      	movs	r0, #48	; 0x30
 8002c2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c2e:	4422      	add	r2, r4
 8002c30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c38:	3302      	adds	r3, #2
 8002c3a:	e7c7      	b.n	8002bcc <_printf_common+0x58>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	4622      	mov	r2, r4
 8002c40:	4649      	mov	r1, r9
 8002c42:	4638      	mov	r0, r7
 8002c44:	47c0      	blx	r8
 8002c46:	3001      	adds	r0, #1
 8002c48:	d0e6      	beq.n	8002c18 <_printf_common+0xa4>
 8002c4a:	3601      	adds	r6, #1
 8002c4c:	e7d9      	b.n	8002c02 <_printf_common+0x8e>
	...

08002c50 <_printf_i>:
 8002c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c54:	7e0f      	ldrb	r7, [r1, #24]
 8002c56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c58:	2f78      	cmp	r7, #120	; 0x78
 8002c5a:	4691      	mov	r9, r2
 8002c5c:	4680      	mov	r8, r0
 8002c5e:	460c      	mov	r4, r1
 8002c60:	469a      	mov	sl, r3
 8002c62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c66:	d807      	bhi.n	8002c78 <_printf_i+0x28>
 8002c68:	2f62      	cmp	r7, #98	; 0x62
 8002c6a:	d80a      	bhi.n	8002c82 <_printf_i+0x32>
 8002c6c:	2f00      	cmp	r7, #0
 8002c6e:	f000 80d4 	beq.w	8002e1a <_printf_i+0x1ca>
 8002c72:	2f58      	cmp	r7, #88	; 0x58
 8002c74:	f000 80c0 	beq.w	8002df8 <_printf_i+0x1a8>
 8002c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c80:	e03a      	b.n	8002cf8 <_printf_i+0xa8>
 8002c82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c86:	2b15      	cmp	r3, #21
 8002c88:	d8f6      	bhi.n	8002c78 <_printf_i+0x28>
 8002c8a:	a101      	add	r1, pc, #4	; (adr r1, 8002c90 <_printf_i+0x40>)
 8002c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c90:	08002ce9 	.word	0x08002ce9
 8002c94:	08002cfd 	.word	0x08002cfd
 8002c98:	08002c79 	.word	0x08002c79
 8002c9c:	08002c79 	.word	0x08002c79
 8002ca0:	08002c79 	.word	0x08002c79
 8002ca4:	08002c79 	.word	0x08002c79
 8002ca8:	08002cfd 	.word	0x08002cfd
 8002cac:	08002c79 	.word	0x08002c79
 8002cb0:	08002c79 	.word	0x08002c79
 8002cb4:	08002c79 	.word	0x08002c79
 8002cb8:	08002c79 	.word	0x08002c79
 8002cbc:	08002e01 	.word	0x08002e01
 8002cc0:	08002d29 	.word	0x08002d29
 8002cc4:	08002dbb 	.word	0x08002dbb
 8002cc8:	08002c79 	.word	0x08002c79
 8002ccc:	08002c79 	.word	0x08002c79
 8002cd0:	08002e23 	.word	0x08002e23
 8002cd4:	08002c79 	.word	0x08002c79
 8002cd8:	08002d29 	.word	0x08002d29
 8002cdc:	08002c79 	.word	0x08002c79
 8002ce0:	08002c79 	.word	0x08002c79
 8002ce4:	08002dc3 	.word	0x08002dc3
 8002ce8:	682b      	ldr	r3, [r5, #0]
 8002cea:	1d1a      	adds	r2, r3, #4
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	602a      	str	r2, [r5, #0]
 8002cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e09f      	b.n	8002e3c <_printf_i+0x1ec>
 8002cfc:	6820      	ldr	r0, [r4, #0]
 8002cfe:	682b      	ldr	r3, [r5, #0]
 8002d00:	0607      	lsls	r7, r0, #24
 8002d02:	f103 0104 	add.w	r1, r3, #4
 8002d06:	6029      	str	r1, [r5, #0]
 8002d08:	d501      	bpl.n	8002d0e <_printf_i+0xbe>
 8002d0a:	681e      	ldr	r6, [r3, #0]
 8002d0c:	e003      	b.n	8002d16 <_printf_i+0xc6>
 8002d0e:	0646      	lsls	r6, r0, #25
 8002d10:	d5fb      	bpl.n	8002d0a <_printf_i+0xba>
 8002d12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002d16:	2e00      	cmp	r6, #0
 8002d18:	da03      	bge.n	8002d22 <_printf_i+0xd2>
 8002d1a:	232d      	movs	r3, #45	; 0x2d
 8002d1c:	4276      	negs	r6, r6
 8002d1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d22:	485a      	ldr	r0, [pc, #360]	; (8002e8c <_printf_i+0x23c>)
 8002d24:	230a      	movs	r3, #10
 8002d26:	e012      	b.n	8002d4e <_printf_i+0xfe>
 8002d28:	682b      	ldr	r3, [r5, #0]
 8002d2a:	6820      	ldr	r0, [r4, #0]
 8002d2c:	1d19      	adds	r1, r3, #4
 8002d2e:	6029      	str	r1, [r5, #0]
 8002d30:	0605      	lsls	r5, r0, #24
 8002d32:	d501      	bpl.n	8002d38 <_printf_i+0xe8>
 8002d34:	681e      	ldr	r6, [r3, #0]
 8002d36:	e002      	b.n	8002d3e <_printf_i+0xee>
 8002d38:	0641      	lsls	r1, r0, #25
 8002d3a:	d5fb      	bpl.n	8002d34 <_printf_i+0xe4>
 8002d3c:	881e      	ldrh	r6, [r3, #0]
 8002d3e:	4853      	ldr	r0, [pc, #332]	; (8002e8c <_printf_i+0x23c>)
 8002d40:	2f6f      	cmp	r7, #111	; 0x6f
 8002d42:	bf0c      	ite	eq
 8002d44:	2308      	moveq	r3, #8
 8002d46:	230a      	movne	r3, #10
 8002d48:	2100      	movs	r1, #0
 8002d4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d4e:	6865      	ldr	r5, [r4, #4]
 8002d50:	60a5      	str	r5, [r4, #8]
 8002d52:	2d00      	cmp	r5, #0
 8002d54:	bfa2      	ittt	ge
 8002d56:	6821      	ldrge	r1, [r4, #0]
 8002d58:	f021 0104 	bicge.w	r1, r1, #4
 8002d5c:	6021      	strge	r1, [r4, #0]
 8002d5e:	b90e      	cbnz	r6, 8002d64 <_printf_i+0x114>
 8002d60:	2d00      	cmp	r5, #0
 8002d62:	d04b      	beq.n	8002dfc <_printf_i+0x1ac>
 8002d64:	4615      	mov	r5, r2
 8002d66:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d6a:	fb03 6711 	mls	r7, r3, r1, r6
 8002d6e:	5dc7      	ldrb	r7, [r0, r7]
 8002d70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d74:	4637      	mov	r7, r6
 8002d76:	42bb      	cmp	r3, r7
 8002d78:	460e      	mov	r6, r1
 8002d7a:	d9f4      	bls.n	8002d66 <_printf_i+0x116>
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d10b      	bne.n	8002d98 <_printf_i+0x148>
 8002d80:	6823      	ldr	r3, [r4, #0]
 8002d82:	07de      	lsls	r6, r3, #31
 8002d84:	d508      	bpl.n	8002d98 <_printf_i+0x148>
 8002d86:	6923      	ldr	r3, [r4, #16]
 8002d88:	6861      	ldr	r1, [r4, #4]
 8002d8a:	4299      	cmp	r1, r3
 8002d8c:	bfde      	ittt	le
 8002d8e:	2330      	movle	r3, #48	; 0x30
 8002d90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d94:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002d98:	1b52      	subs	r2, r2, r5
 8002d9a:	6122      	str	r2, [r4, #16]
 8002d9c:	f8cd a000 	str.w	sl, [sp]
 8002da0:	464b      	mov	r3, r9
 8002da2:	aa03      	add	r2, sp, #12
 8002da4:	4621      	mov	r1, r4
 8002da6:	4640      	mov	r0, r8
 8002da8:	f7ff fee4 	bl	8002b74 <_printf_common>
 8002dac:	3001      	adds	r0, #1
 8002dae:	d14a      	bne.n	8002e46 <_printf_i+0x1f6>
 8002db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002db4:	b004      	add	sp, #16
 8002db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dba:	6823      	ldr	r3, [r4, #0]
 8002dbc:	f043 0320 	orr.w	r3, r3, #32
 8002dc0:	6023      	str	r3, [r4, #0]
 8002dc2:	4833      	ldr	r0, [pc, #204]	; (8002e90 <_printf_i+0x240>)
 8002dc4:	2778      	movs	r7, #120	; 0x78
 8002dc6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002dca:	6823      	ldr	r3, [r4, #0]
 8002dcc:	6829      	ldr	r1, [r5, #0]
 8002dce:	061f      	lsls	r7, r3, #24
 8002dd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8002dd4:	d402      	bmi.n	8002ddc <_printf_i+0x18c>
 8002dd6:	065f      	lsls	r7, r3, #25
 8002dd8:	bf48      	it	mi
 8002dda:	b2b6      	uxthmi	r6, r6
 8002ddc:	07df      	lsls	r7, r3, #31
 8002dde:	bf48      	it	mi
 8002de0:	f043 0320 	orrmi.w	r3, r3, #32
 8002de4:	6029      	str	r1, [r5, #0]
 8002de6:	bf48      	it	mi
 8002de8:	6023      	strmi	r3, [r4, #0]
 8002dea:	b91e      	cbnz	r6, 8002df4 <_printf_i+0x1a4>
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	f023 0320 	bic.w	r3, r3, #32
 8002df2:	6023      	str	r3, [r4, #0]
 8002df4:	2310      	movs	r3, #16
 8002df6:	e7a7      	b.n	8002d48 <_printf_i+0xf8>
 8002df8:	4824      	ldr	r0, [pc, #144]	; (8002e8c <_printf_i+0x23c>)
 8002dfa:	e7e4      	b.n	8002dc6 <_printf_i+0x176>
 8002dfc:	4615      	mov	r5, r2
 8002dfe:	e7bd      	b.n	8002d7c <_printf_i+0x12c>
 8002e00:	682b      	ldr	r3, [r5, #0]
 8002e02:	6826      	ldr	r6, [r4, #0]
 8002e04:	6961      	ldr	r1, [r4, #20]
 8002e06:	1d18      	adds	r0, r3, #4
 8002e08:	6028      	str	r0, [r5, #0]
 8002e0a:	0635      	lsls	r5, r6, #24
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	d501      	bpl.n	8002e14 <_printf_i+0x1c4>
 8002e10:	6019      	str	r1, [r3, #0]
 8002e12:	e002      	b.n	8002e1a <_printf_i+0x1ca>
 8002e14:	0670      	lsls	r0, r6, #25
 8002e16:	d5fb      	bpl.n	8002e10 <_printf_i+0x1c0>
 8002e18:	8019      	strh	r1, [r3, #0]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	6123      	str	r3, [r4, #16]
 8002e1e:	4615      	mov	r5, r2
 8002e20:	e7bc      	b.n	8002d9c <_printf_i+0x14c>
 8002e22:	682b      	ldr	r3, [r5, #0]
 8002e24:	1d1a      	adds	r2, r3, #4
 8002e26:	602a      	str	r2, [r5, #0]
 8002e28:	681d      	ldr	r5, [r3, #0]
 8002e2a:	6862      	ldr	r2, [r4, #4]
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	4628      	mov	r0, r5
 8002e30:	f7fd f9ce 	bl	80001d0 <memchr>
 8002e34:	b108      	cbz	r0, 8002e3a <_printf_i+0x1ea>
 8002e36:	1b40      	subs	r0, r0, r5
 8002e38:	6060      	str	r0, [r4, #4]
 8002e3a:	6863      	ldr	r3, [r4, #4]
 8002e3c:	6123      	str	r3, [r4, #16]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e44:	e7aa      	b.n	8002d9c <_printf_i+0x14c>
 8002e46:	6923      	ldr	r3, [r4, #16]
 8002e48:	462a      	mov	r2, r5
 8002e4a:	4649      	mov	r1, r9
 8002e4c:	4640      	mov	r0, r8
 8002e4e:	47d0      	blx	sl
 8002e50:	3001      	adds	r0, #1
 8002e52:	d0ad      	beq.n	8002db0 <_printf_i+0x160>
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	079b      	lsls	r3, r3, #30
 8002e58:	d413      	bmi.n	8002e82 <_printf_i+0x232>
 8002e5a:	68e0      	ldr	r0, [r4, #12]
 8002e5c:	9b03      	ldr	r3, [sp, #12]
 8002e5e:	4298      	cmp	r0, r3
 8002e60:	bfb8      	it	lt
 8002e62:	4618      	movlt	r0, r3
 8002e64:	e7a6      	b.n	8002db4 <_printf_i+0x164>
 8002e66:	2301      	movs	r3, #1
 8002e68:	4632      	mov	r2, r6
 8002e6a:	4649      	mov	r1, r9
 8002e6c:	4640      	mov	r0, r8
 8002e6e:	47d0      	blx	sl
 8002e70:	3001      	adds	r0, #1
 8002e72:	d09d      	beq.n	8002db0 <_printf_i+0x160>
 8002e74:	3501      	adds	r5, #1
 8002e76:	68e3      	ldr	r3, [r4, #12]
 8002e78:	9903      	ldr	r1, [sp, #12]
 8002e7a:	1a5b      	subs	r3, r3, r1
 8002e7c:	42ab      	cmp	r3, r5
 8002e7e:	dcf2      	bgt.n	8002e66 <_printf_i+0x216>
 8002e80:	e7eb      	b.n	8002e5a <_printf_i+0x20a>
 8002e82:	2500      	movs	r5, #0
 8002e84:	f104 0619 	add.w	r6, r4, #25
 8002e88:	e7f5      	b.n	8002e76 <_printf_i+0x226>
 8002e8a:	bf00      	nop
 8002e8c:	08003241 	.word	0x08003241
 8002e90:	08003252 	.word	0x08003252

08002e94 <_read_r>:
 8002e94:	b538      	push	{r3, r4, r5, lr}
 8002e96:	4d07      	ldr	r5, [pc, #28]	; (8002eb4 <_read_r+0x20>)
 8002e98:	4604      	mov	r4, r0
 8002e9a:	4608      	mov	r0, r1
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	602a      	str	r2, [r5, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f7fd fca9 	bl	80007fa <_read>
 8002ea8:	1c43      	adds	r3, r0, #1
 8002eaa:	d102      	bne.n	8002eb2 <_read_r+0x1e>
 8002eac:	682b      	ldr	r3, [r5, #0]
 8002eae:	b103      	cbz	r3, 8002eb2 <_read_r+0x1e>
 8002eb0:	6023      	str	r3, [r4, #0]
 8002eb2:	bd38      	pop	{r3, r4, r5, pc}
 8002eb4:	20000188 	.word	0x20000188

08002eb8 <_fstat_r>:
 8002eb8:	b538      	push	{r3, r4, r5, lr}
 8002eba:	4d07      	ldr	r5, [pc, #28]	; (8002ed8 <_fstat_r+0x20>)
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	4608      	mov	r0, r1
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	602b      	str	r3, [r5, #0]
 8002ec6:	f7fd fcdd 	bl	8000884 <_fstat>
 8002eca:	1c43      	adds	r3, r0, #1
 8002ecc:	d102      	bne.n	8002ed4 <_fstat_r+0x1c>
 8002ece:	682b      	ldr	r3, [r5, #0]
 8002ed0:	b103      	cbz	r3, 8002ed4 <_fstat_r+0x1c>
 8002ed2:	6023      	str	r3, [r4, #0]
 8002ed4:	bd38      	pop	{r3, r4, r5, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000188 	.word	0x20000188

08002edc <_isatty_r>:
 8002edc:	b538      	push	{r3, r4, r5, lr}
 8002ede:	4d06      	ldr	r5, [pc, #24]	; (8002ef8 <_isatty_r+0x1c>)
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	4608      	mov	r0, r1
 8002ee6:	602b      	str	r3, [r5, #0]
 8002ee8:	f7fd fcdc 	bl	80008a4 <_isatty>
 8002eec:	1c43      	adds	r3, r0, #1
 8002eee:	d102      	bne.n	8002ef6 <_isatty_r+0x1a>
 8002ef0:	682b      	ldr	r3, [r5, #0]
 8002ef2:	b103      	cbz	r3, 8002ef6 <_isatty_r+0x1a>
 8002ef4:	6023      	str	r3, [r4, #0]
 8002ef6:	bd38      	pop	{r3, r4, r5, pc}
 8002ef8:	20000188 	.word	0x20000188

08002efc <__udivmoddi4>:
 8002efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f00:	4686      	mov	lr, r0
 8002f02:	468c      	mov	ip, r1
 8002f04:	4608      	mov	r0, r1
 8002f06:	9e08      	ldr	r6, [sp, #32]
 8002f08:	4615      	mov	r5, r2
 8002f0a:	4674      	mov	r4, lr
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f040 80c2 	bne.w	8003098 <__udivmoddi4+0x19c>
 8002f14:	4285      	cmp	r5, r0
 8002f16:	fab2 f282 	clz	r2, r2
 8002f1a:	d945      	bls.n	8002fa8 <__udivmoddi4+0xac>
 8002f1c:	b14a      	cbz	r2, 8002f32 <__udivmoddi4+0x36>
 8002f1e:	f1c2 0320 	rsb	r3, r2, #32
 8002f22:	fa00 fc02 	lsl.w	ip, r0, r2
 8002f26:	fa2e f303 	lsr.w	r3, lr, r3
 8002f2a:	4095      	lsls	r5, r2
 8002f2c:	ea43 0c0c 	orr.w	ip, r3, ip
 8002f30:	4094      	lsls	r4, r2
 8002f32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8002f36:	b2a8      	uxth	r0, r5
 8002f38:	fbbc f8fe 	udiv	r8, ip, lr
 8002f3c:	0c23      	lsrs	r3, r4, #16
 8002f3e:	fb0e cc18 	mls	ip, lr, r8, ip
 8002f42:	fb08 f900 	mul.w	r9, r8, r0
 8002f46:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8002f4a:	4599      	cmp	r9, r3
 8002f4c:	d928      	bls.n	8002fa0 <__udivmoddi4+0xa4>
 8002f4e:	18eb      	adds	r3, r5, r3
 8002f50:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8002f54:	d204      	bcs.n	8002f60 <__udivmoddi4+0x64>
 8002f56:	4599      	cmp	r9, r3
 8002f58:	d902      	bls.n	8002f60 <__udivmoddi4+0x64>
 8002f5a:	f1a8 0702 	sub.w	r7, r8, #2
 8002f5e:	442b      	add	r3, r5
 8002f60:	eba3 0309 	sub.w	r3, r3, r9
 8002f64:	b2a4      	uxth	r4, r4
 8002f66:	fbb3 fcfe 	udiv	ip, r3, lr
 8002f6a:	fb0e 331c 	mls	r3, lr, ip, r3
 8002f6e:	fb0c f000 	mul.w	r0, ip, r0
 8002f72:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002f76:	42a0      	cmp	r0, r4
 8002f78:	d914      	bls.n	8002fa4 <__udivmoddi4+0xa8>
 8002f7a:	192c      	adds	r4, r5, r4
 8002f7c:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8002f80:	d204      	bcs.n	8002f8c <__udivmoddi4+0x90>
 8002f82:	42a0      	cmp	r0, r4
 8002f84:	d902      	bls.n	8002f8c <__udivmoddi4+0x90>
 8002f86:	f1ac 0302 	sub.w	r3, ip, #2
 8002f8a:	442c      	add	r4, r5
 8002f8c:	1a24      	subs	r4, r4, r0
 8002f8e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 8002f92:	b11e      	cbz	r6, 8002f9c <__udivmoddi4+0xa0>
 8002f94:	40d4      	lsrs	r4, r2
 8002f96:	2300      	movs	r3, #0
 8002f98:	6034      	str	r4, [r6, #0]
 8002f9a:	6073      	str	r3, [r6, #4]
 8002f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fa0:	4647      	mov	r7, r8
 8002fa2:	e7dd      	b.n	8002f60 <__udivmoddi4+0x64>
 8002fa4:	4663      	mov	r3, ip
 8002fa6:	e7f1      	b.n	8002f8c <__udivmoddi4+0x90>
 8002fa8:	bb92      	cbnz	r2, 8003010 <__udivmoddi4+0x114>
 8002faa:	1b43      	subs	r3, r0, r5
 8002fac:	2101      	movs	r1, #1
 8002fae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8002fb2:	b2af      	uxth	r7, r5
 8002fb4:	fbb3 fcfe 	udiv	ip, r3, lr
 8002fb8:	0c20      	lsrs	r0, r4, #16
 8002fba:	fb0e 331c 	mls	r3, lr, ip, r3
 8002fbe:	fb0c f807 	mul.w	r8, ip, r7
 8002fc2:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8002fc6:	4598      	cmp	r8, r3
 8002fc8:	d962      	bls.n	8003090 <__udivmoddi4+0x194>
 8002fca:	18eb      	adds	r3, r5, r3
 8002fcc:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8002fd0:	d204      	bcs.n	8002fdc <__udivmoddi4+0xe0>
 8002fd2:	4598      	cmp	r8, r3
 8002fd4:	d902      	bls.n	8002fdc <__udivmoddi4+0xe0>
 8002fd6:	f1ac 0002 	sub.w	r0, ip, #2
 8002fda:	442b      	add	r3, r5
 8002fdc:	eba3 0308 	sub.w	r3, r3, r8
 8002fe0:	b2a4      	uxth	r4, r4
 8002fe2:	fbb3 fcfe 	udiv	ip, r3, lr
 8002fe6:	fb0e 331c 	mls	r3, lr, ip, r3
 8002fea:	fb0c f707 	mul.w	r7, ip, r7
 8002fee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002ff2:	42a7      	cmp	r7, r4
 8002ff4:	d94e      	bls.n	8003094 <__udivmoddi4+0x198>
 8002ff6:	192c      	adds	r4, r5, r4
 8002ff8:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8002ffc:	d204      	bcs.n	8003008 <__udivmoddi4+0x10c>
 8002ffe:	42a7      	cmp	r7, r4
 8003000:	d902      	bls.n	8003008 <__udivmoddi4+0x10c>
 8003002:	f1ac 0302 	sub.w	r3, ip, #2
 8003006:	442c      	add	r4, r5
 8003008:	1be4      	subs	r4, r4, r7
 800300a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800300e:	e7c0      	b.n	8002f92 <__udivmoddi4+0x96>
 8003010:	f1c2 0320 	rsb	r3, r2, #32
 8003014:	fa20 f103 	lsr.w	r1, r0, r3
 8003018:	4095      	lsls	r5, r2
 800301a:	4090      	lsls	r0, r2
 800301c:	fa2e f303 	lsr.w	r3, lr, r3
 8003020:	4303      	orrs	r3, r0
 8003022:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8003026:	b2af      	uxth	r7, r5
 8003028:	fbb1 fcfe 	udiv	ip, r1, lr
 800302c:	fb0e 101c 	mls	r0, lr, ip, r1
 8003030:	0c19      	lsrs	r1, r3, #16
 8003032:	fb0c f807 	mul.w	r8, ip, r7
 8003036:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800303a:	4588      	cmp	r8, r1
 800303c:	fa04 f402 	lsl.w	r4, r4, r2
 8003040:	d922      	bls.n	8003088 <__udivmoddi4+0x18c>
 8003042:	1869      	adds	r1, r5, r1
 8003044:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8003048:	d204      	bcs.n	8003054 <__udivmoddi4+0x158>
 800304a:	4588      	cmp	r8, r1
 800304c:	d902      	bls.n	8003054 <__udivmoddi4+0x158>
 800304e:	f1ac 0002 	sub.w	r0, ip, #2
 8003052:	4429      	add	r1, r5
 8003054:	eba1 0108 	sub.w	r1, r1, r8
 8003058:	b29b      	uxth	r3, r3
 800305a:	fbb1 fcfe 	udiv	ip, r1, lr
 800305e:	fb0e 111c 	mls	r1, lr, ip, r1
 8003062:	fb0c f707 	mul.w	r7, ip, r7
 8003066:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800306a:	429f      	cmp	r7, r3
 800306c:	d90e      	bls.n	800308c <__udivmoddi4+0x190>
 800306e:	18eb      	adds	r3, r5, r3
 8003070:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8003074:	d204      	bcs.n	8003080 <__udivmoddi4+0x184>
 8003076:	429f      	cmp	r7, r3
 8003078:	d902      	bls.n	8003080 <__udivmoddi4+0x184>
 800307a:	f1ac 0102 	sub.w	r1, ip, #2
 800307e:	442b      	add	r3, r5
 8003080:	1bdb      	subs	r3, r3, r7
 8003082:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8003086:	e792      	b.n	8002fae <__udivmoddi4+0xb2>
 8003088:	4660      	mov	r0, ip
 800308a:	e7e3      	b.n	8003054 <__udivmoddi4+0x158>
 800308c:	4661      	mov	r1, ip
 800308e:	e7f7      	b.n	8003080 <__udivmoddi4+0x184>
 8003090:	4660      	mov	r0, ip
 8003092:	e7a3      	b.n	8002fdc <__udivmoddi4+0xe0>
 8003094:	4663      	mov	r3, ip
 8003096:	e7b7      	b.n	8003008 <__udivmoddi4+0x10c>
 8003098:	4283      	cmp	r3, r0
 800309a:	d906      	bls.n	80030aa <__udivmoddi4+0x1ae>
 800309c:	b916      	cbnz	r6, 80030a4 <__udivmoddi4+0x1a8>
 800309e:	2100      	movs	r1, #0
 80030a0:	4608      	mov	r0, r1
 80030a2:	e77b      	b.n	8002f9c <__udivmoddi4+0xa0>
 80030a4:	e9c6 e000 	strd	lr, r0, [r6]
 80030a8:	e7f9      	b.n	800309e <__udivmoddi4+0x1a2>
 80030aa:	fab3 f783 	clz	r7, r3
 80030ae:	b98f      	cbnz	r7, 80030d4 <__udivmoddi4+0x1d8>
 80030b0:	4283      	cmp	r3, r0
 80030b2:	d301      	bcc.n	80030b8 <__udivmoddi4+0x1bc>
 80030b4:	4572      	cmp	r2, lr
 80030b6:	d808      	bhi.n	80030ca <__udivmoddi4+0x1ce>
 80030b8:	ebbe 0402 	subs.w	r4, lr, r2
 80030bc:	eb60 0303 	sbc.w	r3, r0, r3
 80030c0:	2001      	movs	r0, #1
 80030c2:	469c      	mov	ip, r3
 80030c4:	b91e      	cbnz	r6, 80030ce <__udivmoddi4+0x1d2>
 80030c6:	2100      	movs	r1, #0
 80030c8:	e768      	b.n	8002f9c <__udivmoddi4+0xa0>
 80030ca:	4638      	mov	r0, r7
 80030cc:	e7fa      	b.n	80030c4 <__udivmoddi4+0x1c8>
 80030ce:	e9c6 4c00 	strd	r4, ip, [r6]
 80030d2:	e7f8      	b.n	80030c6 <__udivmoddi4+0x1ca>
 80030d4:	f1c7 0c20 	rsb	ip, r7, #32
 80030d8:	40bb      	lsls	r3, r7
 80030da:	fa22 f40c 	lsr.w	r4, r2, ip
 80030de:	431c      	orrs	r4, r3
 80030e0:	fa2e f10c 	lsr.w	r1, lr, ip
 80030e4:	fa20 f30c 	lsr.w	r3, r0, ip
 80030e8:	40b8      	lsls	r0, r7
 80030ea:	4301      	orrs	r1, r0
 80030ec:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80030f0:	fa0e f507 	lsl.w	r5, lr, r7
 80030f4:	fbb3 f8f9 	udiv	r8, r3, r9
 80030f8:	fa1f fe84 	uxth.w	lr, r4
 80030fc:	fb09 3018 	mls	r0, r9, r8, r3
 8003100:	0c0b      	lsrs	r3, r1, #16
 8003102:	fb08 fa0e 	mul.w	sl, r8, lr
 8003106:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800310a:	459a      	cmp	sl, r3
 800310c:	fa02 f207 	lsl.w	r2, r2, r7
 8003110:	d940      	bls.n	8003194 <__udivmoddi4+0x298>
 8003112:	18e3      	adds	r3, r4, r3
 8003114:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8003118:	d204      	bcs.n	8003124 <__udivmoddi4+0x228>
 800311a:	459a      	cmp	sl, r3
 800311c:	d902      	bls.n	8003124 <__udivmoddi4+0x228>
 800311e:	f1a8 0002 	sub.w	r0, r8, #2
 8003122:	4423      	add	r3, r4
 8003124:	eba3 030a 	sub.w	r3, r3, sl
 8003128:	b289      	uxth	r1, r1
 800312a:	fbb3 f8f9 	udiv	r8, r3, r9
 800312e:	fb09 3318 	mls	r3, r9, r8, r3
 8003132:	fb08 fe0e 	mul.w	lr, r8, lr
 8003136:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800313a:	458e      	cmp	lr, r1
 800313c:	d92c      	bls.n	8003198 <__udivmoddi4+0x29c>
 800313e:	1861      	adds	r1, r4, r1
 8003140:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8003144:	d204      	bcs.n	8003150 <__udivmoddi4+0x254>
 8003146:	458e      	cmp	lr, r1
 8003148:	d902      	bls.n	8003150 <__udivmoddi4+0x254>
 800314a:	f1a8 0302 	sub.w	r3, r8, #2
 800314e:	4421      	add	r1, r4
 8003150:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8003154:	fba0 9802 	umull	r9, r8, r0, r2
 8003158:	eba1 010e 	sub.w	r1, r1, lr
 800315c:	4541      	cmp	r1, r8
 800315e:	46ce      	mov	lr, r9
 8003160:	4643      	mov	r3, r8
 8003162:	d302      	bcc.n	800316a <__udivmoddi4+0x26e>
 8003164:	d106      	bne.n	8003174 <__udivmoddi4+0x278>
 8003166:	454d      	cmp	r5, r9
 8003168:	d204      	bcs.n	8003174 <__udivmoddi4+0x278>
 800316a:	ebb9 0e02 	subs.w	lr, r9, r2
 800316e:	eb68 0304 	sbc.w	r3, r8, r4
 8003172:	3801      	subs	r0, #1
 8003174:	2e00      	cmp	r6, #0
 8003176:	d0a6      	beq.n	80030c6 <__udivmoddi4+0x1ca>
 8003178:	ebb5 020e 	subs.w	r2, r5, lr
 800317c:	eb61 0103 	sbc.w	r1, r1, r3
 8003180:	fa01 fc0c 	lsl.w	ip, r1, ip
 8003184:	fa22 f307 	lsr.w	r3, r2, r7
 8003188:	ea4c 0303 	orr.w	r3, ip, r3
 800318c:	40f9      	lsrs	r1, r7
 800318e:	e9c6 3100 	strd	r3, r1, [r6]
 8003192:	e798      	b.n	80030c6 <__udivmoddi4+0x1ca>
 8003194:	4640      	mov	r0, r8
 8003196:	e7c5      	b.n	8003124 <__udivmoddi4+0x228>
 8003198:	4643      	mov	r3, r8
 800319a:	e7d9      	b.n	8003150 <__udivmoddi4+0x254>

0800319c <_init>:
 800319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319e:	bf00      	nop
 80031a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a2:	bc08      	pop	{r3}
 80031a4:	469e      	mov	lr, r3
 80031a6:	4770      	bx	lr

080031a8 <_fini>:
 80031a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031aa:	bf00      	nop
 80031ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ae:	bc08      	pop	{r3}
 80031b0:	469e      	mov	lr, r3
 80031b2:	4770      	bx	lr
