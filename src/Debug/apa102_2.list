
apa102_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026b0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002874  08002874  00012874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800288c  0800288c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800288c  0800288c  0001288c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002894  08002894  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002894  08002894  00012894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002898  08002898  00012898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800289c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  080028a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080028a8  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa26  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce5  00000000  00000000  0002aa62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0002c748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000767  00000000  00000000  0002d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207df  00000000  00000000  0002d82f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009cd1  00000000  00000000  0004e00e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6ac2  00000000  00000000  00057cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000003c  00000000  00000000  0011e7a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023e0  00000000  00000000  0011e7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000fc  00000000  00000000  00120bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 000007f3  00000000  00000000  00120cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001d8:	f000 b80c 	b.w	80001f4 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f002 f9ea 	bl	80025bc <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_idiv0>:
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800285c 	.word	0x0800285c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800285c 	.word	0x0800285c

08000238 <DigiLed_init>:

/**
 *  @brief Initialize digital led class
 */
void DigiLed_init(SPI_HandleTypeDef *hspi)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
	_frameModified = TRUE; 		// Initial set to true to force update after initialization of frame buffer
 8000240:	4b1b      	ldr	r3, [pc, #108]	; (80002b0 <DigiLed_init+0x78>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]

	_spiHandler = hspi;			// SPI handler is given to library
 8000246:	4a1b      	ldr	r2, [pc, #108]	; (80002b4 <DigiLed_init+0x7c>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	6013      	str	r3, [r2, #0]

	// TODO Auto-generated constructor stub

	for (int led = 0; led < LED_FRAME_SIZE; led++)
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]
 8000250:	e023      	b.n	800029a <DigiLed_init+0x62>
	{
		_digitalLedframe[led].FieldsIn.INIT = 0x07; // Set MSB first 3 bits to identify start of LED packet
 8000252:	4a19      	ldr	r2, [pc, #100]	; (80002b8 <DigiLed_init+0x80>)
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	4413      	add	r3, r2
 800025a:	78da      	ldrb	r2, [r3, #3]
 800025c:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8000260:	70da      	strb	r2, [r3, #3]
		_digitalLedframe[led].FieldsIn.GLOBAL = 0x00; // Switch off LED global
 8000262:	4a15      	ldr	r2, [pc, #84]	; (80002b8 <DigiLed_init+0x80>)
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	009b      	lsls	r3, r3, #2
 8000268:	4413      	add	r3, r2
 800026a:	78da      	ldrb	r2, [r3, #3]
 800026c:	f36f 0204 	bfc	r2, #0, #5
 8000270:	70da      	strb	r2, [r3, #3]
		_digitalLedframe[led].FieldsIn.BLUE = 0x00;
 8000272:	4a11      	ldr	r2, [pc, #68]	; (80002b8 <DigiLed_init+0x80>)
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	009b      	lsls	r3, r3, #2
 8000278:	4413      	add	r3, r2
 800027a:	2200      	movs	r2, #0
 800027c:	709a      	strb	r2, [r3, #2]
		_digitalLedframe[led].FieldsIn.GREEN = 0x00;
 800027e:	4a0e      	ldr	r2, [pc, #56]	; (80002b8 <DigiLed_init+0x80>)
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	4413      	add	r3, r2
 8000286:	2200      	movs	r2, #0
 8000288:	705a      	strb	r2, [r3, #1]
		_digitalLedframe[led].FieldsIn.RED = 0x00;
 800028a:	4a0b      	ldr	r2, [pc, #44]	; (80002b8 <DigiLed_init+0x80>)
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	2100      	movs	r1, #0
 8000290:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	for (int led = 0; led < LED_FRAME_SIZE; led++)
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	3301      	adds	r3, #1
 8000298:	60fb      	str	r3, [r7, #12]
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	2b06      	cmp	r3, #6
 800029e:	ddd8      	ble.n	8000252 <DigiLed_init+0x1a>
	}
	DigiLed_update(FALSE); // Update frame buffer using the value of _frameModified as set in initialiser.
 80002a0:	2000      	movs	r0, #0
 80002a2:	f000 f847 	bl	8000334 <DigiLed_update>
}
 80002a6:	bf00      	nop
 80002a8:	3710      	adds	r7, #16
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000068 	.word	0x20000068
 80002b4:	2000006c 	.word	0x2000006c
 80002b8:	20000028 	.word	0x20000028

080002bc <DigiLed_setRGB>:
 * Colors can be set using defines from "APA102_colors.h"
 * @param led position of the led in the string
 * @param rgb color of led in RGB color scheme
 */
void DigiLed_setRGB(uint8_t led, uint32_t rgb)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	6039      	str	r1, [r7, #0]
 80002c6:	71fb      	strb	r3, [r7, #7]
	_digitalLedframe[led].FieldsIn.INIT = 0x7;
 80002c8:	79fb      	ldrb	r3, [r7, #7]
 80002ca:	4a18      	ldr	r2, [pc, #96]	; (800032c <DigiLed_setRGB+0x70>)
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	4413      	add	r3, r2
 80002d0:	78da      	ldrb	r2, [r3, #3]
 80002d2:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80002d6:	70da      	strb	r2, [r3, #3]
	_digitalLedframe[led].FieldsIn.GLOBAL = 0x1F;
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	4a14      	ldr	r2, [pc, #80]	; (800032c <DigiLed_setRGB+0x70>)
 80002dc:	009b      	lsls	r3, r3, #2
 80002de:	4413      	add	r3, r2
 80002e0:	78da      	ldrb	r2, [r3, #3]
 80002e2:	f042 021f 	orr.w	r2, r2, #31
 80002e6:	70da      	strb	r2, [r3, #3]
	_digitalLedframe[led].FieldsIn.BLUE = (uint8_t)(rgb);
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	683a      	ldr	r2, [r7, #0]
 80002ec:	b2d1      	uxtb	r1, r2
 80002ee:	4a0f      	ldr	r2, [pc, #60]	; (800032c <DigiLed_setRGB+0x70>)
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	4413      	add	r3, r2
 80002f4:	460a      	mov	r2, r1
 80002f6:	709a      	strb	r2, [r3, #2]
	_digitalLedframe[led].FieldsIn.GREEN = (uint8_t)(rgb >> 8);
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	0a1a      	lsrs	r2, r3, #8
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	b2d1      	uxtb	r1, r2
 8000300:	4a0a      	ldr	r2, [pc, #40]	; (800032c <DigiLed_setRGB+0x70>)
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	4413      	add	r3, r2
 8000306:	460a      	mov	r2, r1
 8000308:	705a      	strb	r2, [r3, #1]
	_digitalLedframe[led].FieldsIn.RED = (uint8_t)(rgb >> 16);
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	0c1a      	lsrs	r2, r3, #16
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	b2d1      	uxtb	r1, r2
 8000312:	4a06      	ldr	r2, [pc, #24]	; (800032c <DigiLed_setRGB+0x70>)
 8000314:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	_frameModified = TRUE;
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <DigiLed_setRGB+0x74>)
 800031a:	2201      	movs	r2, #1
 800031c:	701a      	strb	r2, [r3, #0]
}
 800031e:	bf00      	nop
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	20000028 	.word	0x20000028
 8000330:	20000068 	.word	0x20000068

08000334 <DigiLed_update>:
/**
 * @brief update led string
 * @param set true to force update leds and false to update only when frame is modified
 */
void DigiLed_update(uint8_t forceUpdate)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b086      	sub	sp, #24
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]
	if(_frameModified | forceUpdate)
 800033e:	4b31      	ldr	r3, [pc, #196]	; (8000404 <DigiLed_update+0xd0>)
 8000340:	781a      	ldrb	r2, [r3, #0]
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	4313      	orrs	r3, r2
 8000346:	b2db      	uxtb	r3, r3
 8000348:	2b00      	cmp	r3, #0
 800034a:	d053      	beq.n	80003f4 <DigiLed_update+0xc0>
	{
		// add start of frame (0x00000000)
		for(int i = 0; i < LED_START_FRAME_SIZE; i++)
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	e007      	b.n	8000362 <DigiLed_update+0x2e>
		{
			SpiSendFrame[i] = 0x00;
 8000352:	4a2d      	ldr	r2, [pc, #180]	; (8000408 <DigiLed_update+0xd4>)
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	4413      	add	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < LED_START_FRAME_SIZE; i++)
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	3301      	adds	r3, #1
 8000360:	617b      	str	r3, [r7, #20]
 8000362:	697b      	ldr	r3, [r7, #20]
 8000364:	2b03      	cmp	r3, #3
 8000366:	ddf4      	ble.n	8000352 <DigiLed_update+0x1e>
		}

		// add all LED packets of the frame
		uint32_t SpiDataPacket = 0;
 8000368:	2300      	movs	r3, #0
 800036a:	613b      	str	r3, [r7, #16]
		for (uint32_t led = 0; led < LED_FRAME_SIZE; led++)
 800036c:	2300      	movs	r3, #0
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	e028      	b.n	80003c4 <DigiLed_update+0x90>
		{
			SpiSendFrame[LED_START_FRAME_SIZE + SpiDataPacket + 0] = _digitalLedframe[led].FieldsOut.CMD;		// Add INIT and GLOBAL to SPI send frame
 8000372:	693b      	ldr	r3, [r7, #16]
 8000374:	1d1a      	adds	r2, r3, #4
 8000376:	4925      	ldr	r1, [pc, #148]	; (800040c <DigiLed_update+0xd8>)
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	440b      	add	r3, r1
 800037e:	78d9      	ldrb	r1, [r3, #3]
 8000380:	4b21      	ldr	r3, [pc, #132]	; (8000408 <DigiLed_update+0xd4>)
 8000382:	5499      	strb	r1, [r3, r2]
			SpiSendFrame[LED_START_FRAME_SIZE + SpiDataPacket + 1] = _digitalLedframe[led].FieldsOut.BLUE; 	// Add BLUE to SPI send frame
 8000384:	693b      	ldr	r3, [r7, #16]
 8000386:	1d5a      	adds	r2, r3, #5
 8000388:	4920      	ldr	r1, [pc, #128]	; (800040c <DigiLed_update+0xd8>)
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	440b      	add	r3, r1
 8000390:	7899      	ldrb	r1, [r3, #2]
 8000392:	4b1d      	ldr	r3, [pc, #116]	; (8000408 <DigiLed_update+0xd4>)
 8000394:	5499      	strb	r1, [r3, r2]
			SpiSendFrame[LED_START_FRAME_SIZE + SpiDataPacket + 2] = _digitalLedframe[led].FieldsOut.GREEN;	// Add GREEN to SPI send frame
 8000396:	693b      	ldr	r3, [r7, #16]
 8000398:	1d9a      	adds	r2, r3, #6
 800039a:	491c      	ldr	r1, [pc, #112]	; (800040c <DigiLed_update+0xd8>)
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	440b      	add	r3, r1
 80003a2:	7859      	ldrb	r1, [r3, #1]
 80003a4:	4b18      	ldr	r3, [pc, #96]	; (8000408 <DigiLed_update+0xd4>)
 80003a6:	5499      	strb	r1, [r3, r2]
			SpiSendFrame[LED_START_FRAME_SIZE + SpiDataPacket + 3] = _digitalLedframe[led].FieldsOut.RED;		// Add RED to SPI send frame
 80003a8:	693b      	ldr	r3, [r7, #16]
 80003aa:	3307      	adds	r3, #7
 80003ac:	4917      	ldr	r1, [pc, #92]	; (800040c <DigiLed_update+0xd8>)
 80003ae:	68fa      	ldr	r2, [r7, #12]
 80003b0:	f811 1022 	ldrb.w	r1, [r1, r2, lsl #2]
 80003b4:	4a14      	ldr	r2, [pc, #80]	; (8000408 <DigiLed_update+0xd4>)
 80003b6:	54d1      	strb	r1, [r2, r3]

			SpiDataPacket = SpiDataPacket + 4;
 80003b8:	693b      	ldr	r3, [r7, #16]
 80003ba:	3304      	adds	r3, #4
 80003bc:	613b      	str	r3, [r7, #16]
		for (uint32_t led = 0; led < LED_FRAME_SIZE; led++)
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	3301      	adds	r3, #1
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	2b06      	cmp	r3, #6
 80003c8:	d9d3      	bls.n	8000372 <DigiLed_update+0x3e>
		}

		// add end of frame (0xffffffff)
		for(int i = 0; i < 4; i++)
 80003ca:	2300      	movs	r3, #0
 80003cc:	60bb      	str	r3, [r7, #8]
 80003ce:	e007      	b.n	80003e0 <DigiLed_update+0xac>
		{
			SpiSendFrame[LED_START_FRAME_SIZE + 4*LED_FRAME_SIZE + i] = 0xFF;
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	3320      	adds	r3, #32
 80003d4:	4a0c      	ldr	r2, [pc, #48]	; (8000408 <DigiLed_update+0xd4>)
 80003d6:	21ff      	movs	r1, #255	; 0xff
 80003d8:	54d1      	strb	r1, [r2, r3]
		for(int i = 0; i < 4; i++)
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	3301      	adds	r3, #1
 80003de:	60bb      	str	r3, [r7, #8]
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	2b03      	cmp	r3, #3
 80003e4:	ddf4      	ble.n	80003d0 <DigiLed_update+0x9c>
		}

		// send spi frame with all led values
		HAL_SPI_Transmit(_spiHandler, SpiSendFrame, sizeof(SpiSendFrame), 10);
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <DigiLed_update+0xdc>)
 80003e8:	6818      	ldr	r0, [r3, #0]
 80003ea:	230a      	movs	r3, #10
 80003ec:	2224      	movs	r2, #36	; 0x24
 80003ee:	4906      	ldr	r1, [pc, #24]	; (8000408 <DigiLed_update+0xd4>)
 80003f0:	f001 fbef 	bl	8001bd2 <HAL_SPI_Transmit>
	}

	_frameModified = FALSE; // reset frame modified identifier.
 80003f4:	4b03      	ldr	r3, [pc, #12]	; (8000404 <DigiLed_update+0xd0>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	701a      	strb	r2, [r3, #0]

}
 80003fa:	bf00      	nop
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20000068 	.word	0x20000068
 8000408:	20000044 	.word	0x20000044
 800040c:	20000028 	.word	0x20000028
 8000410:	2000006c 	.word	0x2000006c

08000414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000418:	f000 fa7e 	bl	8000918 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800041c:	f000 f82a 	bl	8000474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000420:	f000 f8f6 	bl	8000610 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000424:	f000 f8ca 	bl	80005bc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000428:	f000 f892 	bl	8000550 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  DigiLed_init(&hspi1);
 800042c:	480e      	ldr	r0, [pc, #56]	; (8000468 <main+0x54>)
 800042e:	f7ff ff03 	bl	8000238 <DigiLed_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	DigiLed_setRGB(0, 0xD60270);
 8000432:	490e      	ldr	r1, [pc, #56]	; (800046c <main+0x58>)
 8000434:	2000      	movs	r0, #0
 8000436:	f7ff ff41 	bl	80002bc <DigiLed_setRGB>
	DigiLed_setRGB(1, 0xD60270);
 800043a:	490c      	ldr	r1, [pc, #48]	; (800046c <main+0x58>)
 800043c:	2001      	movs	r0, #1
 800043e:	f7ff ff3d 	bl	80002bc <DigiLed_setRGB>
	DigiLed_setRGB(2, 0x9B4F96);
 8000442:	490b      	ldr	r1, [pc, #44]	; (8000470 <main+0x5c>)
 8000444:	2002      	movs	r0, #2
 8000446:	f7ff ff39 	bl	80002bc <DigiLed_setRGB>
	DigiLed_setRGB(3, 0x0038A8);
 800044a:	f643 01a8 	movw	r1, #14504	; 0x38a8
 800044e:	2003      	movs	r0, #3
 8000450:	f7ff ff34 	bl	80002bc <DigiLed_setRGB>
	DigiLed_setRGB(4, 0x0038A8);
 8000454:	f643 01a8 	movw	r1, #14504	; 0x38a8
 8000458:	2004      	movs	r0, #4
 800045a:	f7ff ff2f 	bl	80002bc <DigiLed_setRGB>
	//DigiLed_setRGB(4, 0x5BCEFA);


	DigiLed_update(1);
 800045e:	2001      	movs	r0, #1
 8000460:	f7ff ff68 	bl	8000334 <DigiLed_update>
  {
 8000464:	bf00      	nop
 8000466:	e7e4      	b.n	8000432 <main+0x1e>
 8000468:	20000070 	.word	0x20000070
 800046c:	00d60270 	.word	0x00d60270
 8000470:	009b4f96 	.word	0x009b4f96

08000474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b094      	sub	sp, #80	; 0x50
 8000478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047a:	f107 031c 	add.w	r3, r7, #28
 800047e:	2234      	movs	r2, #52	; 0x34
 8000480:	2100      	movs	r1, #0
 8000482:	4618      	mov	r0, r3
 8000484:	f002 f892 	bl	80025ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000488:	f107 0308 	add.w	r3, r7, #8
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
 8000496:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000498:	2300      	movs	r3, #0
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	4b2a      	ldr	r3, [pc, #168]	; (8000548 <SystemClock_Config+0xd4>)
 800049e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004a0:	4a29      	ldr	r2, [pc, #164]	; (8000548 <SystemClock_Config+0xd4>)
 80004a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a6:	6413      	str	r3, [r2, #64]	; 0x40
 80004a8:	4b27      	ldr	r3, [pc, #156]	; (8000548 <SystemClock_Config+0xd4>)
 80004aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004b4:	2300      	movs	r3, #0
 80004b6:	603b      	str	r3, [r7, #0]
 80004b8:	4b24      	ldr	r3, [pc, #144]	; (800054c <SystemClock_Config+0xd8>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004c0:	4a22      	ldr	r2, [pc, #136]	; (800054c <SystemClock_Config+0xd8>)
 80004c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004c6:	6013      	str	r3, [r2, #0]
 80004c8:	4b20      	ldr	r3, [pc, #128]	; (800054c <SystemClock_Config+0xd8>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004d0:	603b      	str	r3, [r7, #0]
 80004d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004d4:	2302      	movs	r3, #2
 80004d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d8:	2301      	movs	r3, #1
 80004da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004dc:	2310      	movs	r3, #16
 80004de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e0:	2302      	movs	r3, #2
 80004e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004e4:	2300      	movs	r3, #0
 80004e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80004e8:	2310      	movs	r3, #16
 80004ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80004ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80004f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80004f2:	2304      	movs	r3, #4
 80004f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80004f6:	2302      	movs	r3, #2
 80004f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004fa:	2302      	movs	r3, #2
 80004fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fe:	f107 031c 	add.w	r3, r7, #28
 8000502:	4618      	mov	r0, r3
 8000504:	f001 f83e 	bl	8001584 <HAL_RCC_OscConfig>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800050e:	f000 f8d9 	bl	80006c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000512:	230f      	movs	r3, #15
 8000514:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000516:	2302      	movs	r3, #2
 8000518:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800051e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000522:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000524:	2300      	movs	r3, #0
 8000526:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000528:	f107 0308 	add.w	r3, r7, #8
 800052c:	2102      	movs	r1, #2
 800052e:	4618      	mov	r0, r3
 8000530:	f000 fcde 	bl	8000ef0 <HAL_RCC_ClockConfig>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800053a:	f000 f8c3 	bl	80006c4 <Error_Handler>
  }
}
 800053e:	bf00      	nop
 8000540:	3750      	adds	r7, #80	; 0x50
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40023800 	.word	0x40023800
 800054c:	40007000 	.word	0x40007000

08000550 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000554:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <MX_SPI1_Init+0x64>)
 8000556:	4a18      	ldr	r2, [pc, #96]	; (80005b8 <MX_SPI1_Init+0x68>)
 8000558:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800055a:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <MX_SPI1_Init+0x64>)
 800055c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000560:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000562:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <MX_SPI1_Init+0x64>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <MX_SPI1_Init+0x64>)
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800056e:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <MX_SPI1_Init+0x64>)
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000574:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <MX_SPI1_Init+0x64>)
 8000576:	2200      	movs	r2, #0
 8000578:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <MX_SPI1_Init+0x64>)
 800057c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000580:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <MX_SPI1_Init+0x64>)
 8000584:	2230      	movs	r2, #48	; 0x30
 8000586:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <MX_SPI1_Init+0x64>)
 800058a:	2200      	movs	r2, #0
 800058c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <MX_SPI1_Init+0x64>)
 8000590:	2200      	movs	r2, #0
 8000592:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000594:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <MX_SPI1_Init+0x64>)
 8000596:	2200      	movs	r2, #0
 8000598:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <MX_SPI1_Init+0x64>)
 800059c:	220a      	movs	r2, #10
 800059e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005a0:	4804      	ldr	r0, [pc, #16]	; (80005b4 <MX_SPI1_Init+0x64>)
 80005a2:	f001 fa8d 	bl	8001ac0 <HAL_SPI_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80005ac:	f000 f88a 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000070 	.word	0x20000070
 80005b8:	40013000 	.word	0x40013000

080005bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005c2:	4a12      	ldr	r2, [pc, #72]	; (800060c <MX_USART2_UART_Init+0x50>)
 80005c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005f4:	f001 fcf4 	bl	8001fe0 <HAL_UART_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005fe:	f000 f861 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200000c8 	.word	0x200000c8
 800060c:	40004400 	.word	0x40004400

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
 800062a:	4b24      	ldr	r3, [pc, #144]	; (80006bc <MX_GPIO_Init+0xac>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a23      	ldr	r2, [pc, #140]	; (80006bc <MX_GPIO_Init+0xac>)
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <MX_GPIO_Init+0xac>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_GPIO_Init+0xac>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a1c      	ldr	r2, [pc, #112]	; (80006bc <MX_GPIO_Init+0xac>)
 800064c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_GPIO_Init+0xac>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	4b16      	ldr	r3, [pc, #88]	; (80006bc <MX_GPIO_Init+0xac>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a15      	ldr	r2, [pc, #84]	; (80006bc <MX_GPIO_Init+0xac>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b13      	ldr	r3, [pc, #76]	; (80006bc <MX_GPIO_Init+0xac>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_GPIO_Init+0xac>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <MX_GPIO_Init+0xac>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_GPIO_Init+0xac>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000696:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800069c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <MX_GPIO_Init+0xb0>)
 80006ae:	f000 fa8b 	bl	8000bc8 <HAL_GPIO_Init>

}
 80006b2:	bf00      	nop
 80006b4:	3728      	adds	r7, #40	; 0x28
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40020800 	.word	0x40020800

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <Error_Handler+0x8>

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <HAL_MspInit+0x4c>)
 80006dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006de:	4a0f      	ldr	r2, [pc, #60]	; (800071c <HAL_MspInit+0x4c>)
 80006e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e4:	6453      	str	r3, [r2, #68]	; 0x44
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <HAL_MspInit+0x4c>)
 80006e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <HAL_MspInit+0x4c>)
 80006f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fa:	4a08      	ldr	r2, [pc, #32]	; (800071c <HAL_MspInit+0x4c>)
 80006fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000700:	6413      	str	r3, [r2, #64]	; 0x40
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_MspInit+0x4c>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800070e:	2007      	movs	r0, #7
 8000710:	f000 fa26 	bl	8000b60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800

08000720 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a19      	ldr	r2, [pc, #100]	; (80007a4 <HAL_SPI_MspInit+0x84>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d12b      	bne.n	800079a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <HAL_SPI_MspInit+0x88>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074a:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <HAL_SPI_MspInit+0x88>)
 800074c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000750:	6453      	str	r3, [r2, #68]	; 0x44
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <HAL_SPI_MspInit+0x88>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <HAL_SPI_MspInit+0x88>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <HAL_SPI_MspInit+0x88>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <HAL_SPI_MspInit+0x88>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800077a:	23a0      	movs	r3, #160	; 0xa0
 800077c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800078a:	2305      	movs	r3, #5
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	; (80007ac <HAL_SPI_MspInit+0x8c>)
 8000796:	f000 fa17 	bl	8000bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800079a:	bf00      	nop
 800079c:	3728      	adds	r7, #40	; 0x28
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40013000 	.word	0x40013000
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020000 	.word	0x40020000

080007b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a19      	ldr	r2, [pc, #100]	; (8000834 <HAL_UART_MspInit+0x84>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d12b      	bne.n	800082a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <HAL_UART_MspInit+0x88>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	4a17      	ldr	r2, [pc, #92]	; (8000838 <HAL_UART_MspInit+0x88>)
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e0:	6413      	str	r3, [r2, #64]	; 0x40
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <HAL_UART_MspInit+0x88>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <HAL_UART_MspInit+0x88>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a10      	ldr	r2, [pc, #64]	; (8000838 <HAL_UART_MspInit+0x88>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <HAL_UART_MspInit+0x88>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800080a:	230c      	movs	r3, #12
 800080c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000816:	2303      	movs	r3, #3
 8000818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800081a:	2307      	movs	r3, #7
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <HAL_UART_MspInit+0x8c>)
 8000826:	f000 f9cf 	bl	8000bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800082a:	bf00      	nop
 800082c:	3728      	adds	r7, #40	; 0x28
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40004400 	.word	0x40004400
 8000838:	40023800 	.word	0x40023800
 800083c:	40020000 	.word	0x40020000

08000840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <NMI_Handler+0x4>

08000848 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <MemManage_Handler+0x4>

08000858 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <BusFault_Handler+0x4>

08000860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <UsageFault_Handler+0x4>

08000868 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000896:	f000 f891 	bl	80009bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <SystemInit+0x20>)
 80008a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008aa:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <SystemInit+0x20>)
 80008ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008c8:	480d      	ldr	r0, [pc, #52]	; (8000900 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008ca:	490e      	ldr	r1, [pc, #56]	; (8000904 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008cc:	4a0e      	ldr	r2, [pc, #56]	; (8000908 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d0:	e002      	b.n	80008d8 <LoopCopyDataInit>

080008d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d6:	3304      	adds	r3, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008dc:	d3f9      	bcc.n	80008d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008de:	4a0b      	ldr	r2, [pc, #44]	; (800090c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008e0:	4c0b      	ldr	r4, [pc, #44]	; (8000910 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e4:	e001      	b.n	80008ea <LoopFillZerobss>

080008e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e8:	3204      	adds	r2, #4

080008ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ec:	d3fb      	bcc.n	80008e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008ee:	f7ff ffd7 	bl	80008a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008f2:	f001 fe37 	bl	8002564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008f6:	f7ff fd8d 	bl	8000414 <main>
  bx  lr    
 80008fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000904:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000908:	0800289c 	.word	0x0800289c
  ldr r2, =_sbss
 800090c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000910:	20000110 	.word	0x20000110

08000914 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000914:	e7fe      	b.n	8000914 <ADC_IRQHandler>
	...

08000918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <HAL_Init+0x40>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a0d      	ldr	r2, [pc, #52]	; (8000958 <HAL_Init+0x40>)
 8000922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000926:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000928:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <HAL_Init+0x40>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <HAL_Init+0x40>)
 800092e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000932:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <HAL_Init+0x40>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a07      	ldr	r2, [pc, #28]	; (8000958 <HAL_Init+0x40>)
 800093a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800093e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000940:	2003      	movs	r0, #3
 8000942:	f000 f90d 	bl	8000b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000946:	2000      	movs	r0, #0
 8000948:	f000 f808 	bl	800095c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800094c:	f7ff fec0 	bl	80006d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023c00 	.word	0x40023c00

0800095c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_InitTick+0x54>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_InitTick+0x58>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000972:	fbb3 f3f1 	udiv	r3, r3, r1
 8000976:	fbb2 f3f3 	udiv	r3, r2, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f917 	bl	8000bae <HAL_SYSTICK_Config>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	e00e      	b.n	80009a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b0f      	cmp	r3, #15
 800098e:	d80a      	bhi.n	80009a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000990:	2200      	movs	r2, #0
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000998:	f000 f8ed 	bl	8000b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800099c:	4a06      	ldr	r2, [pc, #24]	; (80009b8 <HAL_InitTick+0x5c>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a2:	2300      	movs	r3, #0
 80009a4:	e000      	b.n	80009a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000000 	.word	0x20000000
 80009b4:	20000008 	.word	0x20000008
 80009b8:	20000004 	.word	0x20000004

080009bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_IncTick+0x20>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_IncTick+0x24>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <HAL_IncTick+0x24>)
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000008 	.word	0x20000008
 80009e0:	2000010c 	.word	0x2000010c

080009e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <HAL_GetTick+0x14>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	2000010c 	.word	0x2000010c

080009fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2e:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	60d3      	str	r3, [r2, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <__NVIC_GetPriorityGrouping+0x18>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	0a1b      	lsrs	r3, r3, #8
 8000a4e:	f003 0307 	and.w	r3, r3, #7
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	db0a      	blt.n	8000a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	490c      	ldr	r1, [pc, #48]	; (8000aac <__NVIC_SetPriority+0x4c>)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	0112      	lsls	r2, r2, #4
 8000a80:	b2d2      	uxtb	r2, r2
 8000a82:	440b      	add	r3, r1
 8000a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a88:	e00a      	b.n	8000aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4908      	ldr	r1, [pc, #32]	; (8000ab0 <__NVIC_SetPriority+0x50>)
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	f003 030f 	and.w	r3, r3, #15
 8000a96:	3b04      	subs	r3, #4
 8000a98:	0112      	lsls	r2, r2, #4
 8000a9a:	b2d2      	uxtb	r2, r2
 8000a9c:	440b      	add	r3, r1
 8000a9e:	761a      	strb	r2, [r3, #24]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000e100 	.word	0xe000e100
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b089      	sub	sp, #36	; 0x24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	f1c3 0307 	rsb	r3, r3, #7
 8000ace:	2b04      	cmp	r3, #4
 8000ad0:	bf28      	it	cs
 8000ad2:	2304      	movcs	r3, #4
 8000ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	2b06      	cmp	r3, #6
 8000adc:	d902      	bls.n	8000ae4 <NVIC_EncodePriority+0x30>
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3b03      	subs	r3, #3
 8000ae2:	e000      	b.n	8000ae6 <NVIC_EncodePriority+0x32>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43da      	mvns	r2, r3
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	401a      	ands	r2, r3
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000afc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa01 f303 	lsl.w	r3, r1, r3
 8000b06:	43d9      	mvns	r1, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	4313      	orrs	r3, r2
         );
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3724      	adds	r7, #36	; 0x24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b2c:	d301      	bcc.n	8000b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e00f      	b.n	8000b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b32:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <SysTick_Config+0x40>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3a:	210f      	movs	r1, #15
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b40:	f7ff ff8e 	bl	8000a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <SysTick_Config+0x40>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4a:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <SysTick_Config+0x40>)
 8000b4c:	2207      	movs	r2, #7
 8000b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	e000e010 	.word	0xe000e010

08000b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff ff47 	bl	80009fc <__NVIC_SetPriorityGrouping>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b086      	sub	sp, #24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b88:	f7ff ff5c 	bl	8000a44 <__NVIC_GetPriorityGrouping>
 8000b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	68b9      	ldr	r1, [r7, #8]
 8000b92:	6978      	ldr	r0, [r7, #20]
 8000b94:	f7ff ff8e 	bl	8000ab4 <NVIC_EncodePriority>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff5d 	bl	8000a60 <__NVIC_SetPriority>
}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ffb0 	bl	8000b1c <SysTick_Config>
 8000bbc:	4603      	mov	r3, r0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	; 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
 8000be2:	e165      	b.n	8000eb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000be4:	2201      	movs	r2, #1
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	697a      	ldr	r2, [r7, #20]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	f040 8154 	bne.w	8000eaa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 0303 	and.w	r3, r3, #3
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d005      	beq.n	8000c1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d130      	bne.n	8000c7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	2203      	movs	r2, #3
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	68da      	ldr	r2, [r3, #12]
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c50:	2201      	movs	r2, #1
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	091b      	lsrs	r3, r3, #4
 8000c66:	f003 0201 	and.w	r2, r3, #1
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	2b03      	cmp	r3, #3
 8000c86:	d017      	beq.n	8000cb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	2203      	movs	r2, #3
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	689a      	ldr	r2, [r3, #8]
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d123      	bne.n	8000d0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	08da      	lsrs	r2, r3, #3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3208      	adds	r2, #8
 8000ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	f003 0307 	and.w	r3, r3, #7
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	220f      	movs	r2, #15
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	691a      	ldr	r2, [r3, #16]
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	08da      	lsrs	r2, r3, #3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3208      	adds	r2, #8
 8000d06:	69b9      	ldr	r1, [r7, #24]
 8000d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	2203      	movs	r2, #3
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4013      	ands	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0203 	and.w	r2, r3, #3
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f000 80ae 	beq.w	8000eaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b5d      	ldr	r3, [pc, #372]	; (8000ec8 <HAL_GPIO_Init+0x300>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	4a5c      	ldr	r2, [pc, #368]	; (8000ec8 <HAL_GPIO_Init+0x300>)
 8000d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5e:	4b5a      	ldr	r3, [pc, #360]	; (8000ec8 <HAL_GPIO_Init+0x300>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d6a:	4a58      	ldr	r2, [pc, #352]	; (8000ecc <HAL_GPIO_Init+0x304>)
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	089b      	lsrs	r3, r3, #2
 8000d70:	3302      	adds	r3, #2
 8000d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	220f      	movs	r2, #15
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a4f      	ldr	r2, [pc, #316]	; (8000ed0 <HAL_GPIO_Init+0x308>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d025      	beq.n	8000de2 <HAL_GPIO_Init+0x21a>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a4e      	ldr	r2, [pc, #312]	; (8000ed4 <HAL_GPIO_Init+0x30c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d01f      	beq.n	8000dde <HAL_GPIO_Init+0x216>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a4d      	ldr	r2, [pc, #308]	; (8000ed8 <HAL_GPIO_Init+0x310>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d019      	beq.n	8000dda <HAL_GPIO_Init+0x212>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4c      	ldr	r2, [pc, #304]	; (8000edc <HAL_GPIO_Init+0x314>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d013      	beq.n	8000dd6 <HAL_GPIO_Init+0x20e>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a4b      	ldr	r2, [pc, #300]	; (8000ee0 <HAL_GPIO_Init+0x318>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d00d      	beq.n	8000dd2 <HAL_GPIO_Init+0x20a>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a4a      	ldr	r2, [pc, #296]	; (8000ee4 <HAL_GPIO_Init+0x31c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d007      	beq.n	8000dce <HAL_GPIO_Init+0x206>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a49      	ldr	r2, [pc, #292]	; (8000ee8 <HAL_GPIO_Init+0x320>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d101      	bne.n	8000dca <HAL_GPIO_Init+0x202>
 8000dc6:	2306      	movs	r3, #6
 8000dc8:	e00c      	b.n	8000de4 <HAL_GPIO_Init+0x21c>
 8000dca:	2307      	movs	r3, #7
 8000dcc:	e00a      	b.n	8000de4 <HAL_GPIO_Init+0x21c>
 8000dce:	2305      	movs	r3, #5
 8000dd0:	e008      	b.n	8000de4 <HAL_GPIO_Init+0x21c>
 8000dd2:	2304      	movs	r3, #4
 8000dd4:	e006      	b.n	8000de4 <HAL_GPIO_Init+0x21c>
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e004      	b.n	8000de4 <HAL_GPIO_Init+0x21c>
 8000dda:	2302      	movs	r3, #2
 8000ddc:	e002      	b.n	8000de4 <HAL_GPIO_Init+0x21c>
 8000dde:	2301      	movs	r3, #1
 8000de0:	e000      	b.n	8000de4 <HAL_GPIO_Init+0x21c>
 8000de2:	2300      	movs	r3, #0
 8000de4:	69fa      	ldr	r2, [r7, #28]
 8000de6:	f002 0203 	and.w	r2, r2, #3
 8000dea:	0092      	lsls	r2, r2, #2
 8000dec:	4093      	lsls	r3, r2
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000df4:	4935      	ldr	r1, [pc, #212]	; (8000ecc <HAL_GPIO_Init+0x304>)
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	089b      	lsrs	r3, r3, #2
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e02:	4b3a      	ldr	r3, [pc, #232]	; (8000eec <HAL_GPIO_Init+0x324>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e26:	4a31      	ldr	r2, [pc, #196]	; (8000eec <HAL_GPIO_Init+0x324>)
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e2c:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <HAL_GPIO_Init+0x324>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e50:	4a26      	ldr	r2, [pc, #152]	; (8000eec <HAL_GPIO_Init+0x324>)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e56:	4b25      	ldr	r3, [pc, #148]	; (8000eec <HAL_GPIO_Init+0x324>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e7a:	4a1c      	ldr	r2, [pc, #112]	; (8000eec <HAL_GPIO_Init+0x324>)
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e80:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <HAL_GPIO_Init+0x324>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ea4:	4a11      	ldr	r2, [pc, #68]	; (8000eec <HAL_GPIO_Init+0x324>)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3301      	adds	r3, #1
 8000eae:	61fb      	str	r3, [r7, #28]
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	2b0f      	cmp	r3, #15
 8000eb4:	f67f ae96 	bls.w	8000be4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3724      	adds	r7, #36	; 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40013800 	.word	0x40013800
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	40020400 	.word	0x40020400
 8000ed8:	40020800 	.word	0x40020800
 8000edc:	40020c00 	.word	0x40020c00
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40021400 	.word	0x40021400
 8000ee8:	40021800 	.word	0x40021800
 8000eec:	40013c00 	.word	0x40013c00

08000ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d101      	bne.n	8000f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e0cc      	b.n	800109e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f04:	4b68      	ldr	r3, [pc, #416]	; (80010a8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 030f 	and.w	r3, r3, #15
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d90c      	bls.n	8000f2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f12:	4b65      	ldr	r3, [pc, #404]	; (80010a8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f1a:	4b63      	ldr	r3, [pc, #396]	; (80010a8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d001      	beq.n	8000f2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e0b8      	b.n	800109e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d020      	beq.n	8000f7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d005      	beq.n	8000f50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f44:	4b59      	ldr	r3, [pc, #356]	; (80010ac <HAL_RCC_ClockConfig+0x1bc>)
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	4a58      	ldr	r2, [pc, #352]	; (80010ac <HAL_RCC_ClockConfig+0x1bc>)
 8000f4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0308 	and.w	r3, r3, #8
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d005      	beq.n	8000f68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f5c:	4b53      	ldr	r3, [pc, #332]	; (80010ac <HAL_RCC_ClockConfig+0x1bc>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	4a52      	ldr	r2, [pc, #328]	; (80010ac <HAL_RCC_ClockConfig+0x1bc>)
 8000f62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f68:	4b50      	ldr	r3, [pc, #320]	; (80010ac <HAL_RCC_ClockConfig+0x1bc>)
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	494d      	ldr	r1, [pc, #308]	; (80010ac <HAL_RCC_ClockConfig+0x1bc>)
 8000f76:	4313      	orrs	r3, r2
 8000f78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d044      	beq.n	8001010 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d107      	bne.n	8000f9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8e:	4b47      	ldr	r3, [pc, #284]	; (80010ac <HAL_RCC_ClockConfig+0x1bc>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d119      	bne.n	8000fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e07f      	b.n	800109e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d003      	beq.n	8000fae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d107      	bne.n	8000fbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fae:	4b3f      	ldr	r3, [pc, #252]	; (80010ac <HAL_RCC_ClockConfig+0x1bc>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d109      	bne.n	8000fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e06f      	b.n	800109e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fbe:	4b3b      	ldr	r3, [pc, #236]	; (80010ac <HAL_RCC_ClockConfig+0x1bc>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e067      	b.n	800109e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fce:	4b37      	ldr	r3, [pc, #220]	; (80010ac <HAL_RCC_ClockConfig+0x1bc>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f023 0203 	bic.w	r2, r3, #3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	4934      	ldr	r1, [pc, #208]	; (80010ac <HAL_RCC_ClockConfig+0x1bc>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000fe0:	f7ff fd00 	bl	80009e4 <HAL_GetTick>
 8000fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fe6:	e00a      	b.n	8000ffe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fe8:	f7ff fcfc 	bl	80009e4 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e04f      	b.n	800109e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ffe:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <HAL_RCC_ClockConfig+0x1bc>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f003 020c 	and.w	r2, r3, #12
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	429a      	cmp	r2, r3
 800100e:	d1eb      	bne.n	8000fe8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001010:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 030f 	and.w	r3, r3, #15
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	429a      	cmp	r2, r3
 800101c:	d20c      	bcs.n	8001038 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800101e:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001026:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	d001      	beq.n	8001038 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e032      	b.n	800109e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	2b00      	cmp	r3, #0
 8001042:	d008      	beq.n	8001056 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001044:	4b19      	ldr	r3, [pc, #100]	; (80010ac <HAL_RCC_ClockConfig+0x1bc>)
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	4916      	ldr	r1, [pc, #88]	; (80010ac <HAL_RCC_ClockConfig+0x1bc>)
 8001052:	4313      	orrs	r3, r2
 8001054:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0308 	and.w	r3, r3, #8
 800105e:	2b00      	cmp	r3, #0
 8001060:	d009      	beq.n	8001076 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001062:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_RCC_ClockConfig+0x1bc>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	490e      	ldr	r1, [pc, #56]	; (80010ac <HAL_RCC_ClockConfig+0x1bc>)
 8001072:	4313      	orrs	r3, r2
 8001074:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001076:	f000 f855 	bl	8001124 <HAL_RCC_GetSysClockFreq>
 800107a:	4602      	mov	r2, r0
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <HAL_RCC_ClockConfig+0x1bc>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	091b      	lsrs	r3, r3, #4
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	490a      	ldr	r1, [pc, #40]	; (80010b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001088:	5ccb      	ldrb	r3, [r1, r3]
 800108a:	fa22 f303 	lsr.w	r3, r2, r3
 800108e:	4a09      	ldr	r2, [pc, #36]	; (80010b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001090:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fc60 	bl	800095c <HAL_InitTick>

  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023c00 	.word	0x40023c00
 80010ac:	40023800 	.word	0x40023800
 80010b0:	08002874 	.word	0x08002874
 80010b4:	20000000 	.word	0x20000000
 80010b8:	20000004 	.word	0x20000004

080010bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000000 	.word	0x20000000

080010d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80010d8:	f7ff fff0 	bl	80010bc <HAL_RCC_GetHCLKFreq>
 80010dc:	4602      	mov	r2, r0
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	0a9b      	lsrs	r3, r3, #10
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	4903      	ldr	r1, [pc, #12]	; (80010f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80010ea:	5ccb      	ldrb	r3, [r1, r3]
 80010ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40023800 	.word	0x40023800
 80010f8:	08002884 	.word	0x08002884

080010fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001100:	f7ff ffdc 	bl	80010bc <HAL_RCC_GetHCLKFreq>
 8001104:	4602      	mov	r2, r0
 8001106:	4b05      	ldr	r3, [pc, #20]	; (800111c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	0b5b      	lsrs	r3, r3, #13
 800110c:	f003 0307 	and.w	r3, r3, #7
 8001110:	4903      	ldr	r1, [pc, #12]	; (8001120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001112:	5ccb      	ldrb	r3, [r1, r3]
 8001114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001118:	4618      	mov	r0, r3
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40023800 	.word	0x40023800
 8001120:	08002884 	.word	0x08002884

08001124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001128:	b0ae      	sub	sp, #184	; 0xb8
 800112a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001132:	2300      	movs	r3, #0
 8001134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001138:	2300      	movs	r3, #0
 800113a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001144:	2300      	movs	r3, #0
 8001146:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800114a:	4bcb      	ldr	r3, [pc, #812]	; (8001478 <HAL_RCC_GetSysClockFreq+0x354>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 030c 	and.w	r3, r3, #12
 8001152:	2b0c      	cmp	r3, #12
 8001154:	f200 8206 	bhi.w	8001564 <HAL_RCC_GetSysClockFreq+0x440>
 8001158:	a201      	add	r2, pc, #4	; (adr r2, 8001160 <HAL_RCC_GetSysClockFreq+0x3c>)
 800115a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115e:	bf00      	nop
 8001160:	08001195 	.word	0x08001195
 8001164:	08001565 	.word	0x08001565
 8001168:	08001565 	.word	0x08001565
 800116c:	08001565 	.word	0x08001565
 8001170:	0800119d 	.word	0x0800119d
 8001174:	08001565 	.word	0x08001565
 8001178:	08001565 	.word	0x08001565
 800117c:	08001565 	.word	0x08001565
 8001180:	080011a5 	.word	0x080011a5
 8001184:	08001565 	.word	0x08001565
 8001188:	08001565 	.word	0x08001565
 800118c:	08001565 	.word	0x08001565
 8001190:	08001395 	.word	0x08001395
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001194:	4bb9      	ldr	r3, [pc, #740]	; (800147c <HAL_RCC_GetSysClockFreq+0x358>)
 8001196:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800119a:	e1e7      	b.n	800156c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800119c:	4bb8      	ldr	r3, [pc, #736]	; (8001480 <HAL_RCC_GetSysClockFreq+0x35c>)
 800119e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80011a2:	e1e3      	b.n	800156c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011a4:	4bb4      	ldr	r3, [pc, #720]	; (8001478 <HAL_RCC_GetSysClockFreq+0x354>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011b0:	4bb1      	ldr	r3, [pc, #708]	; (8001478 <HAL_RCC_GetSysClockFreq+0x354>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d071      	beq.n	80012a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011bc:	4bae      	ldr	r3, [pc, #696]	; (8001478 <HAL_RCC_GetSysClockFreq+0x354>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	099b      	lsrs	r3, r3, #6
 80011c2:	2200      	movs	r2, #0
 80011c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80011c8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80011cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80011d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80011d8:	2300      	movs	r3, #0
 80011da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80011de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80011e2:	4622      	mov	r2, r4
 80011e4:	462b      	mov	r3, r5
 80011e6:	f04f 0000 	mov.w	r0, #0
 80011ea:	f04f 0100 	mov.w	r1, #0
 80011ee:	0159      	lsls	r1, r3, #5
 80011f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80011f4:	0150      	lsls	r0, r2, #5
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4621      	mov	r1, r4
 80011fc:	1a51      	subs	r1, r2, r1
 80011fe:	6439      	str	r1, [r7, #64]	; 0x40
 8001200:	4629      	mov	r1, r5
 8001202:	eb63 0301 	sbc.w	r3, r3, r1
 8001206:	647b      	str	r3, [r7, #68]	; 0x44
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001214:	4649      	mov	r1, r9
 8001216:	018b      	lsls	r3, r1, #6
 8001218:	4641      	mov	r1, r8
 800121a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800121e:	4641      	mov	r1, r8
 8001220:	018a      	lsls	r2, r1, #6
 8001222:	4641      	mov	r1, r8
 8001224:	1a51      	subs	r1, r2, r1
 8001226:	63b9      	str	r1, [r7, #56]	; 0x38
 8001228:	4649      	mov	r1, r9
 800122a:	eb63 0301 	sbc.w	r3, r3, r1
 800122e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800123c:	4649      	mov	r1, r9
 800123e:	00cb      	lsls	r3, r1, #3
 8001240:	4641      	mov	r1, r8
 8001242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001246:	4641      	mov	r1, r8
 8001248:	00ca      	lsls	r2, r1, #3
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	4603      	mov	r3, r0
 8001250:	4622      	mov	r2, r4
 8001252:	189b      	adds	r3, r3, r2
 8001254:	633b      	str	r3, [r7, #48]	; 0x30
 8001256:	462b      	mov	r3, r5
 8001258:	460a      	mov	r2, r1
 800125a:	eb42 0303 	adc.w	r3, r2, r3
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800126c:	4629      	mov	r1, r5
 800126e:	024b      	lsls	r3, r1, #9
 8001270:	4621      	mov	r1, r4
 8001272:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001276:	4621      	mov	r1, r4
 8001278:	024a      	lsls	r2, r1, #9
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001282:	2200      	movs	r2, #0
 8001284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001288:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800128c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001290:	f7fe ff98 	bl	80001c4 <__aeabi_uldivmod>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4613      	mov	r3, r2
 800129a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800129e:	e067      	b.n	8001370 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012a0:	4b75      	ldr	r3, [pc, #468]	; (8001478 <HAL_RCC_GetSysClockFreq+0x354>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	099b      	lsrs	r3, r3, #6
 80012a6:	2200      	movs	r2, #0
 80012a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80012ac:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80012b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80012b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80012ba:	2300      	movs	r3, #0
 80012bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80012be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80012c2:	4622      	mov	r2, r4
 80012c4:	462b      	mov	r3, r5
 80012c6:	f04f 0000 	mov.w	r0, #0
 80012ca:	f04f 0100 	mov.w	r1, #0
 80012ce:	0159      	lsls	r1, r3, #5
 80012d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012d4:	0150      	lsls	r0, r2, #5
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4621      	mov	r1, r4
 80012dc:	1a51      	subs	r1, r2, r1
 80012de:	62b9      	str	r1, [r7, #40]	; 0x28
 80012e0:	4629      	mov	r1, r5
 80012e2:	eb63 0301 	sbc.w	r3, r3, r1
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80012f4:	4649      	mov	r1, r9
 80012f6:	018b      	lsls	r3, r1, #6
 80012f8:	4641      	mov	r1, r8
 80012fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80012fe:	4641      	mov	r1, r8
 8001300:	018a      	lsls	r2, r1, #6
 8001302:	4641      	mov	r1, r8
 8001304:	ebb2 0a01 	subs.w	sl, r2, r1
 8001308:	4649      	mov	r1, r9
 800130a:	eb63 0b01 	sbc.w	fp, r3, r1
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800131a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800131e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001322:	4692      	mov	sl, r2
 8001324:	469b      	mov	fp, r3
 8001326:	4623      	mov	r3, r4
 8001328:	eb1a 0303 	adds.w	r3, sl, r3
 800132c:	623b      	str	r3, [r7, #32]
 800132e:	462b      	mov	r3, r5
 8001330:	eb4b 0303 	adc.w	r3, fp, r3
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	f04f 0300 	mov.w	r3, #0
 800133e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001342:	4629      	mov	r1, r5
 8001344:	028b      	lsls	r3, r1, #10
 8001346:	4621      	mov	r1, r4
 8001348:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800134c:	4621      	mov	r1, r4
 800134e:	028a      	lsls	r2, r1, #10
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001358:	2200      	movs	r2, #0
 800135a:	673b      	str	r3, [r7, #112]	; 0x70
 800135c:	677a      	str	r2, [r7, #116]	; 0x74
 800135e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001362:	f7fe ff2f 	bl	80001c4 <__aeabi_uldivmod>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4613      	mov	r3, r2
 800136c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001370:	4b41      	ldr	r3, [pc, #260]	; (8001478 <HAL_RCC_GetSysClockFreq+0x354>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	0c1b      	lsrs	r3, r3, #16
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	3301      	adds	r3, #1
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001386:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800138a:	fbb2 f3f3 	udiv	r3, r2, r3
 800138e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001392:	e0eb      	b.n	800156c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001394:	4b38      	ldr	r3, [pc, #224]	; (8001478 <HAL_RCC_GetSysClockFreq+0x354>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800139c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013a0:	4b35      	ldr	r3, [pc, #212]	; (8001478 <HAL_RCC_GetSysClockFreq+0x354>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d06b      	beq.n	8001484 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ac:	4b32      	ldr	r3, [pc, #200]	; (8001478 <HAL_RCC_GetSysClockFreq+0x354>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	099b      	lsrs	r3, r3, #6
 80013b2:	2200      	movs	r2, #0
 80013b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80013b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80013b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013be:	663b      	str	r3, [r7, #96]	; 0x60
 80013c0:	2300      	movs	r3, #0
 80013c2:	667b      	str	r3, [r7, #100]	; 0x64
 80013c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80013c8:	4622      	mov	r2, r4
 80013ca:	462b      	mov	r3, r5
 80013cc:	f04f 0000 	mov.w	r0, #0
 80013d0:	f04f 0100 	mov.w	r1, #0
 80013d4:	0159      	lsls	r1, r3, #5
 80013d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013da:	0150      	lsls	r0, r2, #5
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4621      	mov	r1, r4
 80013e2:	1a51      	subs	r1, r2, r1
 80013e4:	61b9      	str	r1, [r7, #24]
 80013e6:	4629      	mov	r1, r5
 80013e8:	eb63 0301 	sbc.w	r3, r3, r1
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	f04f 0300 	mov.w	r3, #0
 80013f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80013fa:	4659      	mov	r1, fp
 80013fc:	018b      	lsls	r3, r1, #6
 80013fe:	4651      	mov	r1, sl
 8001400:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001404:	4651      	mov	r1, sl
 8001406:	018a      	lsls	r2, r1, #6
 8001408:	4651      	mov	r1, sl
 800140a:	ebb2 0801 	subs.w	r8, r2, r1
 800140e:	4659      	mov	r1, fp
 8001410:	eb63 0901 	sbc.w	r9, r3, r1
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001420:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001424:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001428:	4690      	mov	r8, r2
 800142a:	4699      	mov	r9, r3
 800142c:	4623      	mov	r3, r4
 800142e:	eb18 0303 	adds.w	r3, r8, r3
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	462b      	mov	r3, r5
 8001436:	eb49 0303 	adc.w	r3, r9, r3
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001448:	4629      	mov	r1, r5
 800144a:	024b      	lsls	r3, r1, #9
 800144c:	4621      	mov	r1, r4
 800144e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001452:	4621      	mov	r1, r4
 8001454:	024a      	lsls	r2, r1, #9
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800145e:	2200      	movs	r2, #0
 8001460:	65bb      	str	r3, [r7, #88]	; 0x58
 8001462:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001464:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001468:	f7fe feac 	bl	80001c4 <__aeabi_uldivmod>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4613      	mov	r3, r2
 8001472:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001476:	e065      	b.n	8001544 <HAL_RCC_GetSysClockFreq+0x420>
 8001478:	40023800 	.word	0x40023800
 800147c:	00f42400 	.word	0x00f42400
 8001480:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001484:	4b3d      	ldr	r3, [pc, #244]	; (800157c <HAL_RCC_GetSysClockFreq+0x458>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	099b      	lsrs	r3, r3, #6
 800148a:	2200      	movs	r2, #0
 800148c:	4618      	mov	r0, r3
 800148e:	4611      	mov	r1, r2
 8001490:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001494:	653b      	str	r3, [r7, #80]	; 0x50
 8001496:	2300      	movs	r3, #0
 8001498:	657b      	str	r3, [r7, #84]	; 0x54
 800149a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800149e:	4642      	mov	r2, r8
 80014a0:	464b      	mov	r3, r9
 80014a2:	f04f 0000 	mov.w	r0, #0
 80014a6:	f04f 0100 	mov.w	r1, #0
 80014aa:	0159      	lsls	r1, r3, #5
 80014ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014b0:	0150      	lsls	r0, r2, #5
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4641      	mov	r1, r8
 80014b8:	1a51      	subs	r1, r2, r1
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	4649      	mov	r1, r9
 80014be:	eb63 0301 	sbc.w	r3, r3, r1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80014d0:	4659      	mov	r1, fp
 80014d2:	018b      	lsls	r3, r1, #6
 80014d4:	4651      	mov	r1, sl
 80014d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014da:	4651      	mov	r1, sl
 80014dc:	018a      	lsls	r2, r1, #6
 80014de:	4651      	mov	r1, sl
 80014e0:	1a54      	subs	r4, r2, r1
 80014e2:	4659      	mov	r1, fp
 80014e4:	eb63 0501 	sbc.w	r5, r3, r1
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	00eb      	lsls	r3, r5, #3
 80014f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014f6:	00e2      	lsls	r2, r4, #3
 80014f8:	4614      	mov	r4, r2
 80014fa:	461d      	mov	r5, r3
 80014fc:	4643      	mov	r3, r8
 80014fe:	18e3      	adds	r3, r4, r3
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	464b      	mov	r3, r9
 8001504:	eb45 0303 	adc.w	r3, r5, r3
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001516:	4629      	mov	r1, r5
 8001518:	028b      	lsls	r3, r1, #10
 800151a:	4621      	mov	r1, r4
 800151c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001520:	4621      	mov	r1, r4
 8001522:	028a      	lsls	r2, r1, #10
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800152c:	2200      	movs	r2, #0
 800152e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001530:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001532:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001536:	f7fe fe45 	bl	80001c4 <__aeabi_uldivmod>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4613      	mov	r3, r2
 8001540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001544:	4b0d      	ldr	r3, [pc, #52]	; (800157c <HAL_RCC_GetSysClockFreq+0x458>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	0f1b      	lsrs	r3, r3, #28
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001552:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001556:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800155a:	fbb2 f3f3 	udiv	r3, r2, r3
 800155e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001562:	e003      	b.n	800156c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001566:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800156a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800156c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001570:	4618      	mov	r0, r3
 8001572:	37b8      	adds	r7, #184	; 0xb8
 8001574:	46bd      	mov	sp, r7
 8001576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800
 8001580:	00f42400 	.word	0x00f42400

08001584 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e28d      	b.n	8001ab2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 8083 	beq.w	80016aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015a4:	4b94      	ldr	r3, [pc, #592]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 030c 	and.w	r3, r3, #12
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	d019      	beq.n	80015e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015b0:	4b91      	ldr	r3, [pc, #580]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d106      	bne.n	80015ca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015bc:	4b8e      	ldr	r3, [pc, #568]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015c8:	d00c      	beq.n	80015e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ca:	4b8b      	ldr	r3, [pc, #556]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015d2:	2b0c      	cmp	r3, #12
 80015d4:	d112      	bne.n	80015fc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015d6:	4b88      	ldr	r3, [pc, #544]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015e2:	d10b      	bne.n	80015fc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e4:	4b84      	ldr	r3, [pc, #528]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d05b      	beq.n	80016a8 <HAL_RCC_OscConfig+0x124>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d157      	bne.n	80016a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e25a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001604:	d106      	bne.n	8001614 <HAL_RCC_OscConfig+0x90>
 8001606:	4b7c      	ldr	r3, [pc, #496]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a7b      	ldr	r2, [pc, #492]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 800160c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e01d      	b.n	8001650 <HAL_RCC_OscConfig+0xcc>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800161c:	d10c      	bne.n	8001638 <HAL_RCC_OscConfig+0xb4>
 800161e:	4b76      	ldr	r3, [pc, #472]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a75      	ldr	r2, [pc, #468]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 8001624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	4b73      	ldr	r3, [pc, #460]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a72      	ldr	r2, [pc, #456]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 8001630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e00b      	b.n	8001650 <HAL_RCC_OscConfig+0xcc>
 8001638:	4b6f      	ldr	r3, [pc, #444]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a6e      	ldr	r2, [pc, #440]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 800163e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b6c      	ldr	r3, [pc, #432]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a6b      	ldr	r2, [pc, #428]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 800164a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d013      	beq.n	8001680 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff f9c4 	bl	80009e4 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff f9c0 	bl	80009e4 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e21f      	b.n	8001ab2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001672:	4b61      	ldr	r3, [pc, #388]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0xdc>
 800167e:	e014      	b.n	80016aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001680:	f7ff f9b0 	bl	80009e4 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001688:	f7ff f9ac 	bl	80009e4 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b64      	cmp	r3, #100	; 0x64
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e20b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169a:	4b57      	ldr	r3, [pc, #348]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x104>
 80016a6:	e000      	b.n	80016aa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d06f      	beq.n	8001796 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016b6:	4b50      	ldr	r3, [pc, #320]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d017      	beq.n	80016f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016c2:	4b4d      	ldr	r3, [pc, #308]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d105      	bne.n	80016da <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016ce:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00b      	beq.n	80016f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016da:	4b47      	ldr	r3, [pc, #284]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016e2:	2b0c      	cmp	r3, #12
 80016e4:	d11c      	bne.n	8001720 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016e6:	4b44      	ldr	r3, [pc, #272]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d116      	bne.n	8001720 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f2:	4b41      	ldr	r3, [pc, #260]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d005      	beq.n	800170a <HAL_RCC_OscConfig+0x186>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d001      	beq.n	800170a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e1d3      	b.n	8001ab2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170a:	4b3b      	ldr	r3, [pc, #236]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4937      	ldr	r1, [pc, #220]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171e:	e03a      	b.n	8001796 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d020      	beq.n	800176a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001728:	4b34      	ldr	r3, [pc, #208]	; (80017fc <HAL_RCC_OscConfig+0x278>)
 800172a:	2201      	movs	r2, #1
 800172c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172e:	f7ff f959 	bl	80009e4 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001736:	f7ff f955 	bl	80009e4 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e1b4      	b.n	8001ab2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001748:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001754:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	4925      	ldr	r1, [pc, #148]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 8001764:	4313      	orrs	r3, r2
 8001766:	600b      	str	r3, [r1, #0]
 8001768:	e015      	b.n	8001796 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176a:	4b24      	ldr	r3, [pc, #144]	; (80017fc <HAL_RCC_OscConfig+0x278>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff f938 	bl	80009e4 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001778:	f7ff f934 	bl	80009e4 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e193      	b.n	8001ab2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d036      	beq.n	8001810 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d016      	beq.n	80017d8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_RCC_OscConfig+0x27c>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b0:	f7ff f918 	bl	80009e4 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b8:	f7ff f914 	bl	80009e4 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e173      	b.n	8001ab2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 80017cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCC_OscConfig+0x234>
 80017d6:	e01b      	b.n	8001810 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_RCC_OscConfig+0x27c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017de:	f7ff f901 	bl	80009e4 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e4:	e00e      	b.n	8001804 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e6:	f7ff f8fd 	bl	80009e4 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d907      	bls.n	8001804 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e15c      	b.n	8001ab2 <HAL_RCC_OscConfig+0x52e>
 80017f8:	40023800 	.word	0x40023800
 80017fc:	42470000 	.word	0x42470000
 8001800:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001804:	4b8a      	ldr	r3, [pc, #552]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 8001806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1ea      	bne.n	80017e6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 8097 	beq.w	800194c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001822:	4b83      	ldr	r3, [pc, #524]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10f      	bne.n	800184e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	4b7f      	ldr	r3, [pc, #508]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a7e      	ldr	r2, [pc, #504]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
 800183e:	4b7c      	ldr	r3, [pc, #496]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800184a:	2301      	movs	r3, #1
 800184c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184e:	4b79      	ldr	r3, [pc, #484]	; (8001a34 <HAL_RCC_OscConfig+0x4b0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001856:	2b00      	cmp	r3, #0
 8001858:	d118      	bne.n	800188c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800185a:	4b76      	ldr	r3, [pc, #472]	; (8001a34 <HAL_RCC_OscConfig+0x4b0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a75      	ldr	r2, [pc, #468]	; (8001a34 <HAL_RCC_OscConfig+0x4b0>)
 8001860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001866:	f7ff f8bd 	bl	80009e4 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186e:	f7ff f8b9 	bl	80009e4 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e118      	b.n	8001ab2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001880:	4b6c      	ldr	r3, [pc, #432]	; (8001a34 <HAL_RCC_OscConfig+0x4b0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d106      	bne.n	80018a2 <HAL_RCC_OscConfig+0x31e>
 8001894:	4b66      	ldr	r3, [pc, #408]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 8001896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001898:	4a65      	ldr	r2, [pc, #404]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	6713      	str	r3, [r2, #112]	; 0x70
 80018a0:	e01c      	b.n	80018dc <HAL_RCC_OscConfig+0x358>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b05      	cmp	r3, #5
 80018a8:	d10c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x340>
 80018aa:	4b61      	ldr	r3, [pc, #388]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 80018ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ae:	4a60      	ldr	r2, [pc, #384]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	6713      	str	r3, [r2, #112]	; 0x70
 80018b6:	4b5e      	ldr	r3, [pc, #376]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 80018b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ba:	4a5d      	ldr	r2, [pc, #372]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6713      	str	r3, [r2, #112]	; 0x70
 80018c2:	e00b      	b.n	80018dc <HAL_RCC_OscConfig+0x358>
 80018c4:	4b5a      	ldr	r3, [pc, #360]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 80018c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c8:	4a59      	ldr	r2, [pc, #356]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 80018ca:	f023 0301 	bic.w	r3, r3, #1
 80018ce:	6713      	str	r3, [r2, #112]	; 0x70
 80018d0:	4b57      	ldr	r3, [pc, #348]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 80018d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d4:	4a56      	ldr	r2, [pc, #344]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 80018d6:	f023 0304 	bic.w	r3, r3, #4
 80018da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d015      	beq.n	8001910 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e4:	f7ff f87e 	bl	80009e4 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ea:	e00a      	b.n	8001902 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ec:	f7ff f87a 	bl	80009e4 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e0d7      	b.n	8001ab2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001902:	4b4b      	ldr	r3, [pc, #300]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 8001904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0ee      	beq.n	80018ec <HAL_RCC_OscConfig+0x368>
 800190e:	e014      	b.n	800193a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001910:	f7ff f868 	bl	80009e4 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001916:	e00a      	b.n	800192e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001918:	f7ff f864 	bl	80009e4 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f241 3288 	movw	r2, #5000	; 0x1388
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e0c1      	b.n	8001ab2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192e:	4b40      	ldr	r3, [pc, #256]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 8001930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1ee      	bne.n	8001918 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800193a:	7dfb      	ldrb	r3, [r7, #23]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d105      	bne.n	800194c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001940:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	4a3a      	ldr	r2, [pc, #232]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 8001946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800194a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 80ad 	beq.w	8001ab0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001956:	4b36      	ldr	r3, [pc, #216]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b08      	cmp	r3, #8
 8001960:	d060      	beq.n	8001a24 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d145      	bne.n	80019f6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196a:	4b33      	ldr	r3, [pc, #204]	; (8001a38 <HAL_RCC_OscConfig+0x4b4>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff f838 	bl	80009e4 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001978:	f7ff f834 	bl	80009e4 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e093      	b.n	8001ab2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198a:	4b29      	ldr	r3, [pc, #164]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69da      	ldr	r2, [r3, #28]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	019b      	lsls	r3, r3, #6
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ac:	085b      	lsrs	r3, r3, #1
 80019ae:	3b01      	subs	r3, #1
 80019b0:	041b      	lsls	r3, r3, #16
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	061b      	lsls	r3, r3, #24
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	071b      	lsls	r3, r3, #28
 80019c2:	491b      	ldr	r1, [pc, #108]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_RCC_OscConfig+0x4b4>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ce:	f7ff f809 	bl	80009e4 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d6:	f7ff f805 	bl	80009e4 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e064      	b.n	8001ab2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x452>
 80019f4:	e05c      	b.n	8001ab0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <HAL_RCC_OscConfig+0x4b4>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7fe fff2 	bl	80009e4 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a04:	f7fe ffee 	bl	80009e4 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e04d      	b.n	8001ab2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_RCC_OscConfig+0x4ac>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x480>
 8001a22:	e045      	b.n	8001ab0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d107      	bne.n	8001a3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e040      	b.n	8001ab2 <HAL_RCC_OscConfig+0x52e>
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40007000 	.word	0x40007000
 8001a38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <HAL_RCC_OscConfig+0x538>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d030      	beq.n	8001aac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d129      	bne.n	8001aac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d122      	bne.n	8001aac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d119      	bne.n	8001aac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a82:	085b      	lsrs	r3, r3, #1
 8001a84:	3b01      	subs	r3, #1
 8001a86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d10f      	bne.n	8001aac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d107      	bne.n	8001aac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e000      	b.n	8001ab2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800

08001ac0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e07b      	b.n	8001bca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d108      	bne.n	8001aec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ae2:	d009      	beq.n	8001af8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
 8001aea:	e005      	b.n	8001af8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d106      	bne.n	8001b18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7fe fe04 	bl	8000720 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7c:	ea42 0103 	orr.w	r1, r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	0c1b      	lsrs	r3, r3, #16
 8001b96:	f003 0104 	and.w	r1, r3, #4
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	f003 0210 	and.w	r2, r3, #16
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	69da      	ldr	r2, [r3, #28]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b088      	sub	sp, #32
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	4613      	mov	r3, r2
 8001be0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_SPI_Transmit+0x22>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e126      	b.n	8001e42 <HAL_SPI_Transmit+0x270>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bfc:	f7fe fef2 	bl	80009e4 <HAL_GetTick>
 8001c00:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d002      	beq.n	8001c18 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001c12:	2302      	movs	r3, #2
 8001c14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c16:	e10b      	b.n	8001e30 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <HAL_SPI_Transmit+0x52>
 8001c1e:	88fb      	ldrh	r3, [r7, #6]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c28:	e102      	b.n	8001e30 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	88fa      	ldrh	r2, [r7, #6]
 8001c42:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	88fa      	ldrh	r2, [r7, #6]
 8001c48:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c70:	d10f      	bne.n	8001c92 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c90:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9c:	2b40      	cmp	r3, #64	; 0x40
 8001c9e:	d007      	beq.n	8001cb0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cb8:	d14b      	bne.n	8001d52 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <HAL_SPI_Transmit+0xf6>
 8001cc2:	8afb      	ldrh	r3, [r7, #22]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d13e      	bne.n	8001d46 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	881a      	ldrh	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	1c9a      	adds	r2, r3, #2
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001cec:	e02b      	b.n	8001d46 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d112      	bne.n	8001d22 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	881a      	ldrh	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0c:	1c9a      	adds	r2, r3, #2
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001d20:	e011      	b.n	8001d46 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d22:	f7fe fe5f 	bl	80009e4 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d803      	bhi.n	8001d3a <HAL_SPI_Transmit+0x168>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d38:	d102      	bne.n	8001d40 <HAL_SPI_Transmit+0x16e>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d102      	bne.n	8001d46 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d44:	e074      	b.n	8001e30 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1ce      	bne.n	8001cee <HAL_SPI_Transmit+0x11c>
 8001d50:	e04c      	b.n	8001dec <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d002      	beq.n	8001d60 <HAL_SPI_Transmit+0x18e>
 8001d5a:	8afb      	ldrh	r3, [r7, #22]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d140      	bne.n	8001de2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	330c      	adds	r3, #12
 8001d6a:	7812      	ldrb	r2, [r2, #0]
 8001d6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001d86:	e02c      	b.n	8001de2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d113      	bne.n	8001dbe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	330c      	adds	r3, #12
 8001da0:	7812      	ldrb	r2, [r2, #0]
 8001da2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	86da      	strh	r2, [r3, #54]	; 0x36
 8001dbc:	e011      	b.n	8001de2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dbe:	f7fe fe11 	bl	80009e4 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d803      	bhi.n	8001dd6 <HAL_SPI_Transmit+0x204>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dd4:	d102      	bne.n	8001ddc <HAL_SPI_Transmit+0x20a>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001de0:	e026      	b.n	8001e30 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1cd      	bne.n	8001d88 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	6839      	ldr	r1, [r7, #0]
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 f8b3 	bl	8001f5c <SPI_EndRxTxTransaction>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10a      	bne.n	8001e20 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	77fb      	strb	r3, [r7, #31]
 8001e2c:	e000      	b.n	8001e30 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001e2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e40:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3720      	adds	r7, #32
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e5c:	f7fe fdc2 	bl	80009e4 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e6c:	f7fe fdba 	bl	80009e4 <HAL_GetTick>
 8001e70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e72:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	015b      	lsls	r3, r3, #5
 8001e78:	0d1b      	lsrs	r3, r3, #20
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	fb02 f303 	mul.w	r3, r2, r3
 8001e80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e82:	e054      	b.n	8001f2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e8a:	d050      	beq.n	8001f2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e8c:	f7fe fdaa 	bl	80009e4 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d902      	bls.n	8001ea2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d13d      	bne.n	8001f1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001eb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eba:	d111      	bne.n	8001ee0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ec4:	d004      	beq.n	8001ed0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ece:	d107      	bne.n	8001ee0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ede:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ee8:	d10f      	bne.n	8001f0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e017      	b.n	8001f4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4013      	ands	r3, r2
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	bf0c      	ite	eq
 8001f3e:	2301      	moveq	r3, #1
 8001f40:	2300      	movne	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d19b      	bne.n	8001e84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3720      	adds	r7, #32
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000000 	.word	0x20000000

08001f5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001f68:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <SPI_EndRxTxTransaction+0x7c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a1b      	ldr	r2, [pc, #108]	; (8001fdc <SPI_EndRxTxTransaction+0x80>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	0d5b      	lsrs	r3, r3, #21
 8001f74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f78:	fb02 f303 	mul.w	r3, r2, r3
 8001f7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f86:	d112      	bne.n	8001fae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2180      	movs	r1, #128	; 0x80
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f7ff ff5a 	bl	8001e4c <SPI_WaitFlagStateUntilTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d016      	beq.n	8001fcc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa2:	f043 0220 	orr.w	r2, r3, #32
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e00f      	b.n	8001fce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00a      	beq.n	8001fca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc4:	2b80      	cmp	r3, #128	; 0x80
 8001fc6:	d0f2      	beq.n	8001fae <SPI_EndRxTxTransaction+0x52>
 8001fc8:	e000      	b.n	8001fcc <SPI_EndRxTxTransaction+0x70>
        break;
 8001fca:	bf00      	nop
  }

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	165e9f81 	.word	0x165e9f81

08001fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e03f      	b.n	8002072 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7fe fbd2 	bl	80007b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2224      	movs	r2, #36	; 0x24
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f829 	bl	800207c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2220      	movs	r2, #32
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800207c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002080:	b0c0      	sub	sp, #256	; 0x100
 8002082:	af00      	add	r7, sp, #0
 8002084:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002098:	68d9      	ldr	r1, [r3, #12]
 800209a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	ea40 0301 	orr.w	r3, r0, r1
 80020a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	431a      	orrs	r2, r3
 80020bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80020d4:	f021 010c 	bic.w	r1, r1, #12
 80020d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020e2:	430b      	orrs	r3, r1
 80020e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80020f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f6:	6999      	ldr	r1, [r3, #24]
 80020f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	ea40 0301 	orr.w	r3, r0, r1
 8002102:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	4b8f      	ldr	r3, [pc, #572]	; (8002348 <UART_SetConfig+0x2cc>)
 800210c:	429a      	cmp	r2, r3
 800210e:	d005      	beq.n	800211c <UART_SetConfig+0xa0>
 8002110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	4b8d      	ldr	r3, [pc, #564]	; (800234c <UART_SetConfig+0x2d0>)
 8002118:	429a      	cmp	r2, r3
 800211a:	d104      	bne.n	8002126 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800211c:	f7fe ffee 	bl	80010fc <HAL_RCC_GetPCLK2Freq>
 8002120:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002124:	e003      	b.n	800212e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002126:	f7fe ffd5 	bl	80010d4 <HAL_RCC_GetPCLK1Freq>
 800212a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800212e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002138:	f040 810c 	bne.w	8002354 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800213c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002140:	2200      	movs	r2, #0
 8002142:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002146:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800214a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800214e:	4622      	mov	r2, r4
 8002150:	462b      	mov	r3, r5
 8002152:	1891      	adds	r1, r2, r2
 8002154:	65b9      	str	r1, [r7, #88]	; 0x58
 8002156:	415b      	adcs	r3, r3
 8002158:	65fb      	str	r3, [r7, #92]	; 0x5c
 800215a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800215e:	4621      	mov	r1, r4
 8002160:	eb12 0801 	adds.w	r8, r2, r1
 8002164:	4629      	mov	r1, r5
 8002166:	eb43 0901 	adc.w	r9, r3, r1
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002176:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800217a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800217e:	4690      	mov	r8, r2
 8002180:	4699      	mov	r9, r3
 8002182:	4623      	mov	r3, r4
 8002184:	eb18 0303 	adds.w	r3, r8, r3
 8002188:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800218c:	462b      	mov	r3, r5
 800218e:	eb49 0303 	adc.w	r3, r9, r3
 8002192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80021a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80021a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80021aa:	460b      	mov	r3, r1
 80021ac:	18db      	adds	r3, r3, r3
 80021ae:	653b      	str	r3, [r7, #80]	; 0x50
 80021b0:	4613      	mov	r3, r2
 80021b2:	eb42 0303 	adc.w	r3, r2, r3
 80021b6:	657b      	str	r3, [r7, #84]	; 0x54
 80021b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80021c0:	f7fe f800 	bl	80001c4 <__aeabi_uldivmod>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4b61      	ldr	r3, [pc, #388]	; (8002350 <UART_SetConfig+0x2d4>)
 80021ca:	fba3 2302 	umull	r2, r3, r3, r2
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	011c      	lsls	r4, r3, #4
 80021d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021d6:	2200      	movs	r2, #0
 80021d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80021e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80021e4:	4642      	mov	r2, r8
 80021e6:	464b      	mov	r3, r9
 80021e8:	1891      	adds	r1, r2, r2
 80021ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80021ec:	415b      	adcs	r3, r3
 80021ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80021f4:	4641      	mov	r1, r8
 80021f6:	eb12 0a01 	adds.w	sl, r2, r1
 80021fa:	4649      	mov	r1, r9
 80021fc:	eb43 0b01 	adc.w	fp, r3, r1
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800220c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002210:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002214:	4692      	mov	sl, r2
 8002216:	469b      	mov	fp, r3
 8002218:	4643      	mov	r3, r8
 800221a:	eb1a 0303 	adds.w	r3, sl, r3
 800221e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002222:	464b      	mov	r3, r9
 8002224:	eb4b 0303 	adc.w	r3, fp, r3
 8002228:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800222c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002238:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800223c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002240:	460b      	mov	r3, r1
 8002242:	18db      	adds	r3, r3, r3
 8002244:	643b      	str	r3, [r7, #64]	; 0x40
 8002246:	4613      	mov	r3, r2
 8002248:	eb42 0303 	adc.w	r3, r2, r3
 800224c:	647b      	str	r3, [r7, #68]	; 0x44
 800224e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002252:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002256:	f7fd ffb5 	bl	80001c4 <__aeabi_uldivmod>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4611      	mov	r1, r2
 8002260:	4b3b      	ldr	r3, [pc, #236]	; (8002350 <UART_SetConfig+0x2d4>)
 8002262:	fba3 2301 	umull	r2, r3, r3, r1
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	2264      	movs	r2, #100	; 0x64
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	1acb      	subs	r3, r1, r3
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002276:	4b36      	ldr	r3, [pc, #216]	; (8002350 <UART_SetConfig+0x2d4>)
 8002278:	fba3 2302 	umull	r2, r3, r3, r2
 800227c:	095b      	lsrs	r3, r3, #5
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002284:	441c      	add	r4, r3
 8002286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800228a:	2200      	movs	r2, #0
 800228c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002290:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002294:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002298:	4642      	mov	r2, r8
 800229a:	464b      	mov	r3, r9
 800229c:	1891      	adds	r1, r2, r2
 800229e:	63b9      	str	r1, [r7, #56]	; 0x38
 80022a0:	415b      	adcs	r3, r3
 80022a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022a8:	4641      	mov	r1, r8
 80022aa:	1851      	adds	r1, r2, r1
 80022ac:	6339      	str	r1, [r7, #48]	; 0x30
 80022ae:	4649      	mov	r1, r9
 80022b0:	414b      	adcs	r3, r1
 80022b2:	637b      	str	r3, [r7, #52]	; 0x34
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80022c0:	4659      	mov	r1, fp
 80022c2:	00cb      	lsls	r3, r1, #3
 80022c4:	4651      	mov	r1, sl
 80022c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022ca:	4651      	mov	r1, sl
 80022cc:	00ca      	lsls	r2, r1, #3
 80022ce:	4610      	mov	r0, r2
 80022d0:	4619      	mov	r1, r3
 80022d2:	4603      	mov	r3, r0
 80022d4:	4642      	mov	r2, r8
 80022d6:	189b      	adds	r3, r3, r2
 80022d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022dc:	464b      	mov	r3, r9
 80022de:	460a      	mov	r2, r1
 80022e0:	eb42 0303 	adc.w	r3, r2, r3
 80022e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80022f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80022f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80022fc:	460b      	mov	r3, r1
 80022fe:	18db      	adds	r3, r3, r3
 8002300:	62bb      	str	r3, [r7, #40]	; 0x28
 8002302:	4613      	mov	r3, r2
 8002304:	eb42 0303 	adc.w	r3, r2, r3
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800230a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800230e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002312:	f7fd ff57 	bl	80001c4 <__aeabi_uldivmod>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <UART_SetConfig+0x2d4>)
 800231c:	fba3 1302 	umull	r1, r3, r3, r2
 8002320:	095b      	lsrs	r3, r3, #5
 8002322:	2164      	movs	r1, #100	; 0x64
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	3332      	adds	r3, #50	; 0x32
 800232e:	4a08      	ldr	r2, [pc, #32]	; (8002350 <UART_SetConfig+0x2d4>)
 8002330:	fba2 2303 	umull	r2, r3, r2, r3
 8002334:	095b      	lsrs	r3, r3, #5
 8002336:	f003 0207 	and.w	r2, r3, #7
 800233a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4422      	add	r2, r4
 8002342:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002344:	e106      	b.n	8002554 <UART_SetConfig+0x4d8>
 8002346:	bf00      	nop
 8002348:	40011000 	.word	0x40011000
 800234c:	40011400 	.word	0x40011400
 8002350:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002358:	2200      	movs	r2, #0
 800235a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800235e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002362:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002366:	4642      	mov	r2, r8
 8002368:	464b      	mov	r3, r9
 800236a:	1891      	adds	r1, r2, r2
 800236c:	6239      	str	r1, [r7, #32]
 800236e:	415b      	adcs	r3, r3
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
 8002372:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002376:	4641      	mov	r1, r8
 8002378:	1854      	adds	r4, r2, r1
 800237a:	4649      	mov	r1, r9
 800237c:	eb43 0501 	adc.w	r5, r3, r1
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	00eb      	lsls	r3, r5, #3
 800238a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800238e:	00e2      	lsls	r2, r4, #3
 8002390:	4614      	mov	r4, r2
 8002392:	461d      	mov	r5, r3
 8002394:	4643      	mov	r3, r8
 8002396:	18e3      	adds	r3, r4, r3
 8002398:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800239c:	464b      	mov	r3, r9
 800239e:	eb45 0303 	adc.w	r3, r5, r3
 80023a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80023a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80023c2:	4629      	mov	r1, r5
 80023c4:	008b      	lsls	r3, r1, #2
 80023c6:	4621      	mov	r1, r4
 80023c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023cc:	4621      	mov	r1, r4
 80023ce:	008a      	lsls	r2, r1, #2
 80023d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80023d4:	f7fd fef6 	bl	80001c4 <__aeabi_uldivmod>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4b60      	ldr	r3, [pc, #384]	; (8002560 <UART_SetConfig+0x4e4>)
 80023de:	fba3 2302 	umull	r2, r3, r3, r2
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	011c      	lsls	r4, r3, #4
 80023e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023ea:	2200      	movs	r2, #0
 80023ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80023f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80023f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80023f8:	4642      	mov	r2, r8
 80023fa:	464b      	mov	r3, r9
 80023fc:	1891      	adds	r1, r2, r2
 80023fe:	61b9      	str	r1, [r7, #24]
 8002400:	415b      	adcs	r3, r3
 8002402:	61fb      	str	r3, [r7, #28]
 8002404:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002408:	4641      	mov	r1, r8
 800240a:	1851      	adds	r1, r2, r1
 800240c:	6139      	str	r1, [r7, #16]
 800240e:	4649      	mov	r1, r9
 8002410:	414b      	adcs	r3, r1
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	f04f 0300 	mov.w	r3, #0
 800241c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002420:	4659      	mov	r1, fp
 8002422:	00cb      	lsls	r3, r1, #3
 8002424:	4651      	mov	r1, sl
 8002426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800242a:	4651      	mov	r1, sl
 800242c:	00ca      	lsls	r2, r1, #3
 800242e:	4610      	mov	r0, r2
 8002430:	4619      	mov	r1, r3
 8002432:	4603      	mov	r3, r0
 8002434:	4642      	mov	r2, r8
 8002436:	189b      	adds	r3, r3, r2
 8002438:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800243c:	464b      	mov	r3, r9
 800243e:	460a      	mov	r2, r1
 8002440:	eb42 0303 	adc.w	r3, r2, r3
 8002444:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	67bb      	str	r3, [r7, #120]	; 0x78
 8002452:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002460:	4649      	mov	r1, r9
 8002462:	008b      	lsls	r3, r1, #2
 8002464:	4641      	mov	r1, r8
 8002466:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800246a:	4641      	mov	r1, r8
 800246c:	008a      	lsls	r2, r1, #2
 800246e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002472:	f7fd fea7 	bl	80001c4 <__aeabi_uldivmod>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4611      	mov	r1, r2
 800247c:	4b38      	ldr	r3, [pc, #224]	; (8002560 <UART_SetConfig+0x4e4>)
 800247e:	fba3 2301 	umull	r2, r3, r3, r1
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	2264      	movs	r2, #100	; 0x64
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	1acb      	subs	r3, r1, r3
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	3332      	adds	r3, #50	; 0x32
 8002490:	4a33      	ldr	r2, [pc, #204]	; (8002560 <UART_SetConfig+0x4e4>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800249c:	441c      	add	r4, r3
 800249e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024a2:	2200      	movs	r2, #0
 80024a4:	673b      	str	r3, [r7, #112]	; 0x70
 80024a6:	677a      	str	r2, [r7, #116]	; 0x74
 80024a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80024ac:	4642      	mov	r2, r8
 80024ae:	464b      	mov	r3, r9
 80024b0:	1891      	adds	r1, r2, r2
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	415b      	adcs	r3, r3
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024bc:	4641      	mov	r1, r8
 80024be:	1851      	adds	r1, r2, r1
 80024c0:	6039      	str	r1, [r7, #0]
 80024c2:	4649      	mov	r1, r9
 80024c4:	414b      	adcs	r3, r1
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80024d4:	4659      	mov	r1, fp
 80024d6:	00cb      	lsls	r3, r1, #3
 80024d8:	4651      	mov	r1, sl
 80024da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024de:	4651      	mov	r1, sl
 80024e0:	00ca      	lsls	r2, r1, #3
 80024e2:	4610      	mov	r0, r2
 80024e4:	4619      	mov	r1, r3
 80024e6:	4603      	mov	r3, r0
 80024e8:	4642      	mov	r2, r8
 80024ea:	189b      	adds	r3, r3, r2
 80024ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80024ee:	464b      	mov	r3, r9
 80024f0:	460a      	mov	r2, r1
 80024f2:	eb42 0303 	adc.w	r3, r2, r3
 80024f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	663b      	str	r3, [r7, #96]	; 0x60
 8002502:	667a      	str	r2, [r7, #100]	; 0x64
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002510:	4649      	mov	r1, r9
 8002512:	008b      	lsls	r3, r1, #2
 8002514:	4641      	mov	r1, r8
 8002516:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800251a:	4641      	mov	r1, r8
 800251c:	008a      	lsls	r2, r1, #2
 800251e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002522:	f7fd fe4f 	bl	80001c4 <__aeabi_uldivmod>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <UART_SetConfig+0x4e4>)
 800252c:	fba3 1302 	umull	r1, r3, r3, r2
 8002530:	095b      	lsrs	r3, r3, #5
 8002532:	2164      	movs	r1, #100	; 0x64
 8002534:	fb01 f303 	mul.w	r3, r1, r3
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	3332      	adds	r3, #50	; 0x32
 800253e:	4a08      	ldr	r2, [pc, #32]	; (8002560 <UART_SetConfig+0x4e4>)
 8002540:	fba2 2303 	umull	r2, r3, r2, r3
 8002544:	095b      	lsrs	r3, r3, #5
 8002546:	f003 020f 	and.w	r2, r3, #15
 800254a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4422      	add	r2, r4
 8002552:	609a      	str	r2, [r3, #8]
}
 8002554:	bf00      	nop
 8002556:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800255a:	46bd      	mov	sp, r7
 800255c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002560:	51eb851f 	.word	0x51eb851f

08002564 <__libc_init_array>:
 8002564:	b570      	push	{r4, r5, r6, lr}
 8002566:	4d0d      	ldr	r5, [pc, #52]	; (800259c <__libc_init_array+0x38>)
 8002568:	4c0d      	ldr	r4, [pc, #52]	; (80025a0 <__libc_init_array+0x3c>)
 800256a:	1b64      	subs	r4, r4, r5
 800256c:	10a4      	asrs	r4, r4, #2
 800256e:	2600      	movs	r6, #0
 8002570:	42a6      	cmp	r6, r4
 8002572:	d109      	bne.n	8002588 <__libc_init_array+0x24>
 8002574:	4d0b      	ldr	r5, [pc, #44]	; (80025a4 <__libc_init_array+0x40>)
 8002576:	4c0c      	ldr	r4, [pc, #48]	; (80025a8 <__libc_init_array+0x44>)
 8002578:	f000 f970 	bl	800285c <_init>
 800257c:	1b64      	subs	r4, r4, r5
 800257e:	10a4      	asrs	r4, r4, #2
 8002580:	2600      	movs	r6, #0
 8002582:	42a6      	cmp	r6, r4
 8002584:	d105      	bne.n	8002592 <__libc_init_array+0x2e>
 8002586:	bd70      	pop	{r4, r5, r6, pc}
 8002588:	f855 3b04 	ldr.w	r3, [r5], #4
 800258c:	4798      	blx	r3
 800258e:	3601      	adds	r6, #1
 8002590:	e7ee      	b.n	8002570 <__libc_init_array+0xc>
 8002592:	f855 3b04 	ldr.w	r3, [r5], #4
 8002596:	4798      	blx	r3
 8002598:	3601      	adds	r6, #1
 800259a:	e7f2      	b.n	8002582 <__libc_init_array+0x1e>
 800259c:	08002894 	.word	0x08002894
 80025a0:	08002894 	.word	0x08002894
 80025a4:	08002894 	.word	0x08002894
 80025a8:	08002898 	.word	0x08002898

080025ac <memset>:
 80025ac:	4402      	add	r2, r0
 80025ae:	4603      	mov	r3, r0
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d100      	bne.n	80025b6 <memset+0xa>
 80025b4:	4770      	bx	lr
 80025b6:	f803 1b01 	strb.w	r1, [r3], #1
 80025ba:	e7f9      	b.n	80025b0 <memset+0x4>

080025bc <__udivmoddi4>:
 80025bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025c0:	4686      	mov	lr, r0
 80025c2:	468c      	mov	ip, r1
 80025c4:	4608      	mov	r0, r1
 80025c6:	9e08      	ldr	r6, [sp, #32]
 80025c8:	4615      	mov	r5, r2
 80025ca:	4674      	mov	r4, lr
 80025cc:	4619      	mov	r1, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f040 80c2 	bne.w	8002758 <__udivmoddi4+0x19c>
 80025d4:	4285      	cmp	r5, r0
 80025d6:	fab2 f282 	clz	r2, r2
 80025da:	d945      	bls.n	8002668 <__udivmoddi4+0xac>
 80025dc:	b14a      	cbz	r2, 80025f2 <__udivmoddi4+0x36>
 80025de:	f1c2 0320 	rsb	r3, r2, #32
 80025e2:	fa00 fc02 	lsl.w	ip, r0, r2
 80025e6:	fa2e f303 	lsr.w	r3, lr, r3
 80025ea:	4095      	lsls	r5, r2
 80025ec:	ea43 0c0c 	orr.w	ip, r3, ip
 80025f0:	4094      	lsls	r4, r2
 80025f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80025f6:	b2a8      	uxth	r0, r5
 80025f8:	fbbc f8fe 	udiv	r8, ip, lr
 80025fc:	0c23      	lsrs	r3, r4, #16
 80025fe:	fb0e cc18 	mls	ip, lr, r8, ip
 8002602:	fb08 f900 	mul.w	r9, r8, r0
 8002606:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800260a:	4599      	cmp	r9, r3
 800260c:	d928      	bls.n	8002660 <__udivmoddi4+0xa4>
 800260e:	18eb      	adds	r3, r5, r3
 8002610:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8002614:	d204      	bcs.n	8002620 <__udivmoddi4+0x64>
 8002616:	4599      	cmp	r9, r3
 8002618:	d902      	bls.n	8002620 <__udivmoddi4+0x64>
 800261a:	f1a8 0702 	sub.w	r7, r8, #2
 800261e:	442b      	add	r3, r5
 8002620:	eba3 0309 	sub.w	r3, r3, r9
 8002624:	b2a4      	uxth	r4, r4
 8002626:	fbb3 fcfe 	udiv	ip, r3, lr
 800262a:	fb0e 331c 	mls	r3, lr, ip, r3
 800262e:	fb0c f000 	mul.w	r0, ip, r0
 8002632:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002636:	42a0      	cmp	r0, r4
 8002638:	d914      	bls.n	8002664 <__udivmoddi4+0xa8>
 800263a:	192c      	adds	r4, r5, r4
 800263c:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8002640:	d204      	bcs.n	800264c <__udivmoddi4+0x90>
 8002642:	42a0      	cmp	r0, r4
 8002644:	d902      	bls.n	800264c <__udivmoddi4+0x90>
 8002646:	f1ac 0302 	sub.w	r3, ip, #2
 800264a:	442c      	add	r4, r5
 800264c:	1a24      	subs	r4, r4, r0
 800264e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 8002652:	b11e      	cbz	r6, 800265c <__udivmoddi4+0xa0>
 8002654:	40d4      	lsrs	r4, r2
 8002656:	2300      	movs	r3, #0
 8002658:	6034      	str	r4, [r6, #0]
 800265a:	6073      	str	r3, [r6, #4]
 800265c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002660:	4647      	mov	r7, r8
 8002662:	e7dd      	b.n	8002620 <__udivmoddi4+0x64>
 8002664:	4663      	mov	r3, ip
 8002666:	e7f1      	b.n	800264c <__udivmoddi4+0x90>
 8002668:	bb92      	cbnz	r2, 80026d0 <__udivmoddi4+0x114>
 800266a:	1b43      	subs	r3, r0, r5
 800266c:	2101      	movs	r1, #1
 800266e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8002672:	b2af      	uxth	r7, r5
 8002674:	fbb3 fcfe 	udiv	ip, r3, lr
 8002678:	0c20      	lsrs	r0, r4, #16
 800267a:	fb0e 331c 	mls	r3, lr, ip, r3
 800267e:	fb0c f807 	mul.w	r8, ip, r7
 8002682:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8002686:	4598      	cmp	r8, r3
 8002688:	d962      	bls.n	8002750 <__udivmoddi4+0x194>
 800268a:	18eb      	adds	r3, r5, r3
 800268c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8002690:	d204      	bcs.n	800269c <__udivmoddi4+0xe0>
 8002692:	4598      	cmp	r8, r3
 8002694:	d902      	bls.n	800269c <__udivmoddi4+0xe0>
 8002696:	f1ac 0002 	sub.w	r0, ip, #2
 800269a:	442b      	add	r3, r5
 800269c:	eba3 0308 	sub.w	r3, r3, r8
 80026a0:	b2a4      	uxth	r4, r4
 80026a2:	fbb3 fcfe 	udiv	ip, r3, lr
 80026a6:	fb0e 331c 	mls	r3, lr, ip, r3
 80026aa:	fb0c f707 	mul.w	r7, ip, r7
 80026ae:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80026b2:	42a7      	cmp	r7, r4
 80026b4:	d94e      	bls.n	8002754 <__udivmoddi4+0x198>
 80026b6:	192c      	adds	r4, r5, r4
 80026b8:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 80026bc:	d204      	bcs.n	80026c8 <__udivmoddi4+0x10c>
 80026be:	42a7      	cmp	r7, r4
 80026c0:	d902      	bls.n	80026c8 <__udivmoddi4+0x10c>
 80026c2:	f1ac 0302 	sub.w	r3, ip, #2
 80026c6:	442c      	add	r4, r5
 80026c8:	1be4      	subs	r4, r4, r7
 80026ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80026ce:	e7c0      	b.n	8002652 <__udivmoddi4+0x96>
 80026d0:	f1c2 0320 	rsb	r3, r2, #32
 80026d4:	fa20 f103 	lsr.w	r1, r0, r3
 80026d8:	4095      	lsls	r5, r2
 80026da:	4090      	lsls	r0, r2
 80026dc:	fa2e f303 	lsr.w	r3, lr, r3
 80026e0:	4303      	orrs	r3, r0
 80026e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80026e6:	b2af      	uxth	r7, r5
 80026e8:	fbb1 fcfe 	udiv	ip, r1, lr
 80026ec:	fb0e 101c 	mls	r0, lr, ip, r1
 80026f0:	0c19      	lsrs	r1, r3, #16
 80026f2:	fb0c f807 	mul.w	r8, ip, r7
 80026f6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80026fa:	4588      	cmp	r8, r1
 80026fc:	fa04 f402 	lsl.w	r4, r4, r2
 8002700:	d922      	bls.n	8002748 <__udivmoddi4+0x18c>
 8002702:	1869      	adds	r1, r5, r1
 8002704:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8002708:	d204      	bcs.n	8002714 <__udivmoddi4+0x158>
 800270a:	4588      	cmp	r8, r1
 800270c:	d902      	bls.n	8002714 <__udivmoddi4+0x158>
 800270e:	f1ac 0002 	sub.w	r0, ip, #2
 8002712:	4429      	add	r1, r5
 8002714:	eba1 0108 	sub.w	r1, r1, r8
 8002718:	b29b      	uxth	r3, r3
 800271a:	fbb1 fcfe 	udiv	ip, r1, lr
 800271e:	fb0e 111c 	mls	r1, lr, ip, r1
 8002722:	fb0c f707 	mul.w	r7, ip, r7
 8002726:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800272a:	429f      	cmp	r7, r3
 800272c:	d90e      	bls.n	800274c <__udivmoddi4+0x190>
 800272e:	18eb      	adds	r3, r5, r3
 8002730:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8002734:	d204      	bcs.n	8002740 <__udivmoddi4+0x184>
 8002736:	429f      	cmp	r7, r3
 8002738:	d902      	bls.n	8002740 <__udivmoddi4+0x184>
 800273a:	f1ac 0102 	sub.w	r1, ip, #2
 800273e:	442b      	add	r3, r5
 8002740:	1bdb      	subs	r3, r3, r7
 8002742:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8002746:	e792      	b.n	800266e <__udivmoddi4+0xb2>
 8002748:	4660      	mov	r0, ip
 800274a:	e7e3      	b.n	8002714 <__udivmoddi4+0x158>
 800274c:	4661      	mov	r1, ip
 800274e:	e7f7      	b.n	8002740 <__udivmoddi4+0x184>
 8002750:	4660      	mov	r0, ip
 8002752:	e7a3      	b.n	800269c <__udivmoddi4+0xe0>
 8002754:	4663      	mov	r3, ip
 8002756:	e7b7      	b.n	80026c8 <__udivmoddi4+0x10c>
 8002758:	4283      	cmp	r3, r0
 800275a:	d906      	bls.n	800276a <__udivmoddi4+0x1ae>
 800275c:	b916      	cbnz	r6, 8002764 <__udivmoddi4+0x1a8>
 800275e:	2100      	movs	r1, #0
 8002760:	4608      	mov	r0, r1
 8002762:	e77b      	b.n	800265c <__udivmoddi4+0xa0>
 8002764:	e9c6 e000 	strd	lr, r0, [r6]
 8002768:	e7f9      	b.n	800275e <__udivmoddi4+0x1a2>
 800276a:	fab3 f783 	clz	r7, r3
 800276e:	b98f      	cbnz	r7, 8002794 <__udivmoddi4+0x1d8>
 8002770:	4283      	cmp	r3, r0
 8002772:	d301      	bcc.n	8002778 <__udivmoddi4+0x1bc>
 8002774:	4572      	cmp	r2, lr
 8002776:	d808      	bhi.n	800278a <__udivmoddi4+0x1ce>
 8002778:	ebbe 0402 	subs.w	r4, lr, r2
 800277c:	eb60 0303 	sbc.w	r3, r0, r3
 8002780:	2001      	movs	r0, #1
 8002782:	469c      	mov	ip, r3
 8002784:	b91e      	cbnz	r6, 800278e <__udivmoddi4+0x1d2>
 8002786:	2100      	movs	r1, #0
 8002788:	e768      	b.n	800265c <__udivmoddi4+0xa0>
 800278a:	4638      	mov	r0, r7
 800278c:	e7fa      	b.n	8002784 <__udivmoddi4+0x1c8>
 800278e:	e9c6 4c00 	strd	r4, ip, [r6]
 8002792:	e7f8      	b.n	8002786 <__udivmoddi4+0x1ca>
 8002794:	f1c7 0c20 	rsb	ip, r7, #32
 8002798:	40bb      	lsls	r3, r7
 800279a:	fa22 f40c 	lsr.w	r4, r2, ip
 800279e:	431c      	orrs	r4, r3
 80027a0:	fa2e f10c 	lsr.w	r1, lr, ip
 80027a4:	fa20 f30c 	lsr.w	r3, r0, ip
 80027a8:	40b8      	lsls	r0, r7
 80027aa:	4301      	orrs	r1, r0
 80027ac:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80027b0:	fa0e f507 	lsl.w	r5, lr, r7
 80027b4:	fbb3 f8f9 	udiv	r8, r3, r9
 80027b8:	fa1f fe84 	uxth.w	lr, r4
 80027bc:	fb09 3018 	mls	r0, r9, r8, r3
 80027c0:	0c0b      	lsrs	r3, r1, #16
 80027c2:	fb08 fa0e 	mul.w	sl, r8, lr
 80027c6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80027ca:	459a      	cmp	sl, r3
 80027cc:	fa02 f207 	lsl.w	r2, r2, r7
 80027d0:	d940      	bls.n	8002854 <__udivmoddi4+0x298>
 80027d2:	18e3      	adds	r3, r4, r3
 80027d4:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80027d8:	d204      	bcs.n	80027e4 <__udivmoddi4+0x228>
 80027da:	459a      	cmp	sl, r3
 80027dc:	d902      	bls.n	80027e4 <__udivmoddi4+0x228>
 80027de:	f1a8 0002 	sub.w	r0, r8, #2
 80027e2:	4423      	add	r3, r4
 80027e4:	eba3 030a 	sub.w	r3, r3, sl
 80027e8:	b289      	uxth	r1, r1
 80027ea:	fbb3 f8f9 	udiv	r8, r3, r9
 80027ee:	fb09 3318 	mls	r3, r9, r8, r3
 80027f2:	fb08 fe0e 	mul.w	lr, r8, lr
 80027f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80027fa:	458e      	cmp	lr, r1
 80027fc:	d92c      	bls.n	8002858 <__udivmoddi4+0x29c>
 80027fe:	1861      	adds	r1, r4, r1
 8002800:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8002804:	d204      	bcs.n	8002810 <__udivmoddi4+0x254>
 8002806:	458e      	cmp	lr, r1
 8002808:	d902      	bls.n	8002810 <__udivmoddi4+0x254>
 800280a:	f1a8 0302 	sub.w	r3, r8, #2
 800280e:	4421      	add	r1, r4
 8002810:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8002814:	fba0 9802 	umull	r9, r8, r0, r2
 8002818:	eba1 010e 	sub.w	r1, r1, lr
 800281c:	4541      	cmp	r1, r8
 800281e:	46ce      	mov	lr, r9
 8002820:	4643      	mov	r3, r8
 8002822:	d302      	bcc.n	800282a <__udivmoddi4+0x26e>
 8002824:	d106      	bne.n	8002834 <__udivmoddi4+0x278>
 8002826:	454d      	cmp	r5, r9
 8002828:	d204      	bcs.n	8002834 <__udivmoddi4+0x278>
 800282a:	ebb9 0e02 	subs.w	lr, r9, r2
 800282e:	eb68 0304 	sbc.w	r3, r8, r4
 8002832:	3801      	subs	r0, #1
 8002834:	2e00      	cmp	r6, #0
 8002836:	d0a6      	beq.n	8002786 <__udivmoddi4+0x1ca>
 8002838:	ebb5 020e 	subs.w	r2, r5, lr
 800283c:	eb61 0103 	sbc.w	r1, r1, r3
 8002840:	fa01 fc0c 	lsl.w	ip, r1, ip
 8002844:	fa22 f307 	lsr.w	r3, r2, r7
 8002848:	ea4c 0303 	orr.w	r3, ip, r3
 800284c:	40f9      	lsrs	r1, r7
 800284e:	e9c6 3100 	strd	r3, r1, [r6]
 8002852:	e798      	b.n	8002786 <__udivmoddi4+0x1ca>
 8002854:	4640      	mov	r0, r8
 8002856:	e7c5      	b.n	80027e4 <__udivmoddi4+0x228>
 8002858:	4643      	mov	r3, r8
 800285a:	e7d9      	b.n	8002810 <__udivmoddi4+0x254>

0800285c <_init>:
 800285c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285e:	bf00      	nop
 8002860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002862:	bc08      	pop	{r3}
 8002864:	469e      	mov	lr, r3
 8002866:	4770      	bx	lr

08002868 <_fini>:
 8002868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286a:	bf00      	nop
 800286c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800286e:	bc08      	pop	{r3}
 8002870:	469e      	mov	lr, r3
 8002872:	4770      	bx	lr
